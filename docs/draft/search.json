[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"book provides overview basic skills needed turn raw data informative summaries visualisations presented professional reports presentations. book introduce learners R (R Core Team, 2021), programming language can help automate working data. book cover importing processing data spreadsheets, producing data summaries descriptive statistics tables, creating beautiful informative visualisations, constructing reports presentations automatically update underlying data changes.end book, able use R :clean process datasummarise datainformatively visualise datacreate reusable report templates","code":""},{"path":"index.html","id":"structure-of-the-course","chapter":"Overview","heading":"0.1 Structure of the course","text":"book accompanies 10-week course, covering one chapter per week. chapter introduce new skills concepts using concrete examples. various points, multiple-choice fill---blank questions check understanding. chapter accompanying walk-videos, instructor demonstrates skills covered chapter. chapter also accompanying exercises reinforce learning.","code":""},{"path":"index.html","id":"how-to-learn-data-skills","chapter":"Overview","heading":"0.2 How to learn data skills","text":"Learning data skills kind like gym membership (thanks Phil McAleer analogy). given state---art equipment use instructions use , data skills get stronger unless practice.Data skills require memorise lots code. introduced many different functions, main skill learn efficiently find information need. require getting used structure help files cheat sheets, learning Goggle problem choose helpful solution, learning read error messages.Learning code involves making lot mistakes. mistakes completely essential process, try feel frustrated. Many chapter exercises give broken code fix get experience seeing common errors look like. become experienced coder, might make fewer errors, recover much faster.","code":""},{"path":"dates-times.html","id":"dates-times","chapter":"1 Dates and Times","heading":"1 Dates and Times","text":"Working dates times can little tricky, lubridate package help. website helpful cheatsheet can view tutorial typing vignette(\"lubridate\") console pane. Dates Times R Data Science also gives helpful overview.appendix quick intro useful functions making reproducible reports.","code":"\n# packages needed for this appendix\nlibrary(tidyverse)\nlibrary(lubridate)"},{"path":"dates-times.html","id":"parsing","chapter":"1 Dates and Times","heading":"1.1 Parsing","text":"Dates can many formats. ymd functions can deal almost , regardless punctuation used format. examples produce date standard format \"2022-01-03\".See can make date format one parsers handle.similar functions date/times, .date/time functions can also take timezone argument. specify , defaults \"UTC\".","code":"\n# year-month-day orders\nymd(\"22 Jan 3\")\nymd(\"2022 January 3rd\")\n\n# month-day-year orders\nmdy(\"January 3, 2022\")\nmdy(\"Jan/03/22\")\n\n# day-month-year orders\ndmy(\"3JAN22\")\ndmy(\"3rd of January in the year 2022\")\nymd_hms(\"2022 Jan 3, 6:05 and 20s pm\")\nmdy_h(\"January 3rd, 2022 at 6pm\")## [1] \"2022-01-03 18:05:20 UTC\"\n## [1] \"2022-01-03 18:00:00 UTC\"\nymd_hm(\"2022-01-03 18:05\", tz = \"GMT\")## [1] \"2022-01-03 18:05:00 GMT\""},{"path":"dates-times.html","id":"get-parts","chapter":"1 Dates and Times","heading":"1.2 Get Parts","text":"frequently need extract parts date/time plotting. following functions extract specific parts date datetime object. godsend us never clue week year today.month() wday() functions can return factor labels.day week born?","code":"\n# get the date and time when this function is run\nnow <- now(tzone = \"GMT\")\n\n# get separate parts\ntime_parts <- list(\n  second  = second(now),\n  minute  = minute(now),\n  hour    = hour(now),\n  day     = day(now),  # day of the month (same as mday())\n  wday    = wday(now), # day of the week\n  yday    = yday(now), # day of the year\n  week    = week(now),\n  isoweek = isoweek(now), # ISO 8501 week calendar (Monday start)\n  epiweek = epiweek(now), # CDC epidemiological week (Sunday Start)\n  month   = month(now),\n  year    = year(now),\n  tz      = tz(now)\n)\n\nstr(time_parts)## List of 12\n##  $ second : num 43.5\n##  $ minute : int 16\n##  $ hour   : int 23\n##  $ day    : int 3\n##  $ wday   : num 5\n##  $ yday   : num 34\n##  $ week   : num 5\n##  $ isoweek: num 5\n##  $ epiweek: num 5\n##  $ month  : num 2\n##  $ year   : num 2022\n##  $ tz     : chr \"GMT\"\njan1 <- ymd(20220101)\nwday(jan1, label = TRUE)\nwday(jan1, label = TRUE, abbr = TRUE)\nmonth(jan1, label = TRUE)\nmonth(jan1, label = TRUE, abbr = TRUE)## [1] Sat\n## Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat\n## [1] Sat\n## Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat\n## [1] Jan\n## 12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec\n## [1] Jan\n## 12 Levels: Jan < Feb < Mar < Apr < May < Jun < Jul < Aug < Sep < ... < Dec\nbirthdate <- ymd(19761118) # put your own birthdate here\nwday(birthdate, label = TRUE)## [1] Thu\n## Levels: Sun < Mon < Tue < Wed < Thu < Fri < Sat"},{"path":"dates-times.html","id":"date-arithmetic","chapter":"1 Dates and Times","heading":"1.3 Date Arithmetic","text":"can add subtract dates. example, can get dates two weeks today adding weeks(2) today(). can probably guess add subtract seconds, minutes, days, months, years.day week 100th birthday ?think happen subtract one month March 31st? get NA, since February 31st day.Use special date operators %m+% %m-% add subtract months without risking impossible date.","code":"\ntoday() + weeks(1)## [1] \"2022-02-10\"\nbirthdate <- ymd(19761118) # put your own birthdate here\ncentennial <- birthdate + years(100)\nwday(centennial, label = TRUE, abbr = FALSE)## [1] Wednesday\n## 7 Levels: Sunday < Monday < Tuesday < Wednesday < Thursday < ... < Saturday\nymd(20220331) - months(1)## [1] NA\nymd(20220331) %m-% months(1)## [1] \"2022-02-28\""},{"path":"dates-times.html","id":"first-and-last-of-month","chapter":"1 Dates and Times","heading":"1.3.1 First and last of month","text":"things like billing, might need find first last days current, previous, next month. rollback() rollforward() functions easier trying parse dates.","code":"\nd <- ymd(\"2022-01-24\")\nrollback(d)                          # last day of the previous month\nrollforward(d)                       # last day of the current month\nrollback(d, roll_to_first = TRUE)    # first day of the current month\nrollforward(d, roll_to_first = TRUE) # first day of the next month## [1] \"2021-12-31\"\n## [1] \"2022-01-31\"\n## [1] \"2022-01-01\"\n## [1] \"2022-02-01\""},{"path":"dates-times.html","id":"rounding","chapter":"1 Dates and Times","heading":"1.3.2 Rounding","text":"can round dates times nearest unit. can useful , example, time measured nearest second, want group data nearest hour, rather extract hour component.","code":"\nymd_hm(\"2022-01-24 10:25\") %>% round_date(unit = \"hour\")\nymd_hm(\"2022-01-24 10:30\") %>% round_date(unit = \"hour\")\nymd_hm(\"2022-01-24 10:35\") %>% round_date(unit = \"hour\")## [1] \"2022-01-24 10:00:00 UTC\"\n## [1] \"2022-01-24 11:00:00 UTC\"\n## [1] \"2022-01-24 11:00:00 UTC\""},{"path":"dates-times.html","id":"internationalisation","chapter":"1 Dates and Times","heading":"1.4 Internationalisation","text":"may need work dates different locale computer's defaults, dates written French Russian. computer may non-English locale. Set locale argument relevant language code.","code":"\nymd(\"2022 January 24\", locale = \"en_GB\")\nymd(\"2022 Janvier 24\", locale = \"fr_FR\")\nwday(\"2022-01-03\", label = TRUE, locale = \"ru_RU\")## [1] \"2022-01-24\"\n## [1] \"2022-01-24\"\n## [1] пн\n## Levels: вс < пн < вт < ср < чт < пт < сб\n# check which locales are available on your computer\n# doesn't work for Windows\nsystem(\"locale -a\")"},{"path":"dates-times.html","id":"example","chapter":"1 Dates and Times","heading":"1.5 Example","text":"work examples tweets Appendix ??.time column already date/time (POSIXct) format, wanted plot tweets hour day week?nice side-effect using lubridate function get days week months year results ordered factor, display correctly plot. display months Greek (available system).","code":"\n# read all metrics files in data/tweets/\ntweets <- list.files(\n  path = \"data/tweets\", \n  pattern = \"^tweet_activity_metrics\",\n  full.names = TRUE\n) %>%\n  map_df(read_csv) %>%\n  select(!starts_with(\"promoted\"))\ntweets %>%\n  mutate(weekday = wday(time, label = TRUE),\n         hour = hour(time)) %>%\n  ggplot(aes(x = hour, fill = weekday)) +\n  geom_bar(size = 1, alpha = 0.5, show.legend = FALSE) +\n  facet_grid(~weekday) +\n  scale_fill_manual(values = rainbow(7)) +\n  scale_x_continuous(breaks = seq(0, 24, 4))\ntweets %>%\n  mutate(month = month(time, label = TRUE, abbr = FALSE, locale = \"el_GR.UTF-8\")) %>%\n  ggplot(aes(x = month, fill = month)) +\n  geom_bar(show.legend = FALSE) +\n  scale_x_discrete(name = NULL, guide = guide_axis(n.dodge=2))"}]
