[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"book provides overview basic skills needed turn raw data informative summaries visualisations presented professional reports presentations. book introduce learners R (R Core Team, 2021), programming language can help automate working data. book cover importing processing data spreadsheets, producing data summaries descriptive statistics tables, creating beautiful informative visualisations, constructing reports presentations automatically update underlying data changes.end book, able use R :clean process datasummarise datainformatively visualise datacreate reusable report templates","code":""},{"path":"index.html","id":"structure-of-the-course","chapter":"Overview","heading":"0.1 Structure of the course","text":"book accompanies 10-week course, covering one chapter per week. chapter introduce new skills concepts using concrete examples. various points, multiple-choice fill---blank questions check understanding. chapter accompanying walk-videos, instructor demonstrates skills covered chapter. chapter also accompanying exercises reinforce learning.","code":""},{"path":"index.html","id":"how-to-learn-data-skills","chapter":"Overview","heading":"0.2 How to learn data skills","text":"Learning data skills kind like gym membership (thanks Phil McAleer analogy). given state---art equipment use instructions use , data skills get stronger unless practice.Data skills require memorise lots code. introduced many different functions, main skill learn efficiently find information need. require getting used structure help files cheat sheets, learning Goggle problem choose helpful solution, learning read error messages.Learning code involves making lot mistakes. mistakes completely essential process, try feel frustrated. Many chapter exercises give broken code fix get experience seeing common errors look like. become experienced coder, might make fewer errors, recover much faster.","code":""},{"path":"tidy.html","id":"tidy","chapter":"1 Data Tidying","heading":"1 Data Tidying","text":"","code":""},{"path":"tidy.html","id":"ilo-tidy","chapter":"1 Data Tidying","heading":"1.1 Intended Learning Outcomes","text":"able reshape data long wide formatsSeparate, change, reorder, rename columnsUse pipes chain together functionsIn chapter use following packages:","code":"\nlibrary(tidyverse) # for data wrangling"},{"path":"tidy.html","id":"set-up","chapter":"1 Data Tidying","heading":"1.2 Set-up","text":"First, create new project work chapter named 07-tidy. Second, open save new R Markdown document named tidy.Rmd`, delete welcome text load required packages chapter.","code":""},{"path":"tidy.html","id":"data-structures","chapter":"1 Data Tidying","heading":"1.3 Data Structures","text":"data work likely come many different formats structures. structures may driven software use outputs data, data structures may also differ human intervention attempts organisation, may particularly helpful.Data cleaning tidying likely time consuming difficult task perform. Whilst can create code recipes analyses visualisations, Hadley Whickham puts \"every messy dataset messy way\" means often solve new problems specific dataset. Additionally, moving data structures intuitive read humans useful computer requires conceptual shift comes practice. verbose way saying lies ahead chapter unlikely sink first attempt need practice different examples (preferably data know well) truly feel comfortable .First, terminology.observation information single \"thing\" single point time. things can customers, sales, orders, feedback questionnaires, tweets, really anything. Observations way identify , unique ID combination variable values.variable one type information observation. example, observation sale, variables might sale sale ID, customer's ID, date sale, price paid, method payment.value data one variable one observation. example, value date variable observation sale might 2021-08-20.following table data experiment participants' reactions times tested two separate occasions.356? ObservationVariableValueWhat test time? ObservationVariableValueHow many variables dataset? three variables, Participant, Reaction time, test time. Even though test time spread across three columns, still one variable.356 value single data point one variable one observation.","code":""},{"path":"tidy.html","id":"untidy-data","chapter":"1 Data Tidying","heading":"1.3.1 Untidy data","text":"First, look example messy, untidy, dataset. row data relating one customer.itemsprice_{year} columns contain two values (number items price per item)totalprice_{year} columns contain total amount spent customer year, .e., item * price.data three different years dataset.\nTable 1.1: Untidy table\nsay wanted calculate total price per customer three years total number items bought per customer. perform mathematical operations itemsprice_{year} columns character data types.probably normally use Excel tosplit itemsprice_2018 column item_2018 price_2018 columnssplit itemsprice_2019 column item_2019 price_2019 columnssplit itemsprice_2020 column item_2018 price_2020 columnsadd item_2018 + item_2019 + item_2020 get total number items bought per customeradd totalprice_2018 + totalprice_2019 + totalprice_2020 get total price per customerThink many steps Excel 10 years table, different number years time encountered data like .","code":""},{"path":"tidy.html","id":"tidy-data","chapter":"1 Data Tidying","heading":"1.3.2 Tidy data","text":"three rules \"tidy data\", data format makes easier combine data different tables, create summary tables, visualise data.observation must rowEach variable must columnEach value must cellThis tidy version:now five variables (columns) five different types information customer, id, year, number items bought, price per item, total price. Even though multiple values one, values correspond just five different types information.row customer's orders particular year.number items (items) price per item (price_per_item) separate columns, now can perform mathematical operations .\nTable 1.1: Tidy table\ncalculate total price per customer three years total number items bought per customer R, :group table customer_idsum items column get total number items bought per customersum totalprice column get total price per customerIt also makes easier use ggplot() - try running following plots.10 years table, different number years time encountered data like , code producing tables plots never changes.control data recorded, make life easier record tidy format start. However, always control, class also teach convert untidy tables tidy tables.","code":"\ntidy_data <- read_csv(\"data/tidy_data.csv\")\n\ntidy_data %>%\n  group_by(customer_id) %>%\n  summarise(\n    total_items = sum(items),\n    total_price = sum(totalprice)\n  )\n# all years\nggplot(tidy_data, aes(x = totalprice)) +\n  geom_histogram(binwidth = 10, colour = \"black\")\n\n# different fill on one plot for each year\nggplot(tidy_data, aes(x = totalprice, fill = as.factor(year))) +\n  geom_histogram(binwidth = 10, colour = \"black\")\n\nggplot(tidy_data, aes(x = totalprice, fill = as.factor(year))) +\n  geom_histogram(binwidth = 10, \n                 colour = \"black\",\n                 show.legend = FALSE) +\n  facet_wrap(~year)"},{"path":"tidy.html","id":"reshaping-data","chapter":"1 Data Tidying","heading":"1.4 Reshaping Data","text":"Data tables can wide format long format (mix two). Wide data observations one thing row, long data observation separate row. often need convert formats different types summaries visualisation. may done something similar using pivot tables Excel.\nFigure 1.1: Converting wide long formats using pivot tables Excel.\ncan easier just consider one type measurement time. untidy_data two types measurements, total price price per time. look just totalprice data first.can select just columns want using dplyr::select() function. function's first argument data table want select , argument either name column table, new_name = old_name. useful function changing column names order columns, well selecting subset columns. Note names columns numbers, need wrapped backticks otherwise work.\nTable 1.2: Wide data\nwide format, row customer, represents data several years. really intuitive way humans read table, easy computer process .data can represented long format creating new column specifies year observation new column specifies totalprice observation. easier use make summaries plots.\nTable 1.3: Long data\nCreate long version following table many million followers band different social media platforms. need use code, just sketch notebook make table spreadsheet.answer need column headers order.researcher used thinking IVs DVs, may find easier remember IV DV column, rather level IV.pivot functions allow transform data table wide long long wide.","code":"\n# select just the customer ID and 3 total price columns\nuntidy_price <- select(\n  .data = untidy_data,\n  customer_id, \n  `2018` = totalprice_2018,\n  `2019` = totalprice_2019,\n  `2020` = totalprice_2020\n)"},{"path":"tidy.html","id":"wide-to-long","chapter":"1 Data Tidying","heading":"1.4.0.1 Wide to long","text":"function pivot_longer() converts wide data table longer format converting headers specified columns values new columns, combining values columns new condensed column.function several arguments:cols: columns want make long; can refer names, like c(`2018`, `2019`, `2020`) `2018`:`2020` numbers, like c(2, 3, 4) 2:4names_to: want call new columns cols column header names go intovalues_to: want call new column contains values colsWith pivot functions, can easier show tell - run code compare untidy_price untidy_price_long pivot code try map argument changed.\nTable 1.4: Data made longer pivot_longer()\n","code":"\nuntidy_price_long <- pivot_longer(\n  data = untidy_price, \n  cols = `2018`:`2020`, # columns to make long \n  names_to = \"year\", # new column name for headers\n  values_to = \"totalprice\" # new column name for values\n)"},{"path":"tidy.html","id":"long-to-wide","chapter":"1 Data Tidying","heading":"1.4.0.2 Long to wide","text":"can also go long wide format using pivot_wider() function.names_from: columns contain new column headers.values_from: column contains values new columns.names_sep:character string used join names names_from one column.\nTable 1.5: Data made wider pivot_wider()\n","code":"\nuntidy_price_wide <- pivot_wider(\n  data = untidy_price_long,\n  names_from = year,\n  values_from = totalprice\n)"},{"path":"tidy.html","id":"multistep","chapter":"1 Data Tidying","heading":"1.5 Multi-step tidying","text":"often need go wide, long, intermediate shape order get data format useful plotting, column variable want represent aesthetic.full untidy_data table seven columns: customer ID, three columns itemsprice 3 columns totalprice.want get tidy format row observation one customer per year, columns customer_id, year, item, price_per_item totalprice. trying reshape dataset, able visualise look like. Sketching tables piece paper can really help make transformations make sense.","code":""},{"path":"tidy.html","id":"one-observation-per-row","chapter":"1 Data Tidying","heading":"1.5.1 One observation per row","text":"original table observations customer three years. many observations per row, first start making table long. need make 6 rows customer, one category (item price/total price) year combination, columns customer ID, year, category, value.combining columns numeric (totalprice) character (itemsprice) data, need make new value column character data type using values_transform, since numbers can represented characters (like \"3.5\"), character strings represented numbers.\nTable 1.6: Untidy data converted wide long.\n","code":"\nlonger_data <- pivot_longer(\n  data = untidy_data, \n  cols = itemsprice_2018:totalprice_2020, # columns to make long \n  names_to = c(\"category\", \"year\"),       # new column names for cols\n  names_sep = \"_\",                        # how to split cols into new columns\n  # names_pattern = \"(.*)_(.*)\", # alternative to names_sep\n  values_to = \"value\", # new column name for values\n  \n  # make sure new columns are the right data type\n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n)"},{"path":"tidy.html","id":"one-variable-per-column","chapter":"1 Data Tidying","heading":"1.5.2 One variable per column","text":"Now value column contains data two different variables. need make table wider, wide . want keep year column make new columns called itemsprice totalprice relevant customer's value variable year.\nTable 1.7: Data converted long intermediate shape.\n","code":"\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)"},{"path":"tidy.html","id":"one-value-per-cell","chapter":"1 Data Tidying","heading":"1.5.3 One value per cell","text":"cells itemsprice column actually contain two different values. need split two columns variables items, price_per_item. can split column parts function tidyr::separate(). space number items brackets, can split along space - charge data stored, ensuring data entered consistently makes much easier.\nTable 1.8: itemsprice column split items price_per_item using separate()\nnew columns different data type old column, set convert = TRUE automatically fix . common columns contain multiple numbers, separated commas semicolons. character types separated, numeric types can mathematical operations like sum .","code":"\nsplit_data <- separate(\n  data = wider_data, \n  col = itemsprice, # the column to split\n  into = c(\"items\", \"price_per_item\"), # the new columns to create\n  sep = \" \", # split col by space\n  remove = TRUE, # whether to remove to old col\n  convert = TRUE # whether to fix the data type of the new columns\n)"},{"path":"tidy.html","id":"altering-data","chapter":"1 Data Tidying","heading":"1.5.4 Altering data","text":"column price_per_item still character column parentheses. ways fix . can use dplyr::mutate() function change column add new one., use stringr::str_replace_all() replace \"(\" \")\" \"\".\nTable 1.9: Mutating data remove parentheses price_per_item.\n","code":"\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", \n    replacement = \"\"\n  )\n)"},{"path":"tidy.html","id":"fixing-data-types","chapter":"1 Data Tidying","heading":"1.5.5 Fixing data types","text":"price_per_item totalprice columns still characters, things like calculate sum totalprice.data clean tidy, can fix column data types one step using readr::type_convert(). good practice finished cleaning data set. automatic type detection work expected, usually means still non-numeric characters column supposed numbers. can also manually set column types way readr::read_csv() (see Chapter ??).","code":"\n# check the data types\nglimpse(mutated_data)## Rows: 15\n## Columns: 5\n## $ customer_id    <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n## $ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2~\n## $ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n## $ price_per_item <chr> \"3.91\", \"4.72\", \"5.59\", \"3.91\", \"4.72\", \"5.59\", \"3.91\",~\n## $ totalprice     <chr> \"7.82\", \"37.76\", \"55.9\", \"3.91\", \"28.32\", \"5.59\", \"15.6~\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE # removes spaces before and after values\n)\n\n# check the data types\nglimpse(tidy_data)## Rows: 15\n## Columns: 5\n## $ customer_id    <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n## $ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2~\n## $ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n## $ price_per_item <dbl> 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3~\n## $ totalprice     <dbl> 7.82, 37.76, 55.90, 3.91, 28.32, 5.59, 15.64, 23.60, 27~"},{"path":"tidy.html","id":"pipes","chapter":"1 Data Tidying","heading":"1.6 Pipes","text":"already introduced pipes Chapter ?? type data processing really start shine can significantly reduce amount code write.recap, pipe takes result previous function sends next function first argument, means need create intermediate objects. code used chapter, process created five objects. can get confusing longer scripts.can give object name keep replacing old data object new one step. keep environment clean, makes debugging code much harder.longer series steps like one , using pipes can eliminate many intermediate objects. also makes easier add intermediate step process without think new table name edit table input next step.can read code like :Read data (read_csv())\nfile: file r path(\"data/untidy_data.csv\")`; \nRead data (read_csv())file: file r path(\"data/untidy_data.csv\")`; thenReshape data longer (pivot_longer())\ncols: take columns itemsprice_2018 totalprice_2020,\nnames_to: create new columns called \"category\" \"year\" cols header names,\nnames_sep: separate column names using \"_\"\nvalues_to: create new column called \"value\" cols values,\nnames_transform = transform year column integers,\nvalues_transform = transform value column characters; \nReshape data longer (pivot_longer())cols: take columns itemsprice_2018 totalprice_2020,names_to: create new columns called \"category\" \"year\" cols header names,names_sep: separate column names using \"_\"values_to: create new column called \"value\" cols values,names_transform = transform year column integers,values_transform = transform value column characters; thenReshape data wider (pivot_wider())\nid_cols: row observation unique customer_id year,\nnames_from: get new column names values category column,\nvalues_from: get new column values values value column; \nReshape data wider (pivot_wider())id_cols: row observation unique customer_id year,names_from: get new column names values category column,values_from: get new column values values value column; thenSplit multiple values column (separate())\ncol: separate column itemsprice,\n: new columns called \"items\" \"price_per_item\",\nsep: separate values \" \",\nremove: remove old column,\nconvert: convert new columns right data types; \nSplit multiple values column (separate())col: separate column itemsprice,: new columns called \"items\" \"price_per_item\",sep: separate values \" \",remove: remove old column,convert: convert new columns right data types; thenChange column (mutate())\nprice_per_item: replace existing column price_per_item result search replace:\nstring: strings modify come price_per_item columns,\npattern: search left right parentheses,\nreplacement: replace \"\"; ,\n\nChange column (mutate())price_per_item: replace existing column price_per_item result search replace:\nstring: strings modify come price_per_item columns,\npattern: search left right parentheses,\nreplacement: replace \"\"; ,\nprice_per_item: replace existing column price_per_item result search replace:string: strings modify come price_per_item columns,pattern: search left right parentheses,replacement: replace \"\"; ,Fix data types (type_convert())\ntrim_ws: remove spaces, tabs, line breaks start end value\nFix data types (type_convert())trim_ws: remove spaces, tabs, line breaks start end valueDon't feel like always need get data wrangling code single pipeline. make intermediate objects whenever need break code getting complicated need debug something.can debug pipe highlighting beginning just pipe want stop . Try highlighting data <- end separate function typing cmd-return. data look like now?","code":"\nuntidy_data <- read_csv(file = \"data/untidy_data.csv\")\n\nlonger_data <- pivot_longer(\n  data = untidy_data,\n  cols = itemsprice_2018:totalprice_2020,\n  names_to = c(\"category\", \"year\"),\n  names_sep = \"_\", \n  values_to = \"value\", \n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n) \n\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)\n\nsplit_data <- separate(\n  data = wider_data,\n  col = itemsprice,\n  into = c(\"items\", \"price_per_item\"),\n  sep = \" \", \n  remove = TRUE, \n  convert = TRUE\n) \n\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", \n    replacement = \"\"\n  )\n) \n\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE\n)\ntidy_data <- read_csv(file = \"data/untidy_data.csv\") %>%\n  pivot_longer(\n    cols = itemsprice_2018:totalprice_2020,\n    names_to = c(\"category\", \"year\"),\n    names_sep = \"_\", \n    values_to = \"value\", \n    names_transform = list(year = as.integer),\n    values_transform = list(value = as.character) \n  ) %>%\n  pivot_wider(\n    id_cols = c(customer_id, year),\n    names_from = category,\n    values_from = value\n  ) %>%\n  separate(\n    col = itemsprice,\n    into = c(\"items\", \"price_per_item\"),\n    sep = \" \", \n    remove = TRUE, \n    convert = TRUE\n  ) %>%\n  mutate(\n    price_per_item = stringr::str_replace_all(\n      string = price_per_item, \n      pattern = \"[()]\", \n      replacement = \"\"\n    )\n  ) %>%\n  type_convert(\n    trim_ws = TRUE\n  )"},{"path":"tidy.html","id":"exercises","chapter":"1 Data Tidying","heading":"1.7 Exercises","text":"try couple examples.Save current Markdown, close , open new named \"Patient survey\".Download copy wide_excercise-1.csv wide_excercise-2.csv store data folder.set-code chunk, load tidyverse load two data files using read_csv() name objects wide1 wide2The two datasets represent simulated data patient satisfaction survey. one time differ complexity.","code":"\nlibrary(tidyverse)\nwide1 <- read_csv(\"data/wide_excercise-1.csv\")## Rows: 50 Columns: 7## -- Column specification --------------------------------------------------------\n## Delimiter: \",\"\n## chr (1): repeat\n## dbl (6): id, q1, q2, q3, q4, q5## \n## i Use `spec()` to retrieve the full column specification for this data.\n## i Specify the column types or set `show_col_types = FALSE` to quiet this message.\nwide2 <- read_csv(\"data/wide_excercise-2.csv\")## Rows: 50 Columns: 12## -- Column specification --------------------------------------------------------\n## Delimiter: \",\"\n## chr  (1): repeat_patient\n## dbl (11): id, q1_sat, q2_sat, q3_sat, q4_sat, q5_sat, q1_rec, q2_rec, q3_rec...## \n## i Use `spec()` to retrieve the full column specification for this data.\n## i Specify the column types or set `show_col_types = FALSE` to quiet this message."},{"path":"tidy.html","id":"survey-1","chapter":"1 Data Tidying","heading":"1.7.1 Survey 1","text":"wide1 data 50 patients asked five questions recent experience health centre. results questionnaire typically reported single overall satisfaction score, calculated taking mean five responses. Additionally, survey also records whether patient attending clinic first time, repeat patient.Use method choice look dataset familiarise structure data.noted, important think tidied data look like. Often, problem data wrangling R actually code, lack understanding data worked .many variables long-form version wide ? many observations long-form version wide1 ? four variables, 4 types data: participant id, whether repeat patient, question asked, response.250 observations rows data participant 5 rows data (one per question) 50 students (50 * 5 = 250).","code":""},{"path":"tidy.html","id":"tidy-1","chapter":"1 Data Tidying","heading":"1.7.2 Tidy 1","text":"Transform wide1 long-form using pivot_longer() store object named tidy1","code":"\ntidy1 <- wide1 %>%\n  pivot_longer(cols = q1:q5,\n               names_to = \"question\", \n               values_to = \"response\")"},{"path":"tidy.html","id":"survey-2","chapter":"1 Data Tidying","heading":"1.7.3 Survey 2","text":"wide2 also data 50 patients, however, now two measures included questionnaire. still five questions relate satisfaction, also five questions relate whether patient recommend medical practice friend. measures typically reported calculating overall mean five items.Use method choice look dataset familiarise structure data.simple first exercise actually two potential ways might tidy data depending want conceptualise two different measurements important recognise many coding problems just one solution.","code":""},{"path":"tidy.html","id":"tidy-2a","chapter":"1 Data Tidying","heading":"1.7.3.1 Tidy 2a","text":"first option, going treat \"satisfaction\" \"recommendation\" measurements two categories variable. fully long-form data set five variables id, repeat_patient, question (question number), category (whether sat rec), response (numerical rating).many observations fully long-form version wide2 ? 500 rows data participant 10 rows - 5 satisfaction questions five recommendation questions.Transform wide2 full long-form using pivot_longer() store object named tidy2a.easy exercise may need look help documentation.data %>% pivot_longer() %>% separate() = c(\"col1\", \"col2\")","code":"\ntidy2a <- wide2 %>%\n  pivot_longer(cols = q1_sat:q5_rec,\n               names_to = \"question\", \n               values_to = \"response\") %>%\n  separate(col = \"question\", into = c(\"question\", \"category\"))"},{"path":"tidy.html","id":"tidy-2b","chapter":"1 Data Tidying","heading":"1.7.3.2 Tidy 2b","text":"second option treat satisfaction recommendation scores two distinct variables. version also five variables fully long-form, 'll slight mix two going call \"semi-long\". variables semi-long version id, repeat, question (question number), sat (response satisfaction question), rec (response recommendation question).many observations semi-long version wide2 ? 250 rows data just like tidy1 participant 5 rows five questions different responses satisfaction recommendation questions different variables.also easy.can reuse code tidy2a just need add extra line makes data slightly wider.data %>% pivot_longer() %>% separate() %>% pivot_wider()","code":"\ntidy2b <- wide2 %>%\n  pivot_longer(cols = q1_sat:q5_rec,\n               names_to = \"question\", \n               values_to = \"response\") %>%\n  separate(col = \"question\", into = c(\"question\", \"category\")) %>%\n  pivot_wider(names_from = \"category\", values_from = \"response\")"},{"path":"tidy.html","id":"analysis-and-visualisation","chapter":"1 Data Tidying","heading":"1.8 Analysis and visualisation","text":"Using group_by() summarise() calculate mean score participant satisfaction recommendation. versions dataset can see structure dataset changes approach need take.Replicate following:Plot 1: Scatterplot showing relationship satisfaction recommendation scores, whether patient repeat patient.geom_jitter()Plot 2: Boxplots showing satisfaction recommends scores new repeat patients separately.Plot 3: Histogram showing distribution responses, across questions categories.","code":"\ntidy2a %>%\n  group_by(id, category) %>%\n  summarise(mean = mean(response))\n\ntidy2b %>%\n  group_by(id) %>%\n  summarise(mean_satisfaction = mean(sat),\n            mean_rec = mean(rec))## `geom_smooth()` using formula 'y ~ x'\nggplot(tidy2b, aes(x = sat, y = rec, colour = repeat_patient)) +\n  geom_jitter() +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Satisfaction score\", y = \"Recommendation score\", title = \"Satisfaction and recommendation scores\") +\n  theme_classic()\nggplot(tidy2a, aes(x = repeat_patient, y = response, fill = repeat_patient)) +\n  geom_boxplot(show.legend = FALSE) +\n  facet_wrap(~category)+\n  theme_bw() +\n  scale_fill_brewer(palette = \"Dark2\")\nggplot(tidy2a, aes(x = response)) +\n  geom_histogram(binwidth = 1, colour = \"black\", fill = \"Grey\") +\n  labs(x = \"Responses across all questions and categories\") +\n  theme_bw()"},{"path":"tidy.html","id":"your-data","chapter":"1 Data Tidying","heading":"1.8.1 Your data","text":"Finally, find wide-form dataset try tidy long-form. get stuck just want check solution, post Teams - just remember careful sharing confidential data dataset.head hurts bit point, rest assured absolutely normal. said start, reshaping tidying data conceptual leap shortcut fact just takes bit time practice different datasets - get eventually!","code":""},{"path":"tidy.html","id":"glossary-tidy","chapter":"1 Data Tidying","heading":"1.9 Glossary","text":"","code":""},{"path":"tidy.html","id":"resources-tidy","chapter":"1 Data Tidying","heading":"1.10 Further resources","text":"Data tidying cheat sheetTidy DataChapter 12: Tidy Data R Data ScienceChapter 18: Pipes R Data Science","code":""}]
