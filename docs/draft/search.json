[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"book provides overview basic skills needed turn raw data informative summaries visualisations presented professional reports presentations. book introduce learners R (R Core Team, 2021), programming language can help automate working data. book cover importing processing data spreadsheets, producing data summaries descriptive statistics tables, creating beautiful informative visualisations, constructing reports presentations automatically update underlying data changes.end book, able use R :clean process datasummarise datainformatively visualise datacreate reusable report templates","code":""},{"path":"index.html","id":"structure-of-the-course","chapter":"Overview","heading":"0.1 Structure of the course","text":"book accompanies 10-week course, covering one chapter per week. chapter introduce new skills concepts using concrete examples. various points, multiple-choice fill---blank questions check understanding. chapter accompanying walk-videos, instructor demonstrates skills covered chapter. chapter also accompanying exercises reinforce learning.","code":""},{"path":"index.html","id":"how-to-learn-data-skills","chapter":"Overview","heading":"0.2 How to learn data skills","text":"Learning data skills kind like gym membership (thanks Phil McAleer analogy). given state---art equipment use instructions use , data skills get stronger unless practice.Data skills require memorise lots code. introduced many different functions, main skill learn efficiently find information need. require getting used structure help files cheat sheets, learning Goggle problem choose helpful solution, learning read error messages.Learning code involves making lot mistakes. mistakes completely essential process, try feel frustrated. Many chapter exercises give broken code fix get experience seeing common errors look like. become experienced coder, might make fewer errors, recover much faster.","code":""},{"path":"viz.html","id":"viz","chapter":"1 Basic Data Visualisation","heading":"1 Basic Data Visualisation","text":"","code":""},{"path":"viz.html","id":"ilo-viz","chapter":"1 Basic Data Visualisation","heading":"1.1 Intended Learning Outcomes","text":"able identify categorical versus continuous dataBe able create plots layers using ggplotBe able choose appropriate plots data","code":""},{"path":"viz.html","id":"set-up","chapter":"1 Basic Data Visualisation","heading":"1.2 Set-up","text":"Create new project work chapter:File > New Project...Name project 03-visualisationSave inside ADS directory., create save new R Markdown document named plots.Rmd, get rid default template text, load packages set-code chunk. packages installed already, get message Error library(x) : package called ‘x’, please refer Chapter ??.recommend making new code chunk different activity, using white space make notes errors make, things find interesting, questions like ask course team.","code":"```{r setup, include=FALSE}\nlibrary(tidyverse) # includes ggplot2\nlibrary(patchwork) # for multi-part plots\nlibrary(ggthemes)  # for plot themes\nlibrary(lubridate) # for manipulating dates```"},{"path":"viz.html","id":"variable-types","chapter":"1 Basic Data Visualisation","heading":"1.3 Variable types","text":"spreadsheet tidy data format, row observation, column variable, information cell value. learn get data format Chapter ??, get started use datasets right format.example, table lists pets owned members psyTeachR team. row observation one pet. 6 variables pet, name, owner, species, birthdate, weight (kg), rating (5-point scale \"evil\" \"good\").Variables can classified continuous (numbers) categorical (labels). plotting data, important know kind variables , can help decide types plots appropriate. variable also data type, numeric (numbers), character (text), logical (TRUE/FALSE values). plots can work data types. Make sure watched mini-lecture types data last week work chapter. Additionally, Appendix ?? details, concept relevant repeatedly.\nFigure 1.1: Data types like categories format cells Excel.\n","code":""},{"path":"viz.html","id":"continuous","chapter":"1 Basic Data Visualisation","heading":"1.3.1 Continuous","text":"Continuous variables properties can measure, like weight. can use continuous variables mathematical operations, like calculating sum total column prices average number social media likes per day. may rounded nearest whole number, make sense measurement halfway .Continuous variables always numeric data type. either integers like 42 doubles like 3.14159.","code":""},{"path":"viz.html","id":"categorical","chapter":"1 Basic Data Visualisation","heading":"1.3.2 Categorical","text":"Categorical variables properties can count, like species pet. Categorical variables can nominal, categories really order, like cats, dogs ferrets (even though ferrets obviously best), ordinal, clear order distance categories something exactly equate, like points Likert rating scale. Even data table uses numbers like 1-7 represent ordinal variables, treat like continuous variables.Categorical data can character data type, also called strings. made putting text inside quotes. text can letters, punctuation, even numbers. example, \"January\" character string, \"1\" put quotes. character data type best variables can lot different values predict ahead time.Categorical data can also factors, specific type integer lets specify category names order. useful making plots display categories order want (otherwise default alphabetical order). factor data type best categories specific number levels.Sometimes people represent categorical variables numbers correspond names, like 0 = \"\" 1 = \"yes\", values clear interpretation. control data recorded, better use character names clarity. learn recode columns Chapter ??.","code":""},{"path":"viz.html","id":"dates-and-times","chapter":"1 Basic Data Visualisation","heading":"1.3.3 Dates and times","text":"Dates times special case variable. can act like categorical continuous variables, special ways plot . Dates times can hard work , lubridate package provides functions help .","code":"\n# the current date\nlubridate::today()## [1] \"2022-02-05\"\n# the current date and time in the GMT timezone\nlubridate::now(tzone = \"GMT\")## [1] \"2022-02-05 19:30:12 GMT\""},{"path":"viz.html","id":"test-your-understanding","chapter":"1 Basic Data Visualisation","heading":"1.3.4 Test your understanding","text":"Coming back pets dataset, type variable column? can use function glimpse() show list column names, data types, first values column - output running glimpse() pets dataset.","code":"\nglimpse(pets)## Rows: 4\n## Columns: 6\n## $ name      <chr> \"Darwin\", \"Oy\", \"Khaleesi\", \"Bernie\"\n## $ owner     <chr> \"Lisa\", \"Lisa\", \"Emily\", \"Phil\"\n## $ species   <fct> ferret, ferret, cat, dog\n## $ birthdate <date> 1998-04-02, NA, 2014-10-01, 2017-06-01\n## $ weight    <dbl> 1.2, 2.9, 4.5, 32.0\n## $ rating    <fct> a little evil, very good, very good, very good"},{"path":"viz.html","id":"building-plots","chapter":"1 Basic Data Visualisation","heading":"1.4 Building plots","text":"multiple approaches data visualisation R; course use popular package ggplot2, part larger tidyverse collection packages. grammar graphics (\"gg\" \"ggplot\") standardised way describe components graphic. ggplot2 uses layered grammar graphics, plots built series layers. may helpful think picture multiple elements sit semi-transparently . good analogy old Disney movies artists create background add moveable elements top background via transparencies.Figure 1.2 displays evolution simple scatterplot using layered approach. First, plot space built (layer 1); variables specified (layer 2); type visualisation (known geom) desired variables specified (layer 3) - case geom_point() called visualise individual data points; second geom added include line best fit (layer 4), axis labels edited readability (layer 5), finally, theme applied change overall appearance plot (layer 6).\nFigure 1.2: Evolution layered plot\nImportantly, layer independent independently customisable. example, size, colour position component can adjusted, one , example, remove first geom (data points) visualise line best fit, simply removing layer draws data points (Figure 1.3). use layers makes easy build complex plots step--step, adapt extend plots existing code.\nFigure 1.3: Final plot scatterplot layer removed.\n","code":""},{"path":"viz.html","id":"plots-loading-data","chapter":"1 Basic Data Visualisation","heading":"1.4.1 Plot Data","text":"build plot , layer layer. First need get data. learn load data different sources Chapter 2, time use method Chapter ?? load online source.load data, read_csv() produce message gives information data imported assumptions made. \"column specification\" tells column named type data R categorised variable . abbreviation \"chr\" character columns, \"dbl\" double columns, \"dttm\" date/time column.data simulated data call centre customer satisfaction survey. first thing need plot data get familiar rows (observations) columns (variables) mean. Sometimes obvious, sometimes requires help data provider. , row represents one call centre.caller_id unique ID calleremployee_id unique ID employee taking callscall_start date time call arrivedwait_time number seconds caller waitcall_time number seconds call lasted employee picked upissue_category whether issue tech, sales, returns, othersatisfaction customer satisfaction rating scale 1 (unsatisfied) 5 (satisfied)Unless specify column types, data importing functions just guess types usually default double columns numbers character columns letters. Use function spec() find column types edit needed.set issue_category factor set order levels. default, R order levels factor alphanumerically, however many cases want need set order. example, data, makes sense category \"\" come end list. update column types, re-import data adjusting read_csv() code set col_types argument new column types.Note read_csv() going use object survey_col_types, must create survey_col_types run adjusted read_csv() code. ever need adjust code, try think order code run start scratch make sure organised appropriately.","code":"\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v1/data/survey_data.csv\")## Rows: 707 Columns: 7## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (3): caller_id, employee_id, issue_category\n## dbl  (3): wait_time, call_time, satisfaction\n## dttm (1): call_start## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nspec(survey_data)## cols(\n##   caller_id = col_character(),\n##   employee_id = col_character(),\n##   call_start = col_datetime(format = \"\"),\n##   wait_time = col_double(),\n##   call_time = col_double(),\n##   issue_category = col_character(),\n##   satisfaction = col_double()\n## )\n# updated column types\nsurvey_col_types <- cols(\n  caller_id = col_character(),\n  employee_id = col_character(),\n  call_start = col_datetime(format = \"\"),\n  wait_time = col_double(),\n  call_time = col_double(),\n  issue_category = col_factor(levels = c(\"tech\", \"sales\", \"returns\", \"other\")),\n  satisfaction = col_integer()\n)\n\n# re-import data with correct column  types\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v1/data/survey_data.csv\",\n                        col_types = survey_col_types)"},{"path":"viz.html","id":"plot-setup","chapter":"1 Basic Data Visualisation","heading":"1.4.2 Plot setup","text":"","code":""},{"path":"viz.html","id":"default-theme","chapter":"1 Basic Data Visualisation","heading":"1.4.2.1 Default theme","text":"Plots book use black--white theme, default grey theme, set default theme plots look like examples . top script, setup chunk loaded tidyverse package, add following code run . learn ways customise theme Section 1.4.3.4 Appendix ??.","code":"\ntheme_set(theme_bw()) # set the default theme"},{"path":"viz.html","id":"plot-setup-data","chapter":"1 Basic Data Visualisation","heading":"1.4.2.2 Data","text":"Every plot starts ggplot() function data table. data loaded typo code, give error message. best check plot step, can figure errors easily.\nFigure 1.4: blank ggplot.\n","code":"\nggplot(data = survey_data)"},{"path":"viz.html","id":"mapping","chapter":"1 Basic Data Visualisation","heading":"1.4.2.3 Mapping","text":"next argument ggplot() mapping. tells plot columns data represented , \"mapped\" , different aspects plot, x-axis, y-axis, line colour, object fill, line style. aspects, \"aesthetics\", listing inside aes() function.Set arguments x y names columns want plotted axes. , want plot wait time x-axis call time y-axis.\nFigure 1.5: blank plot x- y- axes mapped.\nexample , wrote names arguments data mapping, practice, almost everyone omits . Just make sure put data mapping right order.","code":"\n# set up the plot with mapping\nggplot(\n  data = survey_data, \n  mapping = aes(x = wait_time, y = call_time)\n)\nggplot(survey_data,  aes(x = wait_time, y = call_time))"},{"path":"viz.html","id":"geoms","chapter":"1 Basic Data Visualisation","heading":"1.4.2.4 Geoms","text":"Now can add plot elements layers. referred geoms functions start geom_. add layers onto base plot created ggplot() plus (+).\nFigure 1.6: Adding scatterplot geom_point().\nSomewhat annoyingly, plus end previous line, start next line. make mistake, run first line code produce base layer get following error message rather adding geom_point().","code":"\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() # scatterplot\nggplot(survey_data, aes(x = wait_time, y = call_time))\n+ geom_point() # scatterplot## Error: Cannot use `+.gg()` with a single argument. Did you accidentally put + on a new line?"},{"path":"viz.html","id":"multiple-geoms","chapter":"1 Basic Data Visualisation","heading":"1.4.2.5 Multiple geoms","text":"Part power ggplot2 can add one geom plot adding extra layers quickly becomes possible make complex informative visualisation. Importantly, layers display order set . code uses geoms produce scatterplot line best fit orders differently.\nFigure 1.7: Points first versus line first.\n","code":"\n# Points first\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() + # scatterplot\n  geom_smooth(method = lm) # line of best fit\n\n# Line first\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_smooth(method = lm) + # line of best fit\n  geom_point() # scatterplot"},{"path":"viz.html","id":"saving-plots","chapter":"1 Basic Data Visualisation","heading":"1.4.2.6 Saving plots","text":"Just like can save numbers data tables objects, can also save output ggplot(). code produces plots created saves objects named point_first line_first. run code, plots display like done . Instead, see object names appear environment pane.view plots, call objects name. output plot separately.","code":"\npoint_first <- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point() + # scatterplot\n  geom_smooth(method = lm) # line of best fit\n  \nline_first <-\n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_smooth(method = lm) + # line of best fit\n  geom_point() # scatterplot\npoint_first # view first plot\nline_first # view second plot"},{"path":"viz.html","id":"combining-plots","chapter":"1 Basic Data Visualisation","heading":"1.4.2.7 Combining plots","text":"One reasons save plots objects can combine multiple plots using functions patchwork package. code produces plot combining two plots + specifying want plots produced single row nrow argument plot_layout().\nFigure 1.8: Combining plots patchwork.\n","code":"\n# add plots together in 1 row; try changing nrow to 2\npoint_first + line_first + plot_layout(nrow = 1)"},{"path":"viz.html","id":"customising-plots","chapter":"1 Basic Data Visualisation","heading":"1.4.3 Customising plots","text":"","code":""},{"path":"viz.html","id":"styling-geoms","chapter":"1 Basic Data Visualisation","heading":"1.4.3.1 Styling geoms","text":"definitely put line front points, points still bit dark. want change overall style geom, can set arguments colour, alpha, shape, size linetype inside geom function. many different values can set ; Appendix ?? gives details . Play around different values figure default values shape size.\nFigure 1.9: Changing geom styles.\nmethod changing style shapes made geom. want, example, points different colours depending issue category , set argument colour = issue_category inside aes() function mapping. can customise colours used scale_ functions, learn Chapter ??.","code":"\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2, # 20% transparency\n             shape = 18,  # solid diamond\n             size = 2) + \n  geom_smooth(method = lm, \n              formula = y~x, # formula used to draw line, \n              # setting the default formula avoids an annoying message\n              colour = rgb(0, .5, .8),\n              linetype = 3) "},{"path":"viz.html","id":"format-axes","chapter":"1 Basic Data Visualisation","heading":"1.4.3.2 Format axes","text":"Now need make axes look neater. several functions can use change axis labels, powerful ones scale_ functions. need use scale function matches data plotting axis becomes particularly important know type data working . axes continuous, use scale_x_continuous() scale_y_continuous().name argument changes axis label. breaks argument sets major units needs vector possible values, can extend beyond range data (e.g., wait time goes 350, can specify breaks 600 make maths easier). seq() function creates sequence numbers one another specified steps.\nFigure 1.10: Formatting plot axes scale_ functions.\nCheck help ?scale_x_continuous see set minor units specify many breaks want instead.","code":"\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30))"},{"path":"viz.html","id":"axis-limits","chapter":"1 Basic Data Visualisation","heading":"1.4.3.3 Axis limits","text":"want change minimum maximum values axis, use coord_cartesian() function. Many plots make sense minimum maximum values represent range possible values, even values present data. , wait call times less 0 seconds, set minimum values 0 maximum values first break highest value.\nFigure 1.11: Changing axis limits.\ncan also set limits argument inside scale_ functions, actually removes data falls outside limits, rather cropping plot, can change appearance certain types plots like violin plots density plots.","code":"\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180))"},{"path":"viz.html","id":"themes","chapter":"1 Basic Data Visualisation","heading":"1.4.3.4 Themes","text":"ggplot2 comes several built-themes, theme_minimal() theme_bw(), ggthemes package provides even themes match different software, GoogleDocs Stata, publications, Economist Wall Street Journal. add GoogleDocs theme, change font size 20 base_size argument.also worth highlighting code starting look quite complicated number layers, built slowly (hopefully!) make sense. see examples ggplot2 code online like adapt, build plot layer layer make easier understand layer adds.\nFigure 1.12: Changing theme.\n","code":"\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = seq(from = 0, to = 600, by = 60)) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = seq(from = 0, to = 600, by = 30)) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  ggthemes::theme_gdocs(base_size = 20)"},{"path":"viz.html","id":"theme-tweaks","chapter":"1 Basic Data Visualisation","heading":"1.4.3.5 Theme tweaks","text":"still quite happy theme, can customise even themes() function. Check help function see possible options. common thing want remove element entirely. setting relevant argument element_blank(). , getting rid x-axis line plot background, removes line around plot.\nFigure 1.13: Customising theme.\n","code":"\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = x_breaks) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = y_breaks) +\n  coord_cartesian(xlim = c(0, 360), \n                  ylim = c(0, 180)) +\n  theme_gdocs(base_size = 11) +\n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank())"},{"path":"viz.html","id":"appropriate-plots","chapter":"1 Basic Data Visualisation","heading":"1.5 Appropriate plots","text":"Now know build plot layers customise appearance, ready learn plot types. Different types data require different types plots, section organised data type.ggplot2 cheat sheet great resource help find plots appropriate data, based many variables plotting type . examples use customer satisfaction data, plot communicates something different.expect memorise plot types methods customising , helpful try code examples , changing values test understanding.","code":""},{"path":"viz.html","id":"counting-categories","chapter":"1 Basic Data Visualisation","heading":"1.5.1 Counting categories","text":"","code":""},{"path":"viz.html","id":"bar-plot","chapter":"1 Basic Data Visualisation","heading":"1.5.1.1 Bar plot","text":"want count number things per category, can use geom_bar(). need provide x mapping geom_bar() default geom_bar() uses number observations group x value y, need tell put y-axis.probably want customise things, like colours, order columns, labels. Inspect code try running layer layer figure things change. functions scale_fill_manual() scale_x_discrete() new, work way scale_ functions. learn Chapter ??.","code":"\nggplot(survey_data, aes(x = issue_category)) +\n  geom_bar()\nggplot(survey_data, aes(x = issue_category, \n                        fill = issue_category)) +\n  geom_bar() +\n  scale_x_discrete(\n    # change axis title\n    name = \"Issue Category\", \n    # change order\n    limits = c(\"tech\", \"returns\", \"sales\", \"other\"), \n    # change labels\n    labels = c(\"Technical\", \"Returns\", \"Sales\", \"Other\") \n  ) +\n  scale_fill_manual(\n    # change colours\n    values = c(tech = \"goldenrod\", \n                returns = \"darkgreen\", \n                sales = \"dodgerblue3\", \n                other = \"purple3\"),\n    # remove the legend\n    guide = \"none\" \n  ) +\n  scale_y_continuous(\n    name = \"\", # remove axis title\n    # remove the space above and below the y-axis\n    expand = expansion(add = 0)\n  ) +\n  # minimum = 0, maximum = 350\n  coord_cartesian(ylim = c(0, 350)) + \n  ggtitle(\"Number of issues per category\") # add a title"},{"path":"viz.html","id":"column-plot","chapter":"1 Basic Data Visualisation","heading":"1.5.1.2 Column plot","text":"data already column number want plot, can use geom_col() plot . can use count() function make table row issue_category column called n number observations category.mapping geom_col() requires set x y aesthetics. Set y = n want plot number issues category, information column called n.","code":"\ncount_data <- count(x = survey_data, issue_category)\nggplot(count_data, aes(x = issue_category, y = n)) +\n  geom_col()"},{"path":"viz.html","id":"pie-chart","chapter":"1 Basic Data Visualisation","heading":"1.5.1.3 Pie chart","text":"Pie charts misleading form data visualisation, cover . cover options visualising proportions, like waffle, lollipop treemap plots, Chapter ??.","code":""},{"path":"viz.html","id":"test-your-understanding-1","chapter":"1 Basic Data Visualisation","heading":"1.5.1.4 Test your understanding","text":"small data table.geom use plot population 5 countries? geom_bargeom_colWhat mapping use?\n\naes(x = country, y = population)aes(x = population, y = country)aes(x = country)aes(x = island)aes(y = population)\ngeom use plot number countries island? geom_bargeom_colWhat mapping use?\n\naes(x = country, y = population)aes(x = population, y = country)aes(x = country)aes(x = island)aes(y = population)\n","code":""},{"path":"viz.html","id":"one-continuous-variable","chapter":"1 Basic Data Visualisation","heading":"1.5.2 One continuous variable","text":"continuous variable, like number seconds callers wait, can use geom_histogram() geom_density() show distribution. Just like geom_bar() required specify x variable.","code":""},{"path":"viz.html","id":"histogram","chapter":"1 Basic Data Visualisation","heading":"1.5.2.1 Histogram","text":"histogram splits data \"bins\" along x-axis shows count many observations bin along y-axis.\nFigure 1.14: Histogram wait times.\nalways set binwidth number bins something meaningful data (otherwise get annoying message). might need try options find something looks good conveys meaning plot -- try changing values binwidth bins see works best.default, bars start centered 0, binwidth set 15, first bar include -7.5 7.5 seconds, make much sense. can set boundary = 0 bar represents increments 15 seconds starting 0.Finally, default style grey bars ugly, can change setting fill colour, well using scale_x_continuous() update axis labels.\nFigure 1.15: Histogram custom styles.\n","code":"\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram()## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n# adjust width of each bar\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 15)\n\n# adjust number of bars\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(bins = 5)\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 15, boundary = 0)\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(binwidth = 15, \n                 boundary = 0, \n                 fill = \"white\", \n                 color = \"black\") +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60))"},{"path":"viz.html","id":"frequency-plot","chapter":"1 Basic Data Visualisation","heading":"1.5.2.2 Frequency plot","text":"Rather plotting bin bar, can connect line across top bin using frequency plot. function geom_freqpoly() works geom_histogram(), except take fill argument just line.","code":"\nggplot(survey_data, aes(x = wait_time)) +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60)) +\n  geom_freqpoly(boundary = 0, binwidth = 15, \n                color = \"black\")"},{"path":"viz.html","id":"density-plot","chapter":"1 Basic Data Visualisation","heading":"1.5.2.3 Density plot","text":"distribution smooth, density plot often better way show distribution. density plot need binwidth boundary arguments split data bins, can fill.","code":"\nggplot(survey_data, aes(x = wait_time)) +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60)) +\n  geom_density(fill = \"purple\", color = \"black\")"},{"path":"viz.html","id":"test-your-understanding-2","chapter":"1 Basic Data Visualisation","heading":"1.5.2.4 Test your understanding","text":"Imagine table population country world columns country population. just look 76 countries populations less million.kind plot ? geom_histogramgeom_freqpolygeom_densityWhat kind plot B? geom_histogramgeom_freqpolygeom_densityWhat kind plot C? geom_histogramgeom_freqpolygeom_densityHow set mapping plots?\n\naes(x = country, y = population)aes(x = population, y = country)aes(x = population)aes(x = population, y = count)\nbinwidth histogram? 1100100K1M","code":""},{"path":"viz.html","id":"grouped-continuous-variables","chapter":"1 Basic Data Visualisation","heading":"1.5.3 Grouped continuous variables","text":"several ways compare continuous data across groups. choose depends point trying make plot.","code":""},{"path":"viz.html","id":"subdividing-distributions","chapter":"1 Basic Data Visualisation","heading":"1.5.3.1 Subdividing distributions","text":"previous plots, used fill purely visual reasons, e.g., changed colour histogram bars make look nicer. However, can also use fill represent another variable colours become meaningful.Setting fill aesthetic mapping produce different coloured bars category fill variable, case issue_category.\nFigure 1.16: Histogram categories represented fill.\nset aspect represent data, inside aes() function mapping, argument geom. try set geom, get following error (unless coincidentally object named issue_category colour word).default, categories positioned stacked top . function geom_area() gives similar effect stat = \"bin\".\nFigure 1.17: Stacked area plot.\n","code":"\nggplot(survey_data, aes(x = wait_time, fill = issue_category)) +\n  geom_histogram(boundary = 0, \n                 binwidth = 15,\n                 color = \"black\")\nggplot(survey_data, aes(x = wait_time)) +\n  geom_histogram(boundary = 0, \n                 binwidth = 15, \n                 color = \"black\",\n                 fill = issue_category)## Error in layer(data = data, mapping = mapping, stat = stat, geom = GeomBar, : object 'issue_category' not found\n# area plot\nggplot(survey_data, mapping = aes(x = wait_time, fill = issue_category)) +\n  geom_area(stat = \"bin\", \n            boundary = 0, \n            binwidth = 15, \n            color = \"black\")"},{"path":"viz.html","id":"comparing-distributions","chapter":"1 Basic Data Visualisation","heading":"1.5.3.2 Comparing distributions","text":"want compare one distribution, can set position argument geom_histogram() \"dodge\" put bars group next instead stacking . However, can look confusing several categories. Instead, usegeom_freqpoly() plot line connecting top bin.\nFigure 1.18: Different ways plot distribution continuous variable multiple groups.\n","code":"\n# dodged histogram\nhistogram_dodge <- \n  ggplot(survey_data, aes(x = wait_time, \n                          fill = issue_category,\n                          colour = issue_category))+\n  geom_histogram(boundary = 0, \n                 binwidth = 15, \n                 position = \"dodge\") +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60)) +\n  ggtitle(\"Dodged Histogram\")\n\n# frequency plot\nfreqpoly_plot <- \n  ggplot(survey_data, aes(x = wait_time,\n                          fill = issue_category,\n                          colour = issue_category)) +\n  geom_freqpoly(binwidth = 15, \n                boundary = 0,\n                size = 1) +\n  scale_x_continuous(name = \"Wait time (seconds)\",\n                     breaks = seq(0, 600, 60)) +\n  ggtitle(\"Frequency\")\n\n# put plots together\nhistogram_dodge + freqpoly_plot + \n  plot_layout(nrow = 1, guides = \"collect\") # collects the legends together, try removing this"},{"path":"viz.html","id":"violin-plot","chapter":"1 Basic Data Visualisation","heading":"1.5.3.3 Violin plot","text":"Another way compare groups continuous variables violin plot. like density plot, rotated 90 degrees mirrored - fatter violin, larger proportion data points value.\nFigure 1.19: default violin plot gives shape area. Set scale='count' make size proportional number observations.\n","code":"\nviolin_area <- \n  ggplot(survey_data, aes(x = issue_category, y = wait_time)) +\n  geom_violin() +\n  ggtitle('scale = \"area\"')\n\nviolin_count <- \n  ggplot(survey_data, aes(x = issue_category, y = wait_time)) +\n  geom_violin(scale = \"count\") +\n  ggtitle('scale = \"count\"')\n\nviolin_area + violin_count"},{"path":"viz.html","id":"boxplot","chapter":"1 Basic Data Visualisation","heading":"1.5.3.4 Boxplot","text":"Boxplots serve similar purpose violin plots (without giggles back row). show shape distribution, rather statistics . middle line represents median; half data line half . box encloses 25th 75th percentiles data, 50% data falls inside box. \"whiskers\" extending box extend 1.5 times height box, although can change coef argument. points show outliers -- individual data points fall outside range.\nFigure 1.20: Basic boxplot.\n","code":"\nggplot(survey_data, aes(x = issue_category, y = wait_time)) +\n geom_boxplot()"},{"path":"viz.html","id":"combo-plots","chapter":"1 Basic Data Visualisation","heading":"1.5.3.5 Combo plots","text":"Violin plots frequently layered geoms represent mean median values data. lot code, help understanding ) run layer layer see builds b) change values throughout code\nFigure 1.21: Violin plots combined different methods represent means medians.\ncommon type plot produce bar chart means, however, example demonstrates just misleading . communicates mean value category, bars hide distribution actual data. tell wait times close 3 minutes, spread 0 6 minutes, vast majority less 2 minutes, mean pulled high outliers.\nFigure 1.22: plot continuous data column plots. appropriate count data.\nColumn plots can also misleading. plot left starts y-axis 0, makes bar heights proportional, showing almost difference average wait times. Since differences hard see, may tempted start y-axis higher, makes look like average wait time returns double tech.","code":"\n# add fill and colour to the mapping\n\nggplot(survey_data,  aes(x = issue_category, \n                         y = wait_time,\n                         fill = issue_category,\n                         colour = issue_category)) +\n  scale_x_discrete(name = \"Issue Category\") +\n  scale_y_continuous(name = \"Wait Time (seconds)\",\n                     breaks = seq(0, 600, 60)) +\n  coord_cartesian(ylim = c(0, 360)) +\n  guides(fill = \"none\", colour = \"none\") + \n  # add a line at median (50%) score\n  geom_violin(alpha = 0.4, \n              draw_quantiles = 0.5) + \n  # add a boxplot\n  geom_boxplot(width = 0.25, \n               fill = \"white\", \n               alpha = 0.75, \n               outlier.alpha = 0) + \n  # add a point that represents the mean\n  stat_summary(fun = mean, \n               geom = \"point\", \n               size = 2) + \n  ggtitle(\"ViolinBox\")"},{"path":"viz.html","id":"test-your-understanding-3","chapter":"1 Basic Data Visualisation","heading":"1.5.3.6 Test your understanding","text":"create plot ? geom_box()geom_boxplot()geom_violin()geom_violinplot()create plot B? geom_box()geom_boxplot()geom_violin()geom_violinplot()mapping look like plots?\n\naes(x = employee_id, y = call_time, fill = employee_id)aes(x = employee_id, y = call_time, colour = call_time)aes(x = employee_id, y = call_time, colour = employee_id)aes(x = employee_id, y = call_time, fill = call_time)\nemployee tends longest calls? e01e02e03e04e05e06e07e08e09e10Which employee record longest call? e01e02e03e04e05e06e07e08e09e10","code":""},{"path":"viz.html","id":"two-continuous-variables","chapter":"1 Basic Data Visualisation","heading":"1.5.4 Two continuous variables","text":"want see two continuous variables related, set one x-axis y-axis. Usually, one variable causes , plot cause x-axis effect y-axis. , want see longer wait times cause calls longer.","code":""},{"path":"viz.html","id":"scatterplot","chapter":"1 Basic Data Visualisation","heading":"1.5.4.1 Scatterplot","text":"function create scatterplot called geom_point().\nFigure 1.23: Scatterplot geom_point().\n","code":"\nggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point()"},{"path":"viz.html","id":"trendlines","chapter":"1 Basic Data Visualisation","heading":"1.5.4.2 Trendlines","text":"Figure 1.2, emphasised relationship wait time call time trendline created geom_smooth() using argument method = lm (\"lm\" stands \"linear model\" straight line relationship). can also set method = loess visualise non-linear relationship.\nFigure 1.24: Different ways show relationship two continuous variables.\nmuch data extremes x-axis, curve can uncertain. represented wider shaded area, means true relationship might anywhere within area. Add argument se = FALSE geom_smooth() remove \"standard error\" shading.","code":"\nlm_plot <- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = lm, formula = y~x) +\n  ggtitle(\"method = lm\")\n\nloess_plot <- \n  ggplot(survey_data, aes(x = wait_time, y = call_time)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = loess, formula = y~x) +\n  ggtitle(\"method = loess\")\n\nlm_plot + loess_plot"},{"path":"viz.html","id":"dates","chapter":"1 Basic Data Visualisation","heading":"1.5.4.3 Dates","text":"call_start column contains date time, use date() function lubridate convert just date. need format able transform x-axis .can use scale_x_date() set date_breaks \"1 month\" apart. date_labels argument uses code different date formats; can see full list possibilities help ?strptime. example, %b means \"Abbreviated month name\", whilst wanted use format like \"2020/01/31\" try \"%Y/%m/%d\".looks like customer satisfaction declined across year, change meaningful? See plot looks like y-axis spans full range possible satisfaction values 1 5. can also plot individual data points emphasise range values.","code":"\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) + \n  geom_smooth(method = lm, formula = y~x)\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) +\n  geom_smooth(method = lm, formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Caller Satisfaction\") +\n  ggtitle(\"2020 Caller Satisfaction\")\nggplot(survey_data, aes(x = lubridate::date(call_start), \n                        y = satisfaction)) +\n  # show individual data, jitter the height to avoid overlap\n  geom_jitter(width = 0, height = .1, alpha = 0.2) + \n  geom_smooth(method = lm,  formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Caller Satisfaction\",\n                     breaks = 1:5) +\n  coord_cartesian(ylim = c(1, 5)) + # changes limits\n  ggtitle(\"2020 Caller Satisfaction\")"},{"path":"viz.html","id":"ordinal-variables","chapter":"1 Basic Data Visualisation","heading":"1.5.5 Ordinal variables","text":"limited range numeric values, ordinal rating scale, sometimes overlapping data makes difficult see going point plot. example, plot shows satisfaction ratings call time ratings 1, 2, 3, 4 5, makes hard see exactly many data points point.section, explore options dealing .\nFigure 1.25: Overlapping data.\n","code":"\nggplot(survey_data, aes(x = call_time, y = satisfaction)) + \n  geom_point()"},{"path":"viz.html","id":"jitter-plot","chapter":"1 Basic Data Visualisation","heading":"1.5.5.1 Jitter plot","text":"can use geom_jitter() move points around bit make easier see. can also set alpha transparency. , x-axis continuous, need jitter width, y-axis ordinal categories, height jittered -0.2 +0.2 away true y-value. can help play around values understand jitter .\nFigure 1.26: Jitter plot.\n","code":"\nggplot(survey_data, aes(x = call_time, y = satisfaction)) +\n  geom_jitter(width = 0, height = .2, alpha = 0.5)"},{"path":"viz.html","id":"facets","chapter":"1 Basic Data Visualisation","heading":"1.5.5.2 Facets","text":"Alternatively, can use facet_wrap() create separate plot level satisfaction. facet_wrap() uses tilde (~) symbol, can roughly translate \"\", e.g., facet plot satisfaction rating. labeller function controls labels plot. label_both specifies want variable name (satisfaction) value (e.g., 1) printed plot make easier read.\nFigure 1.27: histogram facets.\n, means, plot types can make R. chapter just gave basic overview, go detail Chapter ??. resources section end chapter lists many resources, R Graph Gallery especially useful one get inspiration kinds beautiful plots can make R.","code":"\nggplot(survey_data, aes(x = call_time)) +\n  geom_histogram(binwidth = 10, \n                 boundary = 0, \n                 fill = \"dodgerblue\", \n                 color = \"black\") +\n  facet_wrap(~satisfaction, \n             ncol = 1, # try changing this to 2 \n             labeller = label_both) +\n  scale_x_continuous(name = \"Call Time (seconds)\",\n                     breaks = seq(0, 600, 30))"},{"path":"viz.html","id":"exercises","chapter":"1 Basic Data Visualisation","heading":"1.6 Exercises","text":"final step chapter, create report data visualisations. may need refer back Chapter ?? help complete exercises may also want take break work section. also recommend knit every step can see output changes.","code":""},{"path":"viz.html","id":"exercises-new-rmd-3","chapter":"1 Basic Data Visualisation","heading":"1.6.1 New Markdown","text":"Create save new R Markdown document named plots_report.Rmd give title \"Customer satisfaction report\". Remove default template text load packages code set-code chunk:","code":"\nlibrary(tidyverse) \nlibrary(patchwork) \nlibrary(ggthemes)  \nlibrary(lubridate) \nlibrary(knitr)\nlibrary(kableExtra)\n\nsurvey_data <- read_csv(\"https://psyteachr.github.io/ads-v1/data/survey_data.csv\")"},{"path":"viz.html","id":"exercises-summary","chapter":"1 Basic Data Visualisation","heading":"1.6.2 Summary","text":"Create level 1 heading titled \"Overview\". Underneath heading, write short summary data set contains variables means (can use information Section 1.4.1 like).","code":""},{"path":"viz.html","id":"presenting-plots","chapter":"1 Basic Data Visualisation","heading":"1.6.3 Presenting plots","text":"Pick two favourites plots examples made chapter. plot:Create level 2 heading R Markdown document give informative title.Write short summary interprets data shown plots - enough just present visualisations, effective reports also help reader understand conclusions draw plots presented.Look different themes available ggtheme choose one apply plots.Make sure plot figure caption (either adding ggplot() code adding code chunk options).Organise Markdown plots shown text summary.","code":""},{"path":"viz.html","id":"combining-plots-1","chapter":"1 Basic Data Visualisation","heading":"1.6.4 Combining plots","text":"Now, pick two least favourite plots:Adjust visual aesthetics make look bad difficult read possible.Combine plots using patchwork functions.Write short summary explains think plots bad.Organise Markdown plots shown text summary.","code":""},{"path":"viz.html","id":"editing-your-markdown-display","chapter":"1 Basic Data Visualisation","heading":"1.6.5 Editing your Markdown display","text":"Adjust set-Markdown knitted report show code, messages, warnings, figures 8 x 5 (see Chapter ??).","code":""},{"path":"viz.html","id":"change-the-output","chapter":"1 Basic Data Visualisation","heading":"1.6.6 Change the output","text":"far just knitted html. generate PDF reports, need install tinytex (Xie, 2021) run following code console (add Rmd file):done , update YAML heading include following:knit PDF document. likely encounter errors - knitting pdf really seventh circle hell. happens, ask Teams help.alternative, can also knit Word document.","code":"\n# run this in the console\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()---\ntitle: \"Customer Satisfaction Report\"\nauthor: \"Your name\"\noutput:\n  pdf_document:\n------\ntitle: \"Customer Satisfaction Report\"\nauthor: \"Your name\"\noutput:\n  word_document:\n---"},{"path":"viz.html","id":"share-your-work","chapter":"1 Basic Data Visualisation","heading":"1.6.7 Share your work","text":"completed activity, post Week 3 channel Teams can compare plots chose visual style learners course.","code":""},{"path":"viz.html","id":"glossary-viz","chapter":"1 Basic Data Visualisation","heading":"1.7 Glossary","text":"","code":""},{"path":"viz.html","id":"resources-viz","chapter":"1 Basic Data Visualisation","heading":"1.8 Further Resources","text":"Data visualisation using R, researchers use R (Nordmann et al., 2021)Chapter 3: Data Visualisation R Data Scienceggplot2 cheat sheetggplot2 FAQsggplot2 documentationHack Data Beautiful workshop University Glasgow postgraduate studentsChapter 28: Graphics communication R Data Science","code":""},{"path":"data.html","id":"data","chapter":"2 Data Import","heading":"2 Data Import","text":"","code":""},{"path":"data.html","id":"ilo-data","chapter":"2 Data Import","heading":"2.1 Intended Learning Outcomes","text":"able inspect dataBe able import data range sourcesBe able identify handle common problems data import","code":""},{"path":"data.html","id":"set-up-1","chapter":"2 Data Import","heading":"2.2 Set-up","text":"Create new project work chapter named 04-data. , create save new R Markdown document named data.Rmd, get rid default template text, load packages set-code chunk. packages installed already, get message Error library(x) : package called ‘x’, please refer Chapter ??.recommend making new code chunk different activity, using white space make notes errors make, things find interesting, questions like ask course team.","code":"```{r setup, include=FALSE}\nlibrary(tidyverse)     # includes readr & tibble\nlibrary(rio)           # for almost any data import/export\nlibrary(haven)         # for SPSS, Stata,and SAS files\nlibrary(readxl)        # for Excel files\nlibrary(googlesheets4) # for Google Sheets```"},{"path":"data.html","id":"builtin","chapter":"2 Data Import","heading":"2.3 Built-in data","text":"likely want import data work , however, Base R also comes built-datasets can useful learning new functions packages. Additionally, packages, like tidyr, also contain data. data() function lists datasets available.Type name dataset console see data. example, type ?table1 console see dataset description table1, dataset included tidyr.can also use data() function load dataset global environment.","code":"\n# list datasets built in to base R\ndata()\n\n# lists datasets in a specific package\ndata(package = \"tidyr\")\n?table1\n# loads table1 into the environment\ndata(\"table1\")"},{"path":"data.html","id":"looking-at-data","chapter":"2 Data Import","heading":"2.4 Looking at data","text":"Now loaded data, look upper right hand window RStudio, Environment tab. see object table1 listed, along number observations (rows) variables (columns). first check everything went OK.Always, always, always, look data created loaded table. Also look step transforms table. three main ways look table: View(), print(), tibble::glimpse().","code":""},{"path":"data.html","id":"view","chapter":"2 Data Import","heading":"2.4.1 View()","text":"familiar way look table given View() (uppercase 'V'), opens data table console pane using viewer looks bit like Excel. command can useful console, ever put one script create annoying pop-window user runs . can also click object environment pane open interface. can close tab done looking ; remove object.","code":"\nView(table1)"},{"path":"data.html","id":"print","chapter":"2 Data Import","heading":"2.4.2 print()","text":"print() method can run explicitly, commonly called just typing variable name blank line. default print entire table, just first 10 rows.look table1 table loaded . Depending wide screen , might need click arrow right table see last column.","code":"\n# call print explicitly\nprint(table1)\n\n# more common method of just calling object name\ntable1"},{"path":"data.html","id":"glimpse","chapter":"2 Data Import","heading":"2.4.3 glimpse()","text":"function tibble::glimpse() gives sideways version table. useful table wide easily see columns. also tells data type column angled brackets column name.","code":"\nglimpse(table1)## Rows: 6\n## Columns: 4\n## $ country    <chr> \"Afghanistan\", \"Afghanistan\", \"Brazil\", \"Brazil\", \"China\", …\n## $ year       <int> 1999, 2000, 1999, 2000, 1999, 2000\n## $ cases      <int> 745, 2666, 37737, 80488, 212258, 213766\n## $ population <int> 19987071, 20595360, 172006362, 174504898, 1272915272, 12804…"},{"path":"data.html","id":"summary-function","chapter":"2 Data Import","heading":"2.4.4 summary()","text":"can get quick summary dataset summary() function, can useful spotting things like minimum maximum values clearly wrong, R thinks nominal variable numeric. example, labelled gender 1, 2, 3 rather male, female, non-binary, summary() calculate mean median even though appropriate data. can useful flag need take steps correct data.Note population , large number, R use scientific notation.","code":"\nsummary(table1)##    country               year          cases          population       \n##  Length:6           Min.   :1999   Min.   :   745   Min.   :1.999e+07  \n##  Class :character   1st Qu.:1999   1st Qu.: 11434   1st Qu.:5.845e+07  \n##  Mode  :character   Median :2000   Median : 59112   Median :1.733e+08  \n##                     Mean   :2000   Mean   : 91277   Mean   :4.901e+08  \n##                     3rd Qu.:2000   3rd Qu.:179316   3rd Qu.:9.983e+08  \n##                     Max.   :2000   Max.   :213766   Max.   :1.280e+09"},{"path":"data.html","id":"import_data","chapter":"2 Data Import","heading":"2.5 Importing data","text":"Built-data nice examples, probably interested data. many different types files might work data analysis. different file types usually distinguished three-letter extension following period end file name (e.g., .xls).Download directory data files, unzip folder, save data directory 04-data project directory.","code":""},{"path":"data.html","id":"rioimport","chapter":"2 Data Import","heading":"2.5.1 rio::import()","text":"type data files work likely depend software typically use workflow. rio package straightforward functions reading saving data common formats: rio::import() rio::export().","code":"\ndemo_tsv  <- import(\"data/demo.tsv\")  # tab-separated values\ndemo_csv  <- import(\"data/demo.csv\")  # comma-separated values\ndemo_xls  <- import(\"data/demo.xlsx\") # Excel format\ndemo_sav  <- import(\"data/demo.sav\")  # SPSS format"},{"path":"data.html","id":"file-type-specific-import","chapter":"2 Data Import","heading":"2.5.2 File type specific import","text":"However, also useful know specific functions used import different file types easier discover features deal complicated cases, need skip rows, rename columns, choose Excel sheet use.Look help function read Arguments section see can customise import.keep data Google Sheets, can access directly R using googlesheets4. code imports data public sheet. can set ss argument entire URL target sheet, just section \"https://docs.google.com/spreadsheets/d/\".","code":"\ndemo_tsv <- readr::read_tsv(\"data/demo.tsv\")\ndemo_csv <- readr::read_csv(\"data/demo.csv\")\ndemo_xls <- readxl::read_excel(\"data/demo.xlsx\")\ndemo_sav <- haven::read_sav(\"data/demo.sav\")\ngs4_deauth() # skip authorisation for public data\n\ndemo_gs4  <- googlesheets4::read_sheet(\n  ss = \"16dkq0YL0J7fyAwT1pdgj1bNNrheckAU_2-DKuuM6aGI\"\n)"},{"path":"data.html","id":"col_types","chapter":"2 Data Import","heading":"2.5.3 Column data types","text":"Use glimpse() see different functions imported data slightly different data types. different file types store data slightly differently. example, SPSS stores factors numbers, factor column contains values 1, 2, 3 rather low, med, high. also stores logical values 0 1 instead TRUE FALSE.readr functions display message import data explaining data type column .\"Column specification\" tells data type column . can review data types Appendix ??. Options :chr: characterdbl: doublelgl: logicalint: integerdate: datedttm: date/timeread_csv() guess type data variable normally pretty good . However, makes mistake, reading \"date\" column character, can manually set column data types.First, run spec() dataset give full column specification can copy paste:, create object using code just copied lists correct column types. Factor columns always import character data types, set data type manually col_factor() set order levels levels argument. Otherwise, order defaults order appear dataset. demo dataset, tell R factor variable factor using col_factor() can also specify order levels just appear alphabetically. Additionally, can also specify exactly format date variable using %Y-%m-%d.save column specification object, add col_types argument call read_csv().dates, might need set format dates . See ?strptime list codes used represent different date formats. example, \"%d-%b-%y\" means dates formatted like 31-Jan-21.functions readxl loading .xlsx sheets different, limited way specify column types. convert factor columns dates using mutate(), learn Chapter ??, people let read_excel() guess data types set col_types argument.SPSS data, whilst rio::import() just read numeric values factors labels, function read_sav() haven reads . However, convert factors haven-specific \"labelled double\" factor (idea haven ).way specify column types googlesheets4 little different readr, although can also use shortcodes described help read_sheet() readr functions. currently column specification factors.","code":"\nglimpse(demo_csv)## Rows: 6\n## Columns: 6\n## $ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n## $ factor    <chr> \"high\", \"low\", \"med\", \"high\", \"low\", \"med\"\n## $ integer   <dbl> 1, 2, 3, 4, 5, 6\n## $ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n## $ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n## $ date      <date> 2022-02-05, 2022-02-04, 2022-02-03, 2022-02-02, 2022-02-01, …\nglimpse(demo_xls)## Rows: 6\n## Columns: 6\n## $ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n## $ factor    <chr> \"high\", \"low\", \"med\", \"high\", \"low\", \"med\"\n## $ integer   <dbl> 1, 2, 3, 4, 5, 6\n## $ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n## $ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n## $ date      <dttm> 2022-02-05, 2022-02-04, 2022-02-03, 2022-02-02, 2022-02-01, …\nglimpse(demo_sav)## Rows: 6\n## Columns: 6\n## $ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n## $ factor    <dbl+lbl> 3, 1, 2, 3, 1, 2\n## $ integer   <dbl> 1, 2, 3, 4, 5, 6\n## $ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n## $ logical   <dbl> 1, 1, 0, 0, NA, 1\n## $ date      <date> 2022-02-05, 2022-02-04, 2022-02-03, 2022-02-02, 2022-02-01, …\nglimpse(demo_gs4)## Rows: 6\n## Columns: 6\n## $ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n## $ factor    <chr> \"high\", \"low\", \"med\", \"high\", \"low\", \"med\"\n## $ integer   <dbl> 1, 2, 3, 4, 5, 6\n## $ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n## $ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n## $ date      <dttm> 2021-11-22, 2021-11-21, 2021-11-20, 2021-11-19, 2021-11-18, …\ndemo <- readr::read_csv(\"data/demo.csv\")## Rows: 6 Columns: 6## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr  (2): character, factor\n## dbl  (2): integer, double\n## lgl  (1): logical\n## date (1): date## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nspec(demo)## cols(\n##   character = col_character(),\n##   factor = col_character(),\n##   integer = col_double(),\n##   double = col_double(),\n##   logical = col_logical(),\n##   date = col_date(format = \"\")\n## )\ncorrected_cols <- cols(\n  character = col_character(),\n  factor = col_factor(levels = c(\"low\", \"med\", \"high\")),\n  integer = col_integer(),\n  double = col_double(),\n  logical = col_logical(),\n  date = col_date(format = \"%Y-%m-%d\")\n)\n\ndemo <- readr::read_csv(\"data/demo.csv\", col_types = corrected_cols)\ndemo_sav$factor <- haven::as_factor(demo_sav$factor)\n\nglimpse(demo_sav)## Rows: 6\n## Columns: 6\n## $ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n## $ factor    <fct> high, low, med, high, low, med\n## $ integer   <dbl> 1, 2, 3, 4, 5, 6\n## $ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n## $ logical   <dbl> 1, 1, 0, 0, NA, 1\n## $ date      <date> 2022-02-05, 2022-02-04, 2022-02-03, 2022-02-02, 2022-02-01, …"},{"path":"data.html","id":"creating-data","chapter":"2 Data Import","heading":"2.6 Creating data","text":"need create small data table scratch R, use tibble::tibble() function, type data right . tibble package part tidyverse package loaded start chapter.create small table names three Avatar characters bending type. tibble() function takes arguments names want columns . values vectors list column values order.know value one cells, can enter NA, Sokka bending ability. values column , can just enter one value copied row.can also use tibble::tribble() function create table row, rather column. start listing column names, preceded tilde (~), list values column, row row, separated commas (forget comma end row).line columns tribble, can make easier spot errors.may need often primarily working data import spreadsheets, useful know anyway.","code":"\navatar <- tibble(\n  name = c(\"Katara\", \"Toph\", \"Sokka\"),\n  bends = c(\"water\", \"earth\", NA),\n  friendly = TRUE\n)\n\n# print it\navatar\navatar_by_row <- tribble(\n  ~name,    ~bends,  ~friendly,\n  \"Katara\", \"water\", TRUE,\n  \"Toph\",   \"earth\", TRUE,\n  \"Sokka\",  NA,      TRUE\n)"},{"path":"data.html","id":"writing-data","chapter":"2 Data Import","heading":"2.7 Writing data","text":"data want save, use rio::export(), follows.save data CSV format working directory.Writing Google Sheets little trickier (never use Google Sheets feel free skip section). Even Google Sheet publicly editable, add data without authorising account.can authorise interactively using following code (email), prompt authorise \"Tidyverse API Packages\" first time . tick checkbox authorising \"See, edit, create, delete Google Sheets spreadsheets\", next steps fail.Create new table called family first name, last name, age family members (biological, adopted, chosen).Save CSV file called \"family.csv\".Clear object environment restarting R code remove(family).Load data back view .working tabular data lot class, tabular data made vectors, groups together data basic data type. Appendix ?? explains terminology help understand functions learning process analyse data.","code":"\nexport(avatar, \"data/avatar.csv\")\n# authorise your account \n# this only needs to be done once per script\ngs4_auth(email = \"myemail@gmail.com\")\n\n# create a new sheet\nsheet_id <- gs4_create(name = \"demo-file\", \n                       sheets = \"letters\")\n\n# define the data table to save\nletter_data <- tibble(\n  character = LETTERS[1:5],\n  integer = 1:5,\n  double = c(1.1, 2.2, 3.3, 4.4, 5.5),\n  logical = c(T, F, T, F, T),\n  date = lubridate::today()\n)\n\nwrite_sheet(data = letter_data, \n            ss = sheet_id, \n            sheet = \"letters\")\n\n## append some data\nnew_data <- tibble(\n  character = \"F\",\n  integer = 6L,\n  double = 6.6,\n  logical = FALSE,\n  date = lubridate::today()\n)\nsheet_append(data = new_data,\n             ss = sheet_id,\n             sheet = \"letters\")\n\n# read the data\ndemo <- read_sheet(ss = sheet_id, sheet = \"letters\")\n# create the table\nfamily <- tribble(\n  ~first_name, ~last_name, ~age,\n  \"Lisa\", \"DeBruine\", 45,\n  \"Robbie\", \"Jones\", 14\n)\n\n# save the data to CSV\nexport(family, \"data/family.csv\")\n\n# remove the object from the environment\nremove(family)\n\n# load the data\nfamily <- import(\"data/family.csv\")"},{"path":"data.html","id":"troubleshooting","chapter":"2 Data Import","heading":"2.8 Troubleshooting","text":"import data guesses wrong column type? common reason numeric column non-numbers somewhere. Maybe someone wrote note otherwise numeric column. Columns one data type, characters, whole column converted character strings, numbers like 1.2 get represented \"1.2\", cause weird errors like \"100\" < \"9\" == TRUE. can catch using glimpse() check data.data directory downloaded contains file called \"mess.csv\". try loading dataset.importing goes wrong, often easier fix using specific importing function file type (e.g., use read_csv() rather rio::import(). problems tend specific file format can look help functions easily. CSV files, import function readr::read_csv.get warning parsing issues data table just single column. View file data/mess.csv clicking File pane, choosing \"View File\". first 10 lines. went wrong?First, file starts note: \"messy dataset\" blank line. first line data column headings, want skip first two lines. can argument skip read_csv().OK, little better, table still serious mess several ways:junk column needorder integer columngood logical columngood uses kinds different ways record TRUE FALSE valuesmin_max contains two pieces numeric information, character columndate date columnWe'll learn deal mess Chapters ?? ??, can fix things setting col_types argument read_csv() specify column types two columns guessed wrong skip \"junk\" column. argument col_types takes list name item list column name value table . can use function, like col_double() abbreviation, like \"d\"; consistency earlier chapter use function names. Omitted column names guessed.get message parsing issues run tells run problems() function see table problems. Warnings look scary first, always start reading message.output problems() tells row (3) column (2) error found , kind data expected (integer), actual value (missing). specifically tell read_csv() import column integer, characters (.e., numbers) column produce warning like recorded NA. can manually set missing values recorded na argument.Now order integer variable empty cells contain NA. variable good logical value, 0 F converted FALSE 1 T converted TRUE. variable date date type (adding leading zeros day). learn later chapters fix problems, min_max column containing two different types data.","code":"\nmess <- rio::import(\"data/mess.csv\")## Warning in (function (input = \"\", file = NULL, text = NULL, cmd = NULL, :\n## Stopped early on line 5. Expected 7 fields but found 0. Consider fill=TRUE\n## and comment.char=. First discarded non-empty line: <<junk,missing,0.72,b,1,2 -\n## 3,2020-01-2>>\n# lazy = FALSE loads the data right away so you can see error messages\n# this default changed in late 2021 and might change back soon\nmess <- read_csv(\"data/mess.csv\", lazy = FALSE)## Warning: One or more parsing issues, see `problems()` for details## Rows: 27 Columns: 1## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (1): This is my messy dataset## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.This is my messy dataset\n\njunk,order,score,letter,good,min_max,date\njunk,1,-1,a,1,1 - 2,2020-01-1\n\njunk,missing,0.72,b,1,2 - 3,2020-01-2\n\njunk,3,-0.62,c,FALSE,3 - 4,2020-01-3\n\njunk,4,2.03,d,T,4 - 5,2020-01-4\nmess <- read_csv(\"data/mess.csv\", \n                 skip = 2,\n                 lazy = FALSE)## Rows: 26 Columns: 7## ── Column specification ────────────────────────────────────────────────────────\n## Delimiter: \",\"\n## chr (6): junk, order, letter, good, min_max, date\n## dbl (1): score## \n## ℹ Use `spec()` to retrieve the full column specification for this data.\n## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nglimpse(mess)## Rows: 26\n## Columns: 7\n## $ junk    <chr> \"junk\", \"junk\", \"junk\", \"junk\", \"junk\", \"junk\", \"junk\", \"junk\"…\n## $ order   <chr> \"1\", \"missing\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\",…\n## $ score   <dbl> -1.00, 0.72, -0.62, 2.03, NA, 0.99, 0.03, 0.67, 0.57, 0.90, -1…\n## $ letter  <chr> \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m…\n## $ good    <chr> \"1\", \"1\", \"FALSE\", \"T\", \"1\", \"0\", \"T\", \"TRUE\", \"1\", \"T\", \"F\", …\n## $ min_max <chr> \"1 - 2\", \"2 - 3\", \"3 - 4\", \"4 - 5\", \"5 - 6\", \"6 - 7\", \"7 - 8\",…\n## $ date    <chr> \"2020-01-1\", \"2020-01-2\", \"2020-01-3\", \"2020-01-4\", \"2020-01-5…\n# omitted values are guessed\n# ?col_date for format options\nct <- cols(\n  junk = col_skip(), # skip this column\n  order = col_integer(),\n  good = col_logical(),\n  date = col_date(format = \"%Y-%m-%d\")\n)\n\ntidier <- read_csv(\"data/mess.csv\", \n                   skip = 2,\n                   col_types = ct,\n                   lazy = FALSE)## Warning: One or more parsing issues, see `problems()` for details\nproblems()\ntidiest <- read_csv(\"data/mess.csv\", \n                   skip = 2,\n                   na = \"missing\",\n                   col_types = ct,\n                   lazy = FALSE)"},{"path":"data.html","id":"working-with-real-data","chapter":"2 Data Import","heading":"2.9 Working with real data","text":"worth highlighting point working real data can difficult dataset can messy way. Throughout course show common errors fix , prepared start working data, likely come across problems cover course just part joy learning programming. also get better looking solutions using sites like Stack Overflow fantastic #rstats community Twitter can ask help.may also tempted fix messy datasets , example, opening Excel editing . Whilst might seem easier short term, two serious issues . First, likely work datasets recurring messy problems. taking time solve problems code, can apply solutions large number future datasets efficient long run. Second, edit spreadsheet, record . solving problems code, reproducibly edit original data file. means make error, lost original data can recover.","code":""},{"path":"data.html","id":"exercises-1","chapter":"2 Data Import","heading":"2.10 Exercises","text":"final step chapter, create report using one -built datasets practice skills used far. may need refer back previous chapters help complete exercises may also want take break work section. also recommend knit every step can see output changes.","code":""},{"path":"data.html","id":"exercises-new-rmd-4","chapter":"2 Data Import","heading":"2.10.1 New Markdown","text":"Create save new R Markdown document named starwars_report.Rmd. set-code chunk load packages tidyverse rio.going use built-starwars dataset contains data Star Wars characters. can learn dataset using ?help function.","code":""},{"path":"data.html","id":"exercises-load","chapter":"2 Data Import","heading":"2.10.2 Import and export the dataset","text":"First, load -built dataset environment. Type run code console; save Markdown., export dataset .csv file save data directory. , console.Finally, import version dataset using read_csv() object named starwars - can put code Markdown.","code":"\ndata(starwars)\nexport(starwars, \"data/starwars.csv\")\nstarwars <- read_csv(\"data/starwars.csv\")"},{"path":"data.html","id":"convert-column-types","chapter":"2 Data Import","heading":"2.10.3 Convert column types","text":"Check column specification starwars.Create new column specification lists following columns factors: hair_color, skin_color, eye_color, sex, gender, homeworld, species skips following columns: films, vehicles, starships (columns contain multiple values stored lists, covered work ). set factor orders (although can wish).Re-import dataset, time corrected column types.","code":"\nspec(starwars)\ncorrected_cols <- cols(\n  name = col_character(),\n  height = col_double(),\n  mass = col_double(),\n  hair_color = col_factor(),\n  skin_color = col_factor(),\n  eye_color = col_factor(),\n  birth_year = col_double(),\n  sex = col_factor(),\n  gender = col_factor(),\n  homeworld = col_factor(),\n  species = col_factor(),\n  films = col_skip(),\n  vehicles = col_skip(),\n  starships = col_skip()\n)\n\nstarwars <- read_csv(\"data/starwars.csv\", col_types = corrected_cols)"},{"path":"data.html","id":"exercises-plots","chapter":"2 Data Import","heading":"2.10.4 Plots","text":"Produce following plots one plot choosing. Write brief summary plot shows conclusions might reach data.","code":"\nggplot(starwars, aes(height)) +\n  geom_density(colour = \"black\", alpha = .3) +\n  scale_x_continuous(breaks = seq(from = 50, to = 300, by = 25)) +\n  labs(title = \"Height (cm) distribution of Star Wars Characters\") +\n  theme_classic()\nggplot(starwars, aes(mass)) +\n  geom_histogram(colour = \"black\", binwidth = 10) +\n  scale_x_continuous(breaks = seq(from = 0, to = 2000, by = 100)) +\n  labs(title = \"Weight (kg) distribution of Star Wars Characters\") +\n  theme_classic()\nggplot(starwars, aes(x = gender, fill = gender)) +\n  geom_bar(show.legend = FALSE, colour = \"black\") +\n  scale_x_discrete(name = \"Gender of character\", labels = (c(\"Masculine\", \"Feminine\", \"Missing\"))) +\n  scale_fill_brewer(palette = 2) +\n  labs(title = \"Number of Star Wars characters of each gender\") +\n  theme_bw()"},{"path":"data.html","id":"make-it-look-nice","chapter":"2 Data Import","heading":"2.10.5 Make it look nice","text":"Add least one Star Wars related image online sourceHide code messages knitted outputResize images see fit\nFigure 2.1: Adaptation Star Wars logo created Weweje; original logo Suzy Rice, 1976. CC--3.0\n","code":"```{r, echo = FALSE, out.width = \"50%\", fig.cap=\"Adaptation of Star Wars logo created by Weweje; original logo by Suzy Rice, 1976. CC-BY-3.0\"}\nknitr::include_graphics(\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/ce/Star_wars2.svg/2880px-Star_wars2.svg.png\")```"},{"path":"data.html","id":"share-your-work-1","chapter":"2 Data Import","heading":"2.10.6 Share your work","text":"done, share knitted html file Week 4 Teams channel learners course can see approached task.","code":""},{"path":"data.html","id":"glossary-data","chapter":"2 Data Import","heading":"2.11 Glossary","text":"","code":""},{"path":"data.html","id":"resources-data","chapter":"2 Data Import","heading":"2.12 Further resources","text":"Data import cheatsheetChapter 11: Data Import R Data ScienceMulti-row headers","code":""}]
