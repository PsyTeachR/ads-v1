[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"book provides overview basic skills needed turn raw data informative summaries visualisations presented professional reports presentations. book introduce learners R (R Core Team, 2021), programming language can help automate working data. book cover importing processing data spreadsheets, producing data summaries descriptive statistics tables, creating beautiful informative visualisations, constructing reports presentations automatically update underlying data changes.end book, able use R :clean process datasummarise datainformatively visualise datacreate reusable report templates","code":""},{"path":"index.html","id":"structure-of-the-course","chapter":"Overview","heading":"0.1 Structure of the course","text":"book accompanies 10-week course, covering one chapter per week. chapter introduce new skills concepts using concrete examples. various points, multiple-choice fill---blank questions check understanding. chapter accompanying walk-videos, instructor demonstrates skills covered chapter. chapter also accompanying exercises reinforce learning.","code":""},{"path":"index.html","id":"how-to-learn-data-skills","chapter":"Overview","heading":"0.2 How to learn data skills","text":"Learning data skills kind like gym membership (thanks Phil McAleer analogy). given state---art equipment use instructions use , data skills get stronger unless practice.Data skills require memorise lots code. introduced many different functions, main skill learn efficiently find information need. require getting used structure help files cheat sheets, learning Goggle problem choose helpful solution, learning read error messages.Learning code involves making lot mistakes. mistakes completely essential process, try feel frustrated. Many chapter exercises give broken code fix get experience seeing common errors look like. become experienced coder, might make fewer errors, recover much faster.","code":""},{"path":"spotify-data.html","id":"spotify-data","chapter":"1 Spotify Data","heading":"1 Spotify Data","text":"appendix inspired Michael Mullarkey's tutorial, can follow make beautiful dot plots Spotify data. tutorial require use Spotify; just create developer account can access data API spotifyr.package spotifyr instructions setting developer account Spotify setting \"app\" can get authorisation codes.set app, can copy client ID secret R environment file. easiest way edit_r_environ() usethis. Setting scope \"user\" makes available R project computer, setting \"project\" makes available project.Add following text environment file (delete anything already ), replacing zeros personal ID secret. Save close file restart R.Double check worked typing following console. put script unless mean share confidential info. see values, \"\", worked.Now ready get data Spotify. several types data can download.","code":"\nlibrary(usethis)    # to set system environment variables## Warning: package 'usethis' was built under R version 4.1.2\nlibrary(spotifyr)   # to access Spotify## Warning: package 'spotifyr' was built under R version 4.1.2\nlibrary(tidyverse)  # for data wrangling\nlibrary(DT)         # for interactive tables## Warning: package 'DT' was built under R version 4.1.2\nusethis::edit_r_environ(scope = \"user\")SPOTIFY_CLIENT_ID=\"0000000000000000000000000000\"\nSPOTIFY_CLIENT_SECRET=\"0000000000000000000000000000\"\n# run in the console, don't save in a script\nSys.getenv(\"SPOTIFY_CLIENT_ID\")\nSys.getenv(\"SPOTIFY_CLIENT_SECRET\")"},{"path":"spotify-data.html","id":"by-artist","chapter":"1 Spotify Data","heading":"1.1 By Artist","text":"Choose favourite artist download discography. Set include_groups one \"album\", \"single\", \"appears_on\", \"compilation\".explore data get back. Use glimpse() see columns available type data . looks like row artist's tracks.answer simple questions first.","code":"\ngaga <- get_artist_audio_features(\n  artist = 'Lady Gaga',\n  include_groups = \"album\"\n)"},{"path":"spotify-data.html","id":"tracks-per-album","chapter":"1 Spotify Data","heading":"1.1.1 Tracks per Album","text":"many tracks album? tracks one entry table, first select just album_name track_name columns use distinct() get rid duplicates. count() tracks per album. using DT::datatable() make table interactive. Try sorting table number tracks.Use count() explore columns key_name, mode_name, non-numeric columns.","code":"\ngaga %>%\n  select(album_name, track_name) %>%\n  distinct() %>%\n  count(album_name) %>%\n  datatable(colnames = c(\"Albumn Name\", \"Number of Tracks\"))"},{"path":"spotify-data.html","id":"tempo","chapter":"1 Spotify Data","heading":"1.1.2 Tempo","text":"sort tempo Lady Gaga's music? First, look basic plot get overview.going tracks tempo 0?Looks like dialogue, omit . also check variable tempo multiple instances track. quick way group album track, check standard deviation tempo. 0, means values identical. bigger , values vary. lot data normal distribution (like bell curve), 68% data within one SD mean, 95% within 2 SDs.filter tracks SD greater 0 (variation ), see tracks little variation. However, filter tracks SD greater 1, see songs slightly different tempo, wildly different tempo.can deal way choose. Filter versions songs listen see value agree change others. , deal averaging values track. also remove tiny differences majority duplicate tracks. Now ready plot.Can see made gradient fill histograms? Since x-value bar depends binwidth, use code ..x.. mapping (tempo) make fill correspond bar's value.looks OK, maybe want striking plot. make custom plot style assign gaga_style case want use . add shortcut function, last_plot() avoid retype code last plot created.","code":"\nggplot(gaga, aes(tempo)) +\n  geom_histogram(binwidth = 1)\ngaga %>% \n  filter(tempo == 0) %>%\n  select(album_name, track_name)\ngaga %>%\n  # omit tracks with \"Dialogue\" in the name\n  filter(!str_detect(track_name, \"Dialogue\")) %>%\n  # check for varying tempos for same track\n  group_by(album_name, track_name) %>%\n  filter(sd(tempo) > 1) %>%\n  ungroup() %>%\n  select(album_name, track_name, tempo) %>%\n  arrange(album_name, track_name)\ngaga %>%\n  filter(tempo > 0) %>%\n  group_by(album_name, track_name) %>%\n  summarise(tempo = round(mean(tempo)),\n            .groups = \"drop\") %>%\n  ungroup() %>%\n  ggplot(aes(x = tempo, fill = ..x..)) +\n  geom_histogram(binwidth = 4, show.legend = FALSE) +\n  scale_fill_gradient(low = \"#521F64\", high = \"#E8889C\") +\n  labs(x = \"Beats per minute\",\n       y = \"Number of tracks\",\n       title = \"Tempo of Lady Gaga Tracks\")\n# define style\ngaga_style <- theme(\n  plot.background = element_rect(fill = \"black\"),\n  text = element_text(color = \"white\", size = 11),\n  panel.background = element_rect(fill = \"black\"),\n  panel.grid.major.x = element_blank(),\n  panel.grid.minor.x = element_blank(),\n  panel.grid.major.y = element_line(colour = \"white\", size = 0.2),\n  panel.grid.minor.y = element_line(colour = \"white\", size = 0.2),\n  axis.text = element_text(color = \"white\"),\n  plot.title = element_text(hjust = 0.5)\n)\n\n## add it to the last plot created\nlast_plot() + gaga_style"},{"path":"spotify-data.html","id":"by-playlist","chapter":"1 Spotify Data","heading":"1.2 By Playlist","text":"need know \"uri\" public playlist access data . can get copying link playlist selecting 22 characters \"https://open.spotify.com/playlist/\" \"?si=...\". look Eurovision 2021 playlist.Use glimpse() count() explore structure table.","code":"\neurovision2021 <- get_playlist_audio_features(\n  playlist_uris = \"37i9dQZF1DWVCKO3xAlT1Q\"\n)"},{"path":"spotify-data.html","id":"track-ratings","chapter":"1 Spotify Data","heading":"1.2.1 Track ratings","text":"track several ratings: danceability, energy, speechiness, acousticness, instrumentalness, liveness, valence. sure determined (almost certainly algorithm). select track names columns look.general mood Eurovision songs 2021? use plots assess. First, need get data long format make easier plot multiple attributes.plot everything plot, instrumentalness consistently low value attributes disappear,can solve putting attribute facet letting y-axis differ plots setting scales = \"free_y\". Now easier see Eurovision songs tend pretty high danceability energy.\nFigure 1.1: Seven track attributes playlist 'Eurovision 2021'\n","code":"\neurovision2021 %>%\n  select(track.name, danceability, energy, speechiness:valence) %>%\n  datatable()\nplaylist_attributes <- eurovision2021 %>%\n  select(track.name, danceability, energy, speechiness:valence) %>%\n  pivot_longer(cols = danceability:valence,\n               names_to = \"attribute\",\n               values_to = \"rating\")\nggplot(playlist_attributes, aes(x = rating, colour = attribute)) +\n  geom_density()\nggplot(playlist_attributes, aes(x = rating, colour = attribute)) +\n  geom_density(show.legend = FALSE) +\n  facet_wrap(~attribute, scales = \"free_y\", nrow = 2)"},{"path":"spotify-data.html","id":"popularity","chapter":"1 Spotify Data","heading":"1.2.2 Popularity","text":"look attributes relate track popularity. exclude instrumentalness, since much variation.\nFigure 1.2: relationship track attributes popularity.\n","code":"\npopularity <- eurovision2021 %>%\n  select(track.name, track.popularity,\n         acousticness, danceability, energy, \n         liveness, speechiness, valence) %>%\n  pivot_longer(cols = acousticness:valence,\n               names_to = \"attribute\",\n               values_to = \"rating\")\nggplot(popularity, aes(x = rating, y = track.popularity, colour = attribute)) +\n  geom_point(alpha = 0.5, show.legend = FALSE) +\n  geom_smooth(method = lm, formula = y~x, show.legend = FALSE) +\n  facet_wrap(~attribute, scales = \"free_x\", nrow = 2) +\n  labs(x = \"Attribute Value\",\n       y = \"Track Popularity\")"},{"path":"spotify-data.html","id":"nested-data","chapter":"1 Spotify Data","heading":"1.2.3 Nested data","text":"columns table contain tables. example, entry track.artist column contains table columns href, id, name, type, uri, external_urls.spotify. Use unnest() extract tables. one artist track, expand table. example, track \"Adrenalina\" two rows now, one Senhit one Flo Rida.Eurovision nerd (like Emily), try downloading playlists several previous years visualise trends. See can find lists scores year join data see attributes related points.","code":"\neurovision2021 %>%\n  unnest(track.artists) %>%\n  select(track = track.name, \n         artist = name, \n         popularity = track.popularity) %>%\n  datatable()"},{"path":"spotify-data.html","id":"by-genre","chapter":"1 Spotify Data","heading":"1.3 By Genre","text":"Select first 20 artists genre \"eurovision\". people spam Spotify API, limited 50 artists per request.Now can select next 20 artists, incrementing offset 20, join first table, process data.","code":"\neuro_genre <- get_genre_artists(\n  genre = \"eurovision\",\n  limit = 20,\n  offset = 0\n)\neuro_genre %>%\n  select(name, popularity, followers.total) %>%\n  datatable()\neuro_genre2 <- get_genre_artists(\n  genre = \"eurovision\",\n  limit = 20,\n  offset = 20\n)\nbind_rows(euro_genre, euro_genre2) %>%\n  select(name, popularity, followers.total) %>%\n  datatable()"},{"path":"spotify-data.html","id":"repeated-calls","chapter":"1 Spotify Data","heading":"1.3.1 Repeated calls","text":"programmatic way make several calls function limits . usually want set waiting seconds minutes calls get locked (depending strict API ). Use map_df() automatically join results one big table.","code":"\n# create a slow version of get_genre_artists \n# delays 2 seconds after running\nslow_get_genre_artists <- slowly(get_genre_artists, \n                                 rate = rate_delay(2))\n\n# set 4 offsets from 0 to 150 by 50\noffsets <- seq(0, 150, 50)\n\n# run the slow function once for each offset\neuro_genre200 <- map_df(.x = offsets, \n                       .f = ~slow_get_genre_artists(\"eurovision\", \n                                                    limit = 50,\n                                                    offset = .x))\neuro_genre200 %>%\n  select(name, popularity, followers.total) %>%\n  arrange(desc(followers.total)) %>%\n  datatable()"},{"path":"spotify-data.html","id":"by-track","chapter":"1 Spotify Data","heading":"1.4 By Track","text":"can get even info specific track know Spotify ID. can get artist, album, playlist tables.","code":"\n# get the ID for Born This Way from the original album\nbtw_id <- gaga %>%\n  filter(track_name == \"Born This Way\", \n         album_name == \"Born This Way\") %>%\n  pull(track_id)"},{"path":"spotify-data.html","id":"features","chapter":"1 Spotify Data","heading":"1.4.1 Features","text":"Features list summary attributes track. also included previous tables, function useful unless getting track IDs directly.","code":"\nbtw_features <- get_track_audio_features(btw_id)## tibble [1 x 18] (S3: tbl_df/tbl/data.frame)\n##  $ danceability    : num 0.586\n##  $ energy          : num 0.827\n##  $ key             : int 11\n##  $ loudness        : num -5.1\n##  $ mode            : int 1\n##  $ speechiness     : num 0.15\n##  $ acousticness    : num 0.0037\n##  $ instrumentalness: int 0\n##  $ liveness        : num 0.328\n##  $ valence         : num 0.508\n##  $ tempo           : num 124\n##  $ type            : chr \"audio_features\"\n##  $ id              : chr \"6aDi4gOE2Cfc6ecynvP81R\"\n##  $ uri             : chr \"spotify:track:6aDi4gOE2Cfc6ecynvP81R\"\n##  $ track_href      : chr \"https://api.spotify.com/v1/tracks/6aDi4gOE2Cfc6ecynvP81R\"\n##  $ analysis_url    : chr \"https://api.spotify.com/v1/audio-analysis/6aDi4gOE2Cfc6ecynvP81R\"\n##  $ duration_ms     : int 260253\n##  $ time_signature  : int 4"},{"path":"spotify-data.html","id":"analysis","chapter":"1 Spotify Data","heading":"1.4.2 Analysis","text":"analysis gives seven different tables details track. Use names() function see names look object see information contains.meta gives list info analysis.track gives list attributes, including duration, loudness, end_of_fade_in, start_of_fade_out, time_signature. info available previous tables.bars, beats, tatums tables start, duration confidence bar, beat, tatum music (whatever \"tatum\" ).sections table start, duration, loudness, tempo, key, mode, time signature section music, along confidence measures .segments table information loudness, pitch timbre segments analysis, tend around 0.2 (seconds?)can use data map song.\nFigure 1.3: Use data segments table track analysis plot loudness time.\n","code":"\nbtw_analysis <- get_track_audio_analysis(btw_id)## [1] \"meta\"     \"track\"    \"bars\"     \"beats\"    \"sections\" \"segments\" \"tatums\"\nggplot(btw_analysis$segments, aes(x = start, \n                                  y = loudness_start, \n                                  color = loudness_start)) +\n  geom_point(show.legend = FALSE) +\n  scale_colour_gradient(low = \"red\", high = \"purple\") +\n  scale_x_continuous(breaks = seq(0, 300, 30)) +\n  labs(x = \"Seconds\",\n       y = \"Loudness\",\n       title = \"Loudness Map for 'Born This Way'\") +\n  gaga_style"}]
