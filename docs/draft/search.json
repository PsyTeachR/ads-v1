[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"book provides overview basic skills needed turn raw data informative summaries visualisations presented professional reports presentations. book introduce learners R (R Core Team, 2021), programming language can help automate working data. book cover importing processing data spreadsheets, producing data summaries descriptive statistics tables, creating beautiful informative visualisations, constructing reports presentations automatically update underlying data changes.end book, able use R :clean process datasummarise datainformatively visualise datacreate reusable report templates","code":""},{"path":"index.html","id":"structure-of-the-course","chapter":"Overview","heading":"0.1 Structure of the course","text":"book accompanies 10-week course, covering one chapter per week. chapter introduce new skills concepts using concrete examples. various points, multiple-choice fill---blank questions check understanding. chapter accompanying walk-videos, instructor demonstrates skills covered chapter. chapter also accompanying exercises reinforce learning.","code":""},{"path":"index.html","id":"how-to-learn-data-skills","chapter":"Overview","heading":"0.2 How to learn data skills","text":"Learning data skills kind like gym membership (thanks Phil McAleer analogy). given state---art equipment use instructions use , data skills get stronger unless practice.Data skills require memorise lots code. introduced many different functions, main skill learn efficiently find information need. require getting used structure help files cheat sheets, learning Goggle problem choose helpful solution, learning read error messages.Learning code involves making lot mistakes. mistakes completely essential process, try feel frustrated. Many chapter exercises give broken code fix get experience seeing common errors look like. become experienced coder, might make fewer errors, recover much faster.","code":""},{"path":"custom.html","id":"custom","chapter":"1 Customising Visualisations","heading":"1 Customising Visualisations","text":"","code":""},{"path":"custom.html","id":"ilo-custom","chapter":"1 Customising Visualisations","heading":"1.1 Intended Learning Outcomes","text":"Customise plots consistent styleCreate high quality plots like BBC, NYT, 538","code":""},{"path":"custom.html","id":"set-up","chapter":"1 Customising Visualisations","heading":"1.2 Set-up","text":"First, create new project work chapter named 09-custom. Second, open save new R Markdown document named custom.Rmd, delete welcome text load required packages chapter.need make folder called \"data\" download data file :\nsurvey_data.csv.Download ggplot2 cheat sheet.","code":"\nlibrary(tidyverse)   # data wrangling functions\nlibrary(ggthemes)    # for themes\nlibrary(patchwork)   # for combining plots\nlibrary(plotly)      # for interactive plots\n# devtools::install_github(\"hrbrmstr/waffle\")\nlibrary(waffle)      # for waffle plots\nlibrary(ggbump)      # for bump plots\nlibrary(treemap)     # for treemap plots\nlibrary(ggwordcloud) # for word clouds\nlibrary(tidytext)    # for manipulating text for word clouds\nlibrary(sf)          # for mapping geoms\nlibrary(rnaturalearth) # for map data\nlibrary(rnaturalearthdata) # extra mapping data\nlibrary(gganimate)   # for animated plots\n\ntheme_set(theme_light())"},{"path":"custom.html","id":"defaults","chapter":"1 Customising Visualisations","heading":"1.3 Defaults","text":"code creates two familiar plots Chapter ??, using default (light) theme palettes\nFigure 1.1: Default plot styles.\n","code":"\nct <- cols(issue_category = col_factor(levels = c(\"tech\", \"returns\", \"sales\", \"other\")))\nsurvey_data <- read_csv(file = \"data/survey_data.csv\",\n                        col_types = ct)\n\nbar <- ggplot(data = survey_data, \n              mapping = aes(x = issue_category,\n                            fill = issue_category)) +\n  geom_bar(show.legend = FALSE) +\n  labs(x = \"Issue Category\", \n       y = \"Count\",\n       title = \"Calls by Issue Category\")\n\npoint <- ggplot(data = survey_data, \n                mapping = aes(x = wait_time, \n                              y = call_time,\n                              color = issue_category)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = lm, formula = y~x) +\n  labs(x = \"Wait Time\",\n       y = \"Call Time\",\n       color = \"Issue Category\",\n       title = \"Wait Time by Call Time\")\nbar + point"},{"path":"custom.html","id":"r-markdown-options","chapter":"1 Customising Visualisations","heading":"1.4 R Markdown Options","text":"","code":""},{"path":"custom.html","id":"image-size","chapter":"1 Customising Visualisations","heading":"1.4.1 Image Size","text":"can set image size chunk headers.\nFigure 1.2: Image size altered fig.width = 10, fig.height = 5\nusing MacBook Retina display, may notice figures see RStudio editing interactively different see render file. annoying known bug RStudio. fixed, can set fig.width fig.height value/2 checking plot, set back knit.","code":"```{r, fig.width = 10, fig.height = 5}\nbar + point```"},{"path":"custom.html","id":"output","chapter":"1 Customising Visualisations","heading":"1.4.2 Output","text":"option .width controls much space figure takes relative width output. default value \"100%\". can also set alignment fig.align.\nFigure 1.3: Output display altered .width = \"75%\"\n","code":"\nbar"},{"path":"custom.html","id":"captions","chapter":"1 Customising Visualisations","heading":"1.4.3 Captions","text":"Figures usually get caption fig.cap alt text describe figure people impaired vision using fig.alt. can use pattern spread chunk options multiple lines way makes easier read.\nFigure 1.4: wait time increases, call time.\n","code":"```{r}```"},{"path":"custom.html","id":"setup-chunk","chapter":"1 Customising Visualisations","heading":"1.4.4 Setup Chunk","text":"can also set default values setup chunk like .set default figure width height setup chunk, images make interactively setting script right aspect ratio, able see .width, fig.align, fig.cap knit file.","code":"\nknitr::opts_chunk$set(\n  fig.width = 10,\n  fig.height = 5,\n  out.width = \"75%\",\n  fig.align = \"center\"\n)"},{"path":"custom.html","id":"themes-and-colours","chapter":"1 Customising Visualisations","heading":"1.5 Themes and Colours","text":"Use scale functions customise fill colour. Appendix ?? extensive detail .\nFigure 1.5: Plots classic theme Dark2 palette.\ncan download extra themes packages like ggthemes.\nFigure 1.6: Plots economist styles ggthemes.\n","code":"\nbar2 <- bar + \n  theme_classic() + \n  scale_fill_brewer(palette = \"Dark2\")\n\npoint2 <- point + \n  theme_classic() + \n  scale_color_brewer(palette = \"Dark2\")\n\nbar2 + point2\nbar_econ <- bar + \n  theme_economist() +\n  scale_fill_economist()\n\npoint_econ <- point + \n  theme_economist() +\n  scale_color_economist() +\n  guides(color = \"none\")\n\nbar_econ + point_econ"},{"path":"custom.html","id":"annotations","chapter":"1 Customising Visualisations","heading":"1.6 Annotations","text":"often useful add annotation plot , example, highlight important part plot add labels. annotate() function creates specific geom x- y-coordinates specify.","code":""},{"path":"custom.html","id":"text-annotations","chapter":"1 Customising Visualisations","heading":"1.6.1 Text annotations","text":"Add text annotation setting geom argument \"text\" \"label\" adding label. Labels padding background, text just text.\nFigure 1.7: example annotation text label.\nargument hjust horizontal justification text, vjust vertical justification. default values 0.5, text centred x y coordinates. 0 justify left bottom, 1 justifies right top. can change angle text, labels.See can work make figure , starting following:","code":"\nbar +\n  # add left-justified text to the second bar\n  annotate(geom = \"text\",\n           label = \"Our goal is to\\nreduce this\\ncategory\",\n           x = 1.65, y = 215,\n           hjust = 0, vjust = 1, \n           color = \"white\", fontface = \"bold\") +\n  # add a centred label to the third bar\n  annotate(geom = \"label\",\n           label = \"Our goal is\\nto increase this\\ncategory\",\n           x = 3, y = 75,\n           hjust = 0.5, vjust = 1, \n           color = \" darkturquoise\", fontface = \"bold\")\ntibble(x = c(0, 0, 1, 1),\n       y = c(0, 1, 0, 1)) %>%\n  ggplot(aes(x, y)) +\n  geom_point(alpha = 0.5, size = 2, color = \"red\")\ntibble(x = c(0, 0, 1, 1),\n       y = c(0, 1, 0, 1)) %>%\n  ggplot(aes(x, y)) +\n  geom_point(alpha = 0.5, size = 2, color = \"red\") +\n  annotate(\"label\", label = \"In the\\nmiddle\",\n           x = 0.5, y = 0.5,\n           fill = \"dodgerblue\", color = \"white\",\n           label.padding = unit(1, \"lines\"), # increase padding\n           label.r = unit(1.5, \"lines\")) +  # increase radius\n  annotate(\"text\", label = \"Bottom\\nLeft\",\n           x = 0, y = 0, hjust = 0, vjust = 0) +\n  annotate(\"text\", label = \"Top\\nLeft\", \n           x = 0, y = 1, hjust = 0, vjust = 1) +\n  annotate(\"text\", label = \"Bottom\\nRight\",\n           x = 1, y = 0, hjust = 1, vjust = 0) +\n  annotate(\"text\", label = \"Top\\nRight\",\n           x = 1, y = 1, hjust = 1, vjust = 1) +\n  annotate(\"text\", label = \"45 degrees\",\n           x = 0, y = 0.5, hjust = 0, angle = 45) +\n  annotate(\"text\", label = \"90 degrees\",\n           x = 0.25, y = 0.5, angle = 90) +\n  annotate(\"text\", label = \"270 degrees\",\n           x = 0.75, y = 0.5, angle = 270)+\n  annotate(\"text\", label = \"-45 degrees\",\n           x = 1, y = 0.5, hjust = 1, angle = -45)"},{"path":"custom.html","id":"other-annotations","chapter":"1 Customising Visualisations","heading":"1.6.2 Other annotations","text":"can add geoms highlight parts plot. example adds rectangle around group points, text label, straight arrow label rectangle, curved arrow label individual point.\nFigure 1.8: Example annotatins rect, text, segment, curve geoms.\nSee ggforce package sophisticated options, highlighting group points ellipse.","code":"\npoint +\n  # add a rectangle surrounding long call times\n  annotate(geom = \"rect\",\n           xmin = 100, xmax = 275,\n           ymin = 140, ymax = 180,\n           fill = \"transparent\", color = \"red\") +\n  # add a text label\n  annotate(\"text\",\n           x = 260, y = 120,\n           label = \"outliers\") +\n  # add an line with an arrow from the text to the box\n  annotate(\"segment\", \n           x = 240, y = 120, \n           xend = 200, yend = 135,\n           arrow = arrow(length = unit(0.5, \"lines\"))) +\n  # add a curved line with an arrow \n  # from the text to a wait time outlier\n  annotate(\"curve\", \n          x = 280, y = 120, \n          xend = 320, yend = 45,\n          curvature = -0.6,\n          arrow = arrow(length = unit(0.5, \"lines\")))"},{"path":"custom.html","id":"other-plots","chapter":"1 Customising Visualisations","heading":"1.7 Other Plots","text":"","code":""},{"path":"custom.html","id":"interactive-plots","chapter":"1 Customising Visualisations","heading":"1.7.1 Interactive Plots","text":"Use plotly package make interactive graphs. Assign ggplot variable use function ggplotly(). Interactive plots work HTML files, PDFs Word files.\nFigure 1.9: Interactive graph using plotly\nHover data points click legend items.","code":"\nggplotly(point_econ)"},{"path":"custom.html","id":"waffle-plots","chapter":"1 Customising Visualisations","heading":"1.7.2 Waffle Plots","text":"Chapter ??, mentioned pie charts poor way visualise proportions refused even show make one. Waffle plots delicious alternative.Use waffle hrbrmstr GitHub, one CRAN.\nFigure 1.10: Waffle plot.\ncan also make boxes icons using geom_pictogram(). Use fa_list() browse available icons.\nFigure 1.11: Waffle plot pictograms.\n","code":"\ndevtools::install_github(\"hrbrmstr/waffle\")\nsurvey_data %>% \n  count(issue_category) %>%\n  ggplot(aes(fill = issue_category, values = n)) +\n  geom_waffle(\n    n_rows = 23,\n    size = 0.33,       # line size\n    colour = \"white\",  # line colour\n    flip = FALSE,      # bottom-top or left-right\n    radius = grid::unit(0.1, \"npc\") # set to 0.5 for circles\n  ) +\n  theme_enhance_waffle() + # gets rid of axes\n  scale_fill_colorblind(name = \"Issue Category\")\nsurvey_data %>% \n  count(issue_category) %>%\n  ggplot(aes(label = issue_category, \n             values = n, \n             color = issue_category)) +\n  geom_pictogram(n_rows = 23,\n                 size = 3) +\n  scale_label_pictogram(\n    name = NULL,\n    values = c(\"asterisk\", \n               \"recycle\", \n               \"pound-sign\", \n               \"calculator\")\n  ) +\n  scale_color_manual(\n    name = NULL,\n    values = c(\"darkorchid3\", \n               \"dodgerblue2\", \n               \"springgreen4\", \n               \"darkred\")\n  ) +\n  theme_enhance_waffle() # gets rid of axes"},{"path":"custom.html","id":"lollipop-plots","chapter":"1 Customising Visualisations","heading":"1.7.3 Lollipop Plots","text":"Lollipop plots another sweet alternative pie charts representing relative counts. just combination geom_linerange() geom_point(). Use coord_flip() make horizontal.\nFigure 1.12: Lollipop plot.\nexample uses geom_text() put labels plot removes default axis labels scale_x_discrete(labels = NULL) (remember labels x-axis coordinates flipped).","code":"\nsurvey_data %>% \n  count(issue_category) %>%\n  ggplot(aes(x = issue_category)) +\n  geom_linerange(mapping = aes(ymin = 0, ymax = n),\n                 size = 2) +\n  geom_point(mapping = aes(y = n, colour = issue_category),\n             shape = 21,\n             size = 8,\n             stroke = 4,\n             fill = \"white\",\n             show.legend = FALSE) +\n  geom_text(aes(label = issue_category), \n            y = 1, hjust = 0, size = 6, \n            position = position_nudge(x = 0.2)) +\n  scale_x_discrete(labels = NULL) +\n  scale_color_colorblind() +\n  labs(x = \"\", y = \"\") +\n  coord_flip(ylim = c(0, 400))"},{"path":"custom.html","id":"treemap","chapter":"1 Customising Visualisations","heading":"1.7.4 Treemap","text":"Treemap plots another way visualise proportions. Like waffle plots, need count data category first. can use brewer palette fill.\nFigure 1.13: Treemap plot.\n","code":"\nsurvey_data %>% \n  count(issue_category) %>%\n  treemap(\n    index=\"issue_category\",\n    vSize=\"n\",\n    title = \"\",\n    palette = \"BuPu\",\n    inflate.labels = TRUE\n  )"},{"path":"custom.html","id":"bump-plots","chapter":"1 Customising Visualisations","heading":"1.7.5 Bump Plots","text":"Bump plots useful visualising rankings change time. first, need get ranking data. start typical raw data table, containing identifying column person three columns scores weekNow make table long, group week, use rank() function find rank person's score week. Use n() - rank(score) + 1 reverse ranks highest score gets rank 1. also need make week variable number.typical mapping bump plot puts time variable x-axis, rank variable y-axis, sets colour identifying variable.\nFigure 1.14: Basic bump plot\ncan make attractive customising axes adding text labels.Add label = person mapping can add text labels.Increase size lines size argument geom_bump()need labels weeks 1.5 2.5, change x-axis breaksThe expand argument two scale_ functions expands plot area can fit text labels right.makes sense first place top reverse order y-axis scale_y_reverse() fix breaks expansion.Add text labels geom_text(), just week 3, set data =  filter(rank_data, week == 3) geom.Set x = 3.05 move text labels just right week 3, set hjust = 0 right-justify text labels (default hjust = 0.5, center 3.05).Remove legend grid lines. Increase x-axis text size.\nFigure 1.15: Bump plot added features.\n","code":"\n# make a small dataset of scores for 3 people over 3 weeks\nscore_data <- tribble(\n  ~person, ~week_1, ~week_2, ~week_3,\n  \"Abeni\",      80,     75,       90,\n  \"Beth\",       75,     85,       75,\n  \"Carmen\",     60,     70,       80\n)\n# calculate ranks\nrank_data <- score_data %>%\n  pivot_longer(cols = -person,\n               names_to = \"week\",\n               values_to = \"score\") %>%\n  group_by(week) %>%\n  mutate(rank = n() - rank(score) + 1) %>%\n  ungroup() %>%\n  arrange(week, rank) %>%\n  mutate(week = str_replace(week, \"week_\", \"\") %>% as.integer())\n\nrank_data\nggplot(data = rank_data, \n       mapping = aes(x = week, \n                     y = rank, \n                     colour = person)) +\n  ggbump::geom_bump()\nggplot(data = rank_data, \n       mapping = aes(x = week, \n                     y = rank, \n                     colour = person,\n                     label = person)) +\n  ggbump::geom_bump(size = 10) +\n  scale_x_continuous(name = \"\",\n                     breaks = 1:3, \n                     labels = c(\"Week 1\", \"Week 2\", \"Week 3\"),\n                     expand = expansion(c(.05, .2))) +\n  scale_y_reverse(name = \"Ranking\",\n                  breaks = 1:3, \n                  expand = expansion(.2)) +\n  geom_text(data = filter(rank_data, week == 3),\n            color = \"black\", x = 3.05, hjust = 0) +\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.text.x = element_text(size = 12))"},{"path":"custom.html","id":"word-clouds","chapter":"1 Customising Visualisations","heading":"1.7.6 Word Clouds","text":"Word clouds interesting way summarise qualitative data. First, load data Amazon Alexa reviews.Next, make table number times individual word appears per rating function tidytext::unnest_tokens() splitting words input column individual words new output column.get rid common \"stop words\" integers filtering words omitted list.get top 25 words, group rating use dplyr::slice_max(), ordered column n.Now make two word clouds paste together (word clouds play well facets). Filter words table get one rating, set ggplot aesthetics label, colour, size. label come word column, colour different word size word proportional n, number times word appeared.visualisation geom ggwordcloud::geom_text_wordcloud_area(). Control big cloud ggwordcloud::scale_size_area() (usually takes trial--error). add title minimal theme get rid axes grid lines.Make another plot different rating paste together +.\nFigure 1.16: Word cloud.\n","code":"\n# https://www.kaggle.com/sid321axn/amazon-alexa-reviews\n# extracted from Amazon by Manu Siddhartha & Anurag Bhatt\nalexa <- rio::import(\"data/amazon_alexa.csv\")\nomitted <- c(stop_words$word, 0:9)\n\nwords <- alexa %>%\n  unnest_tokens(output = \"word\", input = \"verified_reviews\") %>%\n  count(word, rating) %>%\n  filter(!word %in% omitted) %>%\n  group_by(rating) %>%\n  slice_max(order_by = n, n = 25, with_ties = FALSE)\nrating1 <- filter(words, rating == 1) %>%\n  ggplot(aes(label = word, colour = word, size = n)) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 10) +\n  ggtitle(\"Rating = 1\") +\n  theme_minimal(base_size = 14)\nrating5 <- filter(words, rating == 5) %>%\n  ggplot(aes(label = word, colour = word, size = n)) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 10) +\n  ggtitle(\"Rating = 5\") +\n  theme_minimal(base_size = 14)\n\nrating1 + rating5"},{"path":"custom.html","id":"maps","chapter":"1 Customising Visualisations","heading":"1.7.7 Maps","text":"Working maps can tricky. sf package provides functions work ggplot2, geom_sf(). rnaturalearth package (associated data packages may prompted download) provide high-quality mapping coordinates.can combine multiple countries using bind_rows() visualise different colours country.\nFigure 1.17: Map coloured country.\ncan join data map table visualise data map using colours labels.typo data rnaturalearth, need change \"North Ayshire\" \"North Ayrshire\" join population data.Set fill population geom_sf(). Customise colours scale_fill_viridis_c(), setting breaks every 100K (1e5 scientific notation) making scale span 0 600K. Set labels \"000 K\" \"600 K\" make legend easier read. Finally, move position legend sea.\nFigure 1.18: Map coloured population.\n","code":"\n# get the world map coordinates\nworld_sf <- ne_countries(returnclass = \"sf\", scale = \"medium\")\n\n# plot them on a light blue background\nggplot() + \n  geom_sf(data = world_sf, size = 0.2) +\n  theme(panel.background = element_rect(fill = \"lightskyblue2\"))\n# get and bind country data\nuk_sf <- ne_states(country = \"united kingdom\", returnclass = \"sf\")\nireland_sf <- ne_states(country = \"ireland\", returnclass = \"sf\")\nislands <- bind_rows(uk_sf, ireland_sf) %>%\n  filter(!is.na(geonunit))\n\n# set colours\ncountry_colours <- c(\"Scotland\" = \"#0962BA\",\n                     \"Wales\" = \"#00AC48\",\n                     \"England\" = \"#FF0000\",\n                     \"Northern Ireland\" = \"#FFCD2C\",\n                     \"Ireland\" = \"#F77613\")\n\nggplot() + \n  geom_sf(data = islands,\n          mapping = aes(fill = geonunit),\n          colour = NA,\n          alpha = 0.75) +\n  coord_sf(crs = sf::st_crs(4326),\n           xlim = c(-10.7, 2.1), \n           ylim = c(49.7, 61)) +\n  scale_fill_manual(name = \"Country\", \n                    values = country_colours)\n# load map data\nscotland_sf <- ne_states(geounit = \"Scotland\", \n                         returnclass = \"sf\")\n\n# load population data from\n# https://www.indexmundi.com/facts/united-kingdom/quick-facts/scotland/population\nscotpop <- read_csv(\"data/scottish_population.csv\", \n                    show_col_types = FALSE)\n\n# join data and fix typo in the map\nscotmap_pop <- scotland_sf %>%\n  mutate(name = ifelse(name == \"North Ayshire\", \n                       yes = \"North Ayrshire\", \n                       no = name)) %>%\n  left_join(scotpop, by = \"name\") %>%\n  select(name, population, geometry)\n# plot\nggplot() + \n  geom_sf(data = scotmap_pop,\n          mapping = aes(fill = population),\n          color = \"white\", \n          size = .1) +\n  coord_sf(xlim = c(-8, 0), ylim = c(54, 61)) +\n  scale_fill_viridis_c(name = \"Population\",\n                       breaks = seq(0, 6e5, 1e5), \n                       limits = c(0, 6e5),\n                       labels = paste0(0:6, \"00 K\")) +\n  theme(legend.position = c(0.16, 0.84))"},{"path":"custom.html","id":"animated-plots","chapter":"1 Customising Visualisations","heading":"1.7.8 Animated Plots","text":"Animated plots great way add wow factor reports, can complex make, distracting, accessible, use sparingly data visualisation animation really adds something. package gganimate many functions animating ggplots., load population data United Nations. Download file data folder open Excel first see looks like. code gets data first tab, filters just 6 world regions, makes data long, makes sure year column numeric pop column shows population whole numbers (original data 1000s).make animated plot showing population region changes year. First, make static plot. Filter data recent year can see single frame animation look like.Remove filter add transition_time(year). can use glue syntax include frame_time title. Use anim_save() save animation GIF file set code chunk eval = FALSE creating animation takes long time want run every time knit report.can show animated gif html report (animations work Word PDF) using include_graphics(), include GIF dynamic document like PowerPoint.\nFigure 1.19: Animated gif.\n","code":"\n# load and process data\nworldpop <- readxl::read_excel(\"data/WPP2019_POP_F01_1_TOTAL_POPULATION_BOTH_SEXES.xlsx\", skip = 16) %>%\n  filter(Type == \"Region\") %>%\n  select(region = 3, `1950`:`1992`) %>%\n  pivot_longer(cols = -region, \n               names_to = \"year\",\n               values_to = \"pop\") %>%\n  mutate(year = as.integer(year),\n         pop = round(1000 * as.numeric(pop)))\nworldpop %>%\n  filter(year == 1992) %>%\n  ggplot(aes(x = region, y = pop, fill = region)) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_viridis_d() +\n  scale_x_discrete(name = \"\", \n                   guide = guide_axis(n.dodge=2))+\n  scale_y_continuous(name = \"Population\",\n                     breaks = seq(0, 3e9, 1e9),\n                     labels = paste0(0:3, \"B\")) +\n  ggtitle('Year: 1992')\nanim <- worldpop %>%\n  ggplot(aes(x = region, y = pop, fill = region)) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_viridis_d() +\n  scale_x_discrete(name = \"\",\n                   guide = guide_axis(n.dodge=2))+\n  scale_y_continuous(name = \"Population\",\n                     breaks = seq(0, 3e9, 1e9),\n                     labels = paste0(0:3, \"B\")) +\n  ggtitle('Year: {frame_time}') +\n  transition_time(year)\n  \n\nanim_save(filename = \"images/gganim-demo.gif\",\n          animation = anim,\n          width = 8, height = 5, units = \"in\", res = 150)\nknitr::include_graphics(\"images/gganim-demo.gif\")"},{"path":"custom.html","id":"resources-custom","chapter":"1 Customising Visualisations","heading":"1.8 Further Resources","text":"many options data visualisation R time cover . following resources get started journey informative, intuitive visualisations.R Graph Gallery (really useful)Look Data Data Vizualization Social ScienceGraphs Cookbook RTop 50 ggplot2 VisualizationsR Graphics Cookbook Winston Changggplot extensionsplotly creating interactive graphsDrawing Beautiful Maps Programmaticallygganimate","code":""}]
