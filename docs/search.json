[{"path":"index.html","id":"overview","chapter":"Overview","heading":"Overview","text":"book provides overview basic skills needed turn raw data informative summaries visualisations presented professional reports, presentations, dashboards. book introduce learners R (R Core Team, 2021), programming language can help automate working data. book cover importing processing data spreadsheets, producing data summaries descriptive statistics tables, creating beautiful informative visualisations, constructing reports, presentations, dashboards automatically update underlying data changes.end book, able use R :clean process datasummarise datainformatively visualise datacreate reusable report templates","code":""},{"path":"index.html","id":"structure-of-the-course","chapter":"Overview","heading":"0.1 Structure of the course","text":"book accompanies 10-week course, covering one chapter per week. chapter introduce new skills concepts using concrete examples. various points, multiple-choice fill---blank questions check understanding. chapter accompanying walk-videos, instructor demonstrates skills covered chapter. chapter also accompanying exercises reinforce learning.","code":""},{"path":"index.html","id":"how-to-learn-data-skills","chapter":"Overview","heading":"0.2 How to learn data skills","text":"Learning data skills kind like gym membership (HT Phil McAleer analogy). given state---art equipment use instructions use , data skills get stronger unless practice.Data skills require memorise lots code. introduced many different functions, main skill learn efficiently find information need. require getting used structure help files cheat sheets, learning Goggle problem choose helpful solution, learning read error messages.Learning code involves making lot mistakes. mistakes completely essential process, try feel frustrated. Many chapter exercises give broken code fix get experience seeing common errors look like. become experienced coder, might make fewer errors, recover much faster.","code":""},{"path":"intro.html","id":"intro","chapter":"1 Intro to R and RStudio","heading":"1 Intro to R and RStudio","text":"","code":""},{"path":"intro.html","id":"ilo-intro","chapter":"1 Intro to R and RStudio","heading":"1.1 Intended Learning Outcomes","text":"Install R RStudioBe able install add-packagesBe able distinguish numeric character data types","code":""},{"path":"intro.html","id":"intro-installing-r","chapter":"1 Intro to R and RStudio","heading":"1.2 Installing R and RStudio","text":"Appendix technical details installing R RStudio computer. , concentrate introducing RStudio's interface getting configured.","code":""},{"path":"intro.html","id":"rstudio_ide","chapter":"1 Intro to R and RStudio","heading":"1.2.1 RStudio","text":"installed R, gave computer ability process R programming language, also installed app called \"R\". never use app. Instead, use RStudio, Integrated Development Environment (IDE): program serves text editor, file manager, spreadsheet viewer, .\nFigure 1.1: RStudio IDE\nRStudio arranged four window panes. default, upper left pane source pane, view edit source code files. bottom left pane usually console pane, can type commands view output messages. right panes several different tabs show information code. can change location panes tabs shown Preferences > Pane Layout.","code":""},{"path":"intro.html","id":"intro-reproducibility","chapter":"1 Intro to R and RStudio","heading":"1.2.2 Reproducibility","text":"class, learning make reproducible reports. involves writing scripts transform data, create summaries visualisations, embed report way always gives results.things reproducibly, others (future ) can understand check work. can also reuse work easily. example, need create report every month social media analytics company, reproducible report allows download new month's data create report within seconds. might take little longer set report first instance reproducible methods, time saves long run invaluable.Appendix .3 shows change two important settings global Options increase reproducibility. settings :Restore .RData workspace startup: CheckedNot CheckedSave workspace .RData exit: AlwaysNeverAsk","code":""},{"path":"intro.html","id":"install-package","chapter":"1 Intro to R and RStudio","heading":"1.3 Add-on packages","text":"One great things R user extensible: anyone can create new add-software package extends functionality. currently thousands add-packages R users created solve many different kinds problems, just simply fun. packages data visualisation, machine learning, interactive dashboards, web scraping, playing games Sudoku.Add-packages distributed base R, downloaded installed archive, way , instance, download install PokemonGo smartphone.main repository packages reside called CRAN, Comprehensive R Archive Network. can install CRAN archive R using install.packages() function.important distinction installing package loading package.","code":""},{"path":"intro.html","id":"installing-a-package","chapter":"1 Intro to R and RStudio","heading":"1.3.1 Installing a package","text":"done using install.packages(). like installing app phone: app remain installed remove . instance, want use PokemonGo phone, install App Store Play Store, re-install time want use . launch app, run background close restart phone. Likewise, install package, package available (loaded) every time open R.Install esquisse package system. package lets create plots interactively copy code needed make reproducibly.already packages like ggplot2 shiny installed, also install dependencies . get error message end, installation successful.Never install package inside script. console pane.","code":"\n# type this in the console pane\ninstall.packages(\"esquisse\")"},{"path":"intro.html","id":"loading-a-package","chapter":"1 Intro to R and RStudio","heading":"1.3.2 Loading a package","text":"done using library(packagename). like launching app phone: functionality app launched remains close app restart. Likewise, run library(packagename) within session, functionality package referred packagename made available R session. next time start R, need run library() function want access functionality.can load functions esquisse current R session follows:might get red text load package, normal. usually warning package functions name packages already loaded.Now can run function esquisse::esquisser(), runs interactive plotting example built-dataset diamonds ggplot2 package.can use convention package::function() indicate add-package function resides. instance, see readr::read_csv(), refers function read_csv() readr add-package.can also install multiple packages . command install packages using class.","code":"\nlibrary(esquisse)\n# type this in the console pane\nesquisse::esquisser(ggplot2::diamonds)\ninstall.packages(\n  \"tidyverse\", # for everything\n  \"rio\", \"haven\", \"readxl\", # for data import\n  \"kableExtra\", # for nice tables\n  \"ggwordcloud\", \"tidytext\" # for word clouds\n)"},{"path":"intro.html","id":"tidyverse","chapter":"1 Intro to R and RStudio","heading":"1.3.3 Tidyverse","text":"tidyverseis meta-package loads several packages using almost every report:ggplot2, data visualisation (Chapter 3)readr, data import (Chapter 4)tibble, tables (Chapter 4)tidyr, data tidying (Chapter 5)dplyr, data manipulation (Chapter 6)stringr, stringsforcats, factorspurrr, repeating thingsWhen install tidyverse, also installs useful packages can load individually. can get full list using tidyverse_packages(), packages using book :googlesheets4, working Google spreadsheetsreadxl, Excel fileslubridate, working dateshms, working timesrvest, web scraping","code":""},{"path":"intro.html","id":"intro-data-types","chapter":"1 Intro to R and RStudio","heading":"1.4 Data types","text":"Data can numbers, words, true/false values combinations . order understand later concepts, useful basic understanding data types R. Appendix D details, concept relevant repeatedly. now, just important understand difference numeric character data.Numeric data numbers like 42 3.14159. can use numbers mathematical operations, like calculating sum total column prices average number social media likes per day.Character data strings: text inside quotes. text can letters, punctuation, even numbers. example, \"January\" character string, \"1\" put quotes.try add two strings, even contain numbers, get error. learn deal errors like Chapter 4.","code":"\n\"1\" + \"2\"## Error in \"1\" + \"2\": non-numeric argument to binary operator"},{"path":"intro.html","id":"glossary-intro","chapter":"1 Intro to R and RStudio","heading":"1.5 Glossary","text":"","code":""},{"path":"intro.html","id":"resources-intro","chapter":"1 Intro to R and RStudio","heading":"1.6 Further Resources","text":"RStudio IDE CheatsheetRStudio Cloud","code":""},{"path":"reports.html","id":"reports","chapter":"2 Reports with R Markdown","heading":"2 Reports with R Markdown","text":"","code":""},{"path":"reports.html","id":"ilo-reports","chapter":"2 Reports with R Markdown","heading":"2.1 Intended Learning Outcomes","text":"able knit simple reproducible report R MarkdownBe able edit Markdown show/hide code use inline codingBe able identify different types dataYou'll learn following functions chapter:knitr::opts_chunk$set()kableExtra::kable()kableExtra::add_header_above()kableExtra::row_spec()kableExtra::column_spec()kableExtra::kable_classic()chapter also examples uses functions learn later chapters. worry learning functions week; just copy examples practice script.","code":"\nlibrary(tidyverse) # readr, dplyr, tidyr, ggplot2\nlibrary(knitr)\nlibrary(kableExtra)"},{"path":"reports.html","id":"projects","chapter":"2 Reports with R Markdown","heading":"2.2 Organising a project","text":"First, need get organised.Projects RStudio way group files need one project. projects include scripts, data files, output files like PDF version script images.Make new directory keep materials class.Choose New Project... File menu create new project called 02-reports directory.","code":""},{"path":"reports.html","id":"working-directory","chapter":"2 Reports with R Markdown","heading":"2.2.1 Working Directory","text":"put files? usually want scripts data files inside one folder computer, working directory. can organise files subdirectories inside main project directory, putting raw data files directory called data saving image files directory called images.script reference files three locations, using appropriate format.Never set change working directory script.R Markdown files automatically use directory .Rmd file working directory.script needs file subdirectory working directory, , data/widgets_gadgets.xlsx, load using relative path accessible move working directory another location computer:load using absolute path:Also note convention using forward slashes, unlike Windows-specific convention using backward slashes. make references files work everyone, regardless operating system.","code":"\ndat <- read_csv(\"data/widgets_gadgets.xlsx\")  # correct\ndat <- read_csv(\"C:/Carla's_files/2020-2021/data/widgets_gadgets.xlsx\")   # wrong"},{"path":"reports.html","id":"naming-things","chapter":"2 Reports with R Markdown","heading":"2.2.2 Naming Things","text":"Name files people computers can easily find things. important principles:file directory names contain letters, numbers, dashes, underscores, full stop (.) file name extension (means spaces!)consistent capitalisation (prefer never use make easy remember)use underscores (_) separate parts file name, dashes (-) separate words sectionname files pattern alphabetises sensible order makes easy find file looking forprefix filename underscore move top list, prefix files numbers control orderFor example, file names mess:report.docreport final.docData (Customers) 11-15.xlsCustomers Data Nov 12.xlsfinal report2.docproject notes.txtVendor Data November 15.xlsHere one way structure similar files structure easy human scan list use code find relevant files. See can figure last one ._project-notes.txtreport_v1.docreport_v2.docreport_v3.docdata_customer_2021-11-12.xlsdata_customer_2021-11-15.xlsvendor-data_2021-11-15.xlsdata-vendor-2021_11_15.xlsdata_vendor_2021-11-15.xlsdata_2021-11-15_vendor.xlsThink ways name files . Look project files see can improve.","code":""},{"path":"reports.html","id":"rmarkdown","chapter":"2 Reports with R Markdown","heading":"2.3 R Markdown","text":"use R Markdown create reproducible reports table contents, text, tables, images, code. text can written using markdown, way specify formatting, headers, paragraphs, lists, bolding, links.open new R Markdown file template, see example document several code chunks .","code":""},{"path":"reports.html","id":"rmd-knit","chapter":"2 Reports with R Markdown","heading":"2.3.1 Knitting","text":"create HTML PDF report R Markdown (Rmd) document, knit . button looks like ball yarn needles click knit file report.can also type following code console (substituting specific file name). Never put Rmd script , try knit infinite loop.Create new R Markdown file File > New File > R Markdown... menu. Change title author, knit create html file.","code":"\nknitr::knit2html(\"report.Rmd\")"},{"path":"reports.html","id":"yaml","chapter":"2 Reports with R Markdown","heading":"2.3.2 YAML Header","text":"YAML header can set several options.Try changing values false true see options .df_print: kable option prints data frames using knitr::kable. learn customise tables.built-bootswatch themes : default, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united, yeti. can view download themes.\nFigure 2.1: Light themes versions 3 4.\nYAML headers can picky spaces semicolons (rest R Markdown much forgiving). example, put space \"author\", get error looks like:error message tell exactly problem (second character second line YAML header), usually matter fixing typos making sure indenting exactly right.","code":"---\ntitle: \"My Demo Document\"\nauthor: \"Me\"\noutput:\n  html_document:\n    df_print: kable\n    theme: \n      version: 4\n      bootswatch: yeti\n    toc: true\n    toc_float:\n      collapsed: false\n      smooth_scroll: false\n    toc_depth: 3\n    number_sections: false\n---Error in yaml::yaml.load(..., eval.expr = TRUE) : \n  Parser error: while parsing a block mapping at line 1, column 1 did not find expected key at line 2, column 2"},{"path":"reports.html","id":"rmd-setup","chapter":"2 Reports with R Markdown","heading":"2.3.3 Setup","text":"create new R Markdown file RStudio, setup chunk automatically created.can set default options document .code sets following options:fig.width  = 8 : default figure width 8 inches (can change individual figures)fig.height = 5 : default figure height 5 inchesfig.path   = 'images/' : figures saved directory \"images\"echo       = FALSE : show code chunks rendered documentwarning    = FALSE : show function warningsmessage    = FALSE : show function messagescache      = FALSE : run code create images objects time knit (set TRUE time-consuming code)Find list current chunk options typing str(knitr::opts_chunk$get()) console. See knitr options documentation explanations possible options.can also add packages need chunk using library(). Often working script, realize need load another add-package. bury call library(package_I_need) way script. Put top, user overview packages needed.frequently use functions package tidyverse, load setup chunk using code install.packages(\"tidyverse\")library(tidyverse)load(tidyverse)","code":"```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)``````{r setup, include=FALSE}\nknitr::opts_chunk$set(\n  fig.width  = 8, \n  fig.height = 5, \n  fig.path   = 'images/',\n  echo       = FALSE, \n  warning    = TRUE, \n  message    = FALSE,\n  cache      = FALSE\n)```"},{"path":"reports.html","id":"markdown","chapter":"2 Reports with R Markdown","heading":"2.3.4 Markdown","text":"can use visual markdown editor RStudio version 1.4 higher. button top source pane pen tip. useful complex styling, can also use common plain-text style markups:Headers created prefacing subtitles one hashes (#). include table contents (toc) YAML, created document headers.Format text italics bold surrounding text one two asterisks underscores.Make lists using numbers, asterisks dashes items. Indent items make nested lists.Make links like : [psyTeachR](https://psyteachr.github.io/)Download R Markdown Cheat Sheet learn .Delete default text add structure document creating headers subheaders. going present summary table plot data.","code":""},{"path":"reports.html","id":"code-chunks","chapter":"2 Reports with R Markdown","heading":"2.3.5 Code Chunks","text":"can include code chunks create display images, tables, computations include text. code block starts ends three backtick symbols row. first three backticks, information code curly brackets, {r chunk-name, echo=FALSE} (runs code, show text code block compiled document).start loading data.First, create code chunk document. code loads data web. can type backticks chunk header manually, use keyboard shortcut (alt-cmd-).can add comments inside R chunks hash symbol (#). R interpreter ignore characters hash end line.usually good practice start code chunk comment explains , especially code explained text report.name objects clearly, often need add clarifying comments. example, named three objects total_number_of_sales, first_year last_year, omit comments. bit art comment code well.","code":"```{r}\n# Data from https://www.kaggle.com/kyanyoga/sample-sales-data\nsales <- read_csv(\"data/sales_data_sample.csv\")```\n# important numbers\n\nn <- nrow(sales) # the total number of sales\nfirst <- min(sales$YEAR_ID) # the first year in the table\nlast <- max(sales$YEAR_ID) # the last year in the table"},{"path":"reports.html","id":"rmd-tables","chapter":"2 Reports with R Markdown","heading":"2.3.6 Tables","text":"Next, create code chunk want display summary table. use tidyverse functions learn data wrangling lectures count number products per year product line.table OK, reader-friendly changing column labels adding caption. can also use specialised functions kableExtra format tables. powerful, take practice.\nTable 2.1: Number sales per product line year.\nSee many different ways can style table . Use kableExtra vignette inspiration.","code":"\nsummary_table <- sales %>%\n  group_by(YEAR_ID, PRODUCTLINE) %>%\n  count() %>%\n  pivot_wider(id_cols = PRODUCTLINE,\n              names_from = YEAR_ID, \n              values_from = n)\n\nkable(summary_table)\nkable(summary_table, \n      col.names = c(\"\", \"2003\", \"2004\", \"2005\"),\n      caption = \"Number of sales per product line each year.\") %>%\n  add_header_above(c(\"Product Lines\" = 1, \"Sales\" = 3), line = F, bold = T) %>%\n  # change the header style\n  row_spec(0, color = \"grey\") %>%\n  # change the table style\n  kable_classic(full_width = F) %>%\n  # make the first column bold with a border to the right\n  column_spec(1, bold = T, border_right = T) %>%\n  # highlight sales over 200 in red\n  column_spec(2, color = ifelse(summary_table$`2003` > 200, \"red\", \"black\")) %>%\n  column_spec(3, color = ifelse(summary_table$`2004` > 200, \"red\", \"black\")) %>%\n  column_spec(4, color = ifelse(summary_table$`2005` > 200, \"red\", \"black\")) "},{"path":"reports.html","id":"rmd-images","chapter":"2 Reports with R Markdown","heading":"2.3.7 Images","text":"Next, create code chunk want display image document. put table. use code learn Chapter 3 show range sales within country.Notice figure caption formatted chunk options.\nFigure 2.2: Items product line.\ncan also include images create R using markdown syntax images:Things Hyperbole Half","code":"```{r item-by-line, fig.cap=\"Items by product line.\"}\nggplot(sales, aes(x = COUNTRY, y = SALES, fill = COUNTRY)) +\n  geom_violin(alpha = 0.5, show.legend = FALSE) +\n  xlab(\"\") +\n  scale_y_continuous(name = \"Sales per order\", \n                     breaks = seq(0, 14000, 2000), \n                     labels = paste0(\"£\", seq(0, 14, 2), \"K\")) +\n  scale_fill_viridis_d() +\n  theme(text = element_text(size = 20, family = \"Times\"),\n        axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))```![All the Things by Hyperbole and a Half](images/memes/x-all-the-things.png)"},{"path":"reports.html","id":"rmd-inline-r","chapter":"2 Reports with R Markdown","heading":"2.3.8 Inline R","text":"Sometimes just need insert number data text report. Inline R code lets . First, calculate total number sales per year code block. block can hidden final report.can insert results paragraph inline R code looks like :Rendered text:total sales per year £3,516,980 (2003), £4,724,163 (2004), £1,791,487 (2005).markdown document, new paragraphs created skip blank line. include single line break sentence, like , show report. can good way organise complicated text inline code.","code":"\nsales_per_year <- sales %>%\n  group_by(YEAR_ID) %>%\n  summarise(total = sum(SALES)) %>%\n  # this adds commas as thousands separators\n  mutate(fmt = format(total, big.mark=\",\"))\n\nsales03 <- sales_per_year %>% filter(YEAR_ID == 2003) %>% pull(fmt)\nsales04 <- sales_per_year %>% filter(YEAR_ID == 2004) %>% pull(fmt)\nsales05 <- sales_per_year %>% filter(YEAR_ID == 2005) %>% pull(fmt)The total sales per year were \n£`r sales03` (2003), \n£`r sales04` (2004), and \n£`r sales05` (2005)."},{"path":"reports.html","id":"output-formats","chapter":"2 Reports with R Markdown","heading":"2.3.9 Output Formats","text":"can knit file PDF Word right packages installed computer. can also create presentations, dashboards, websites, even books R markdown, learn Chapter 9. fact, book reading right now created using R markdown.","code":""},{"path":"reports.html","id":"glossary-reports","chapter":"2 Reports with R Markdown","heading":"2.4 Glossary","text":"","code":""},{"path":"reports.html","id":"resources-reports","chapter":"2 Reports with R Markdown","heading":"2.5 Further Resources","text":"R Markdown Cheat SheetkableExtraR Markdown reference GuideR Markdown TutorialR Markdown: Definitive Guide Yihui Xie, J. J. Allaire, & Garrett GrolemundProject Structure Danielle NavarroHow name files Jenny Bryan","code":""},{"path":"reports.html","id":"exercises-reports","chapter":"2 Reports with R Markdown","heading":"2.6 Exercises","text":"","code":""},{"path":"reports.html","id":"exercises-reports-project","chapter":"2 Reports with R Markdown","heading":"2.6.1 New project","text":"Create new project called \"demo_report\" [2.2]","code":""},{"path":"reports.html","id":"exercises-reports-setup","chapter":"2 Reports with R Markdown","heading":"2.6.2 Set up an R Markdown script","text":"\"demo_report\" project, create new Rmarkdown document called \"job.Rmd\" [2.3]. Edit YAML header output tables using kable. Set custom theme. [2.3.2]","code":"---\ntitle: \"My Job\"\nauthor: \"Me\"\noutput:\n  html_document:\n    df_print: kable\n    theme: \n      version: 4\n      bootswatch: sandstone\n---"},{"path":"reports.html","id":"exercises-reports-rmarkdown","chapter":"2 Reports with R Markdown","heading":"2.6.3 R Markdown","text":"Write short paragraph describing job [2.3.4]. Include bullet-point list links websites useful job [2.3.4].","code":"I am a research psychologist who is interested in open science \nand teaching computational skills.\n\n* [psyTeachR books](https://psyteachr.github.io/)\n* [Google Scholar](https://scholar.google.com/)"},{"path":"reports.html","id":"exercises-reports-tables","chapter":"2 Reports with R Markdown","heading":"2.6.4 Tables","text":"Use following code load small table tasks [2.3.5]. Edit relevant job (can change categories entirely want).Figure make code chunks show knitted document [2.3.3]can set default echo = FALSE setup chunk top script.set visibility specific code chunk, put echo = FALSE inside curly brackets.Display table purple italic column headers. Try different styles using kableExtra [2.3.6]","code":"\ntasks <- tibble::tribble(\n  ~task,                   ~category,      ~frequency,\n  \"Respond to tweets\",     \"social media\", \"daily\",\n  \"Create a twitter poll\", \"social media\", \"weekly\",\n  \"Make the sales report\", \"reporting\",    \"montly\"\n)\nknitr::opts_chunk$set(echo = FALSE)```{r, echo=FALSE}\n# code to hide```\nkableExtra::kable(tasks) %>%\n  kableExtra::kable_minimal() %>%\n  kableExtra::row_spec(row = 0, italic = TRUE, color = \"purple\")"},{"path":"reports.html","id":"exercises-reports-images","chapter":"2 Reports with R Markdown","heading":"2.6.5 Images","text":"Add image anything relevant [2.3.7]can add image web using URL:![Applied Data Skills](https://psyteachr.github.io/ads-v1/images/logos/logo.png)save image project directory (e.g., images folder) add using relative path:![Applied Data Skills](images/logos/logo.png)","code":""},{"path":"reports.html","id":"exercises-reports-inline","chapter":"2 Reports with R Markdown","heading":"2.6.6 Inline R","text":"Use inline R include version R using following sentence: \"report created using R version 4.1.0 (2021-05-18).\" can get version using object R.version.string. [2.3.8]report created using `r R.version.string`.","code":""},{"path":"reports.html","id":"exercises-reports-knit","chapter":"2 Reports with R Markdown","heading":"2.6.7 Knit","text":"Knit document html [2.3.1]Click knit button run following code console. (put Rmd script!)","code":"\nknitr::knit2html(\"job.Rmd\")"},{"path":"viz.html","id":"viz","chapter":"3 Basic Data Visualisation","heading":"3 Basic Data Visualisation","text":"","code":""},{"path":"viz.html","id":"ilo-viz","chapter":"3 Basic Data Visualisation","heading":"3.1 Intended Learning Outcomes","text":"Understand difference categorical continuous dataCreate plots layers using ggplotBe able choose appropriate plots data","code":"\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(ggthemes)\nlibrary(lubridate)"},{"path":"viz.html","id":"variable-types","chapter":"3 Basic Data Visualisation","heading":"3.2 Variable Types","text":"spreadsheet r glossary(\"tidy data\") format, row observation, column variable, information cell value. learn get data format Chapter 5, get started use built-datasets right format.example, table lists pets owned members psyTeachR team. row observation one pet. 5 variables pet, name, owner, species, weight, rating.plotting data, important know type variables .","code":""},{"path":"viz.html","id":"continuous","chapter":"3 Basic Data Visualisation","heading":"3.2.1 Continuous","text":"Continuous variables properties can measure, like weight. Continuous variables always numbers. may rounded nearest whole number, make sense measurement halfway .","code":""},{"path":"viz.html","id":"categorical","chapter":"3 Basic Data Visualisation","heading":"3.2.2 Categorical","text":"Categorical variables properties can count, like number pets species. Categorical variables can nominal, categories really order, like cats, dogs ferrets (even though ferrets obviously best). Sometimes people represent categorical variables numbers correspond names, like 0 = \"\" 1 = \"yes\", values clear interpretation. control data recorded, better use text names clarity, learn recode columns Chapter 6.","code":""},{"path":"viz.html","id":"ordinal","chapter":"3 Basic Data Visualisation","heading":"3.2.3 Ordinal","text":"Ordinal variables type categorical variable clear order, distance categories something exactly equate, like points Likert rating scale. Even data table uses numbers like 1-7 represent ordinal variables, treat like continuous variables.","code":""},{"path":"viz.html","id":"dates-and-times","chapter":"3 Basic Data Visualisation","heading":"3.2.4 Dates and Times","text":"Dates times special case variable. can act like categorical continuous variables, special ways plot .","code":""},{"path":"viz.html","id":"building-plots","chapter":"3 Basic Data Visualisation","heading":"3.3 Building Plots","text":"","code":""},{"path":"viz.html","id":"layered-plots","chapter":"3 Basic Data Visualisation","heading":"3.3.1 Layered Plots","text":"Figure 3.1 displays evolution simple scatterplot using layered approach. First, plot space built (layer 1); variables specified (layer 2); type visualisation (known geom) desired variables specified (layer 3) - case geom_point() called visualise individual data points; second geom added include line best fit (layer 4), axis labels edited readability (layer 5), finally, theme applied change overall appearance plot (layer 6).\nFigure 3.1: Evolution layered plot\nImportantly, layer independent independently customisable. example, size, colour position component can adjusted, one , example, remove first geom (data points) visualise line best fit, simply removing layer draws data points (Figure 3.2). use layers makes easy build complex plots step--step, adapt extend plots existing code.\nFigure 3.2: Plot scatterplot layer removed.\n","code":""},{"path":"viz.html","id":"loading-data","chapter":"3 Basic Data Visualisation","heading":"3.3.2 Loading Data","text":"build simple version plot , layer layer. First need get data. learn load data Chapter 4, can copy code create data table object. \"column specification\" tells column named type data . double kind numeric value can decimal places.data simulated data call centre customer satisfaction survey. first thing need plot data get familiar rows (observations) columns (variables) mean. Sometimes obvious, sometimes requires help data provider. , row represents one call centre.caller_id unique ID calleremployee_id unique ID employee taking callscall_start date time call arrivedwait_time number seconds caller waitcall_time number seconds call lasted employee picked upissue_category whether issue tech, sales, returns, othersatisfaction customer satisfaction rating scale 1 (unsatisfied) 5 (satisfied)","code":"\nsurvey_data <- read_csv(file = \"data/survey_data.csv\")## \n## ── Column specification ────────────────────────────────────────────────────────\n## cols(\n##   caller_id = col_character(),\n##   employee_id = col_character(),\n##   call_start = col_datetime(format = \"\"),\n##   wait_time = col_double(),\n##   call_time = col_double(),\n##   issue_category = col_character(),\n##   satisfaction = col_double()\n## )"},{"path":"viz.html","id":"plot-setup","chapter":"3 Basic Data Visualisation","heading":"3.3.3 Plot setup","text":"Every plot starts ggplot() function data table. data loaded typo code, give error message. best check plot step can figure errors easily.","code":"\nggplot(data = survey_data)"},{"path":"viz.html","id":"mapping","chapter":"3 Basic Data Visualisation","heading":"3.3.4 Mapping","text":"next argument ggplot() mapping. tells plot columns data represented different \"aesthetics\" plot, x-axis, y-axis, line colour, object fill, line style.mapping argument requires aes() function can take arguments x y. Set names columns want plotted axes. , want plot wait time x-axis call time y-axis.often see two steps (setting mapping setting plot) combined like . put arguments right order, need use names, can put aes() function directly second argument. familiar plotting, shortcut make sense, use longer, clearer version start.","code":"\n# set up the mapping\nwait_vs_call <- aes(x = wait_time, \n                    y = call_time)\n\n# set up the plot\nggplot(data = survey_data, mapping = wait_vs_call)\nggplot(survey_data, aes(x = wait_time, y = call_time))"},{"path":"viz.html","id":"geoms","chapter":"3 Basic Data Visualisation","heading":"3.3.5 Geoms","text":"Now can add plot elements layers. referred geoms functions start geom_. add layers onto base plot created ggplot() plus (+).Somewhat annoyingly, plus end previous line, start next line. make mistake, get following error message.","code":"\nggplot(data = survey_data, mapping = wait_vs_call) +\n  geom_point() # scatterplot\ng <- ggplot(data = survey_data, mapping = wait_vs_call)\n  + geom_point() # scatterplot## Error: Cannot use `+.gg()` with a single argument. Did you accidentally put + on a new line?"},{"path":"viz.html","id":"multiple-geoms","chapter":"3 Basic Data Visualisation","heading":"3.3.6 Multiple Geoms","text":"can add one geom. display order set . code , make two different plots assign objects can add together using plot_layout() function patchwork package.","code":"\npoint_first <- \n  ggplot(data = survey_data, mapping = wait_vs_call) +\n  geom_point() + # scatterplot\n  geom_smooth(method = lm) # line of best fit\n  \nline_first <-\n  ggplot(data = survey_data, mapping = wait_vs_call) +\n  geom_smooth(method = lm) + # line of best fit\n  geom_point() # scatterplot\n\n# add plots together in 1 row\npoint_first + line_first + plot_layout(nrow = 1)## `geom_smooth()` using formula 'y ~ x'\n## `geom_smooth()` using formula 'y ~ x'"},{"path":"viz.html","id":"styling-geoms","chapter":"3 Basic Data Visualisation","heading":"3.3.7 Styling Geoms","text":"definitely put line front points, points still bit dark. want change overall style geom (use represent different levels variable), can set arguments inside geom function. See Appendix E information ways style plot aesthetics.Play around different values aesthetics . Figure default values shape size.","code":"\nggplot(data = survey_data, mapping = wait_vs_call) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2,\n             shape = 18,\n             size = 2) + \n  geom_smooth(method = lm, \n              formula = y~x, # default value; avoids annoying message\n              colour = rgb(0, .5, .8),\n              linetype = 3) "},{"path":"viz.html","id":"format-axes","chapter":"3 Basic Data Visualisation","heading":"3.3.8 Format Axes","text":"Now need make axes look neater. several functions can use change axis labels, powerful ones scale_ functions. need use scale function matches data plotting axis. axes continuous, use scale_x_continuous() scale_y_continuous().name argument changes axis label. breaks argument sets major units needs vector possible values, can extend beyond range data (e.g., wait time goes 350, can specify breaks 600). seq() function creates sequence numbers one another specified steps.Check help ?scale_x_continuous see set minor units specify many breaks want instead.can change axis text displays setting labels argument. change minutes instead seconds dividing labels 60.want change minimum maximum values axis, use limits argument. Many plots make sense minimum maximum values represent range possible values, even values present data. , wait call times less 0 seconds, set minimum values 0 maximum values 10 seconds highest value data.y-axis increments 30 seconds, make sure whole numbers also decimal place (e.g., \"1.0\" instead \"1\"), used format() function set number decimal places display.","code":"\n# set the breaks\nx_breaks <- seq(from = 0, to = 600, by = 60)\ny_breaks <- seq(from = 0, to = 600, by = 30)\n\nggplot(data = survey_data, mapping = wait_vs_call) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (seconds)\", \n                     breaks = x_breaks) +\n  scale_y_continuous(name = \"Call time (seconds)\",\n                     breaks = y_breaks)\nggplot(data = survey_data, mapping = wait_vs_call) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (minutes)\", \n                     breaks = x_breaks,\n                     labels = x_breaks/60) +\n  scale_y_continuous(name = \"Call time (minutes)\",\n                     breaks = y_breaks,\n                     labels = y_breaks/60)\n# set the axis limits\nxlim <- c(0, max(survey_data$wait_time) + 10)\nylim <- c(0, max(survey_data$call_time) + 10)\n\nggplot(data = survey_data, mapping = wait_vs_call) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (minutes)\", \n                     breaks = x_breaks,\n                     labels = x_breaks/60,\n                     limits = xlim) +\n  scale_y_continuous(name = \"Call time (minutes)\",\n                     breaks = y_breaks,\n                     labels = format(y_breaks/60, digits = 1),\n                     limits = ylim)"},{"path":"viz.html","id":"themes","chapter":"3 Basic Data Visualisation","heading":"3.3.9 Themes","text":"ggplot2 comes several built-themes, theme_minimal() theme_bw(), ggthemes package provides even themes match different software, GoogleDocs Stata, publications, Economist Wall Street Journal. add GoogleDocs theme, change font size 11 base_size argument change font \"Times\" base_family argument.","code":"\nggplot(data = survey_data, mapping = wait_vs_call) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (minutes)\", \n                     breaks = x_breaks,\n                     labels = x_breaks/60,\n                     limits = xlim) +\n  scale_y_continuous(name = \"Call time (minutes)\",\n                     breaks = y_breaks,\n                     labels = format(y_breaks/60, digits = 1),\n                     limits = ylim) +\n  ggthemes::theme_gdocs(base_size = 11, base_family = \"Times\")"},{"path":"viz.html","id":"theme-tweaks","chapter":"3 Basic Data Visualisation","heading":"3.3.10 Theme Tweaks","text":"still quite happy theme, can customise even themes() function. Check help function see possible options. common thing want remove element entirely. setting relevant argument element_blank(). , getting rid x-axis line plot background, removes line around plot.","code":"\nggplot(data = survey_data, mapping = wait_vs_call) +\n  geom_point(colour = \"dodgerblue\", \n             alpha = 0.2) + \n  geom_smooth(method = lm, \n              formula = y~x, \n              colour = rgb(0, .5, .8)) +\n  scale_x_continuous(name = \"Wait Time (minutes)\", \n                     breaks = x_breaks,\n                     labels = x_breaks/60,\n                     limits = xlim) +\n  scale_y_continuous(name = \"Call time (minutes)\",\n                     breaks = y_breaks,\n                     labels = format(y_breaks/60, digits = 1),\n                     limits = ylim) +\n  ggthemes::theme_gdocs(base_size = 11, base_family = \"Times\") +\n  theme(axis.line.x = element_blank(),\n        plot.background = element_blank())"},{"path":"viz.html","id":"appropriate-plots","chapter":"3 Basic Data Visualisation","heading":"3.4 Appropriate Plots","text":"ggplot2 cheat sheet great resource help find plots appropriate data. examples use customer satisfaction data, plot communicates something different.expect memorise plot types methods customising , helpful try code examples , changing values test understanding.","code":""},{"path":"viz.html","id":"counting-categories","chapter":"3 Basic Data Visualisation","heading":"3.4.1 Counting Categories","text":"want count number things per category, can use geom_bar().want customise things , like colours, order columns, labels. Inspect code figure things change. functions scale_fill_manual() scale_x_discrete() new, work way scale_ functions.","code":"\ncount_issues <- aes(x = issue_category)\n\nggplot(data = survey_data, mapping = count_issues) +\n  geom_bar()\n# gives each issue a different colour\ncount_issues <- aes(x = issue_category,\n                    fill = issue_category) \n\n# change the deafult order and colours\nnew_colors <- c(tech = \"goldenrod\", \n                returns = \"darkgreen\", \n                sales = \"dodgerblue3\", \n                other = \"purple3\")\nnew_order <- c(\"tech\", \"returns\", \"sales\", \"other\")\nnew_labels <- c(\"Technical\", \"Returns\", \"Sales\", \"Other\")\n\nggplot(data = survey_data, mapping = count_issues) +\n  geom_bar() +\n  scale_x_discrete(\n    name = \"Issue Category\", # change axis title\n    limits = new_order, # change order\n    labels = new_labels # change labels\n  ) +\n  scale_fill_manual(\n    values = new_colors, # change colours\n    guide = \"none\" # remove the legend\n  ) +\n  scale_y_continuous(\n    name = \"\", # remove axis title\n    # remove the space above and below the y-axis\n    expand = expansion(add = 0), \n    limits = c(0, 350) # minimum = 0, maximum = 350\n  ) +\n  ggtitle(\"Number of issues per category\") # add a title"},{"path":"viz.html","id":"continuous-distribution","chapter":"3 Basic Data Visualisation","heading":"3.4.2 Continuous Distribution","text":"continuous variable, like number seconds callers wait, can use geom_histogram() show distribution.\nFigure 3.3: Histogram wait times.\nalways set binwidth number bins something meaningful data (otherwise get annoying message). might need try options find something looks good conveys meaning plot; binwidth = 15 seems work well .default, bars start centered 0, first bar include -7.5 7.5 seconds, make much sense. can set boundary = 0 bar represents increments 15 seconds starting 0.default style grey bars ugly, can change setting fill colour.can also set custom x-axis called wait_x can reuse plots.\nFigure 3.4: Histogram custom styles.\n","code":"\nggplot(data = survey_data, mapping = aes(x = wait_time)) +\n  geom_histogram()## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n# set up x-axis \nwait_x <- scale_x_continuous(\n  name = \"Wait time (minutes)\",\n  breaks = seq(0, 600, 60),\n  labels = seq(0, 600, 60)/60,\n  limits = c(0, 360)\n)\n\n# style histogram\nggplot(data = survey_data, mapping = aes(x = wait_time)) +\n  geom_histogram(boundary = 0, binwidth = 15, \n                 fill = \"white\", color = \"black\") +\n  wait_x"},{"path":"viz.html","id":"grouped-continuous-distribution","chapter":"3 Basic Data Visualisation","heading":"3.4.3 Grouped Continuous Distribution","text":"can set fill aesthetic mapping show proportion bin comes category. default, categories positioned stacked top . function geom_area() gives similar effect stat = \"bin\".\nFigure 3.5: Stacked histogram.\nMake sure remove fill argument geom_histogram(), overwrite colours set mapping.want compare one distribution, can set position argument geom_histogram() \"dodge\", can look confusing several categories. can usegeom_freqpoly() plot line connecting top bin. choose depends point trying make plot.\nFigure 3.6: Different ways plot distribution continuous variable multiple groups.\n","code":"\n# set fill by issue category\nwait_by_issue <- aes(x = wait_time, fill = issue_category)\n\n# stacked histogram\nhistogram_stack <- ggplot(data = survey_data, mapping = wait_by_issue) +\n  geom_histogram(boundary = 0, \n                 binwidth = 15, \n                 color = \"black\") +\n  wait_x + \n  ggtitle(\"Stacked Histogram\")\n\n# area plot\narea_plot <- ggplot(data = survey_data, mapping = wait_by_issue) +\n  geom_area(stat = \"bin\", \n            boundary = 0, \n            binwidth = 15, \n            color = \"black\",\n            show.legend = FALSE) +\n  wait_x +\n  ggtitle(\"Area\")\n\nhistogram_stack + area_plot + \n  plot_layout(nrow = 1, guides = \"collect\")\n# set both fill and colour to differ by issue category\nwait_by_issue <- aes(x = wait_time, \n                     fill = issue_category, \n                     colour = issue_category)\n\n# dodged histogram\nhistogram_dodge <- ggplot(data = survey_data, mapping = wait_by_issue) +\n  geom_histogram(boundary = 0, \n                 binwidth = 15, \n                 position = \"dodge\") +\n  wait_x + \n  ggtitle(\"Dodged Histogram\")\n\n# frequency plot\nfreqpoly_plot <- ggplot(data = survey_data, mapping = wait_by_issue) +\n  geom_freqpoly(binwidth = 15, \n                boundary = 0,\n                size = 1) +\n  wait_x +\n  ggtitle(\"Frequency\")\n\n# paste the three plots together\nhistogram_dodge + freqpoly_plot + \n  plot_layout(nrow = 1, guides = \"collect\")## Warning: Removed 8 row(s) containing missing values (geom_path)."},{"path":"viz.html","id":"two-continuous-distributions","chapter":"3 Basic Data Visualisation","heading":"3.4.4 Two Continuous Distributions","text":"want see two continuous variables related, set one x-axis y-axis. Usually, one variable causes , plot cause x-axis effect y-axis. , want see longer wait times cause calls longer.\nFigure 3.7: Different ways show relationship two continuous variables.\n","code":"\nwait_by_call <- aes(x = wait_time,\n                    y = call_time)\n\n# assign the base plot to a variable to use later\ng <- ggplot(data = survey_data, mapping = wait_by_call)\n\ng + geom_point()\npoint_plot <- g +\n  geom_point(alpha = 0.2) +\n  ggtitle(\"Point Plot\")\n\nsmooth_plot <- g +\n  geom_smooth(method = \"loess\", formula = y~x) +\n  ggtitle(\"Smooth\")\n\nlm_plot <- g +\n  geom_smooth(method = lm, formula = y~x) +\n  ggtitle(\"Linear\")\n\ncombo_plot <- g +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = lm, formula = y~x) +\n  ggtitle(\"Combo\")\n\npoint_plot + smooth_plot + lm_plot + combo_plot"},{"path":"viz.html","id":"dates","chapter":"3 Basic Data Visualisation","heading":"3.4.5 Dates","text":"call_start column contains date time, use date() function lubridate convert just date. need able transform x-axis .can use scale_x_date() set date_breaks \"1 month\" apart. date_labels use code different date formats, can see help ?strptime. example, can change dates format like \"2020/01/31\" formatting string \"%Y/%m/%d\".looks like customer satisfaction declined bit first half year, change meaningful? See plot looks like y-axis spans full range possible satisfaction values 1 5.","code":"\nsatisfaction_by_date <- aes(x = lubridate::date(call_start),\n                            y = satisfaction)\n\n# assign the base plot to a variable to use later\ng <- ggplot(data = survey_data, mapping = satisfaction_by_date)\n\ng + geom_smooth(method = lm,  formula = y~x)\ng + geom_smooth(method = lm,  formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Caller Satisfaction\") +\n  ggtitle(\"2020 Caller Satisfaction\")\ng + geom_smooth(method = lm,  formula = y~x) +\n  scale_x_date(name = \"\",\n               date_breaks = \"1 month\", \n               date_labels = \"%b\") +\n  scale_y_continuous(name = \"Caller Satisfaction\",\n                     breaks = 1:5,\n                     limits = c(1, 5)) +\n  ggtitle(\"2020 Caller Satisfaction\")"},{"path":"viz.html","id":"glossary-viz","chapter":"3 Basic Data Visualisation","heading":"3.5 Glossary","text":"","code":""},{"path":"viz.html","id":"resources-viz","chapter":"3 Basic Data Visualisation","heading":"3.6 Further Resources","text":"Data visualisation using R, researchers use R (Nordmann et al., 2021)Chapter 3: Data Visualisation R Data Scienceggplot2 cheat sheetggplot2 FAQsChapter 28: Graphics communication R Data ScienceLook Data Data Vizualization Social ScienceHack Data Beautiful workshop University Glasgow postgraduate studentsGraphs Cookbook Rggplot2 documentationThe R Graph Gallery (really useful)Top 50 ggplot2 VisualizationsR Graphics Cookbook Winston Changggplot extensionsplotly creating interactive graphs","code":""},{"path":"data.html","id":"data","chapter":"4 Data Import and Relations","heading":"4 Data Import and Relations","text":"","code":""},{"path":"data.html","id":"ilo-data","chapter":"4 Data Import and Relations","heading":"4.1 Intended Learning Outcomes","text":"able import data range sources using rio::import()able identify handle common problems data importBe able match related data multiple tablesYou'll learn following functions chapter:data()rio::inport()readr::read_tsv()readr::read_csv()readxl::read_excel()haven::read_sav()readr::cols()readr::col_character()readr::col_double()readr::col_logical()readr::col_date()","code":"\nlibrary(tidyverse) # includes readr\nlibrary(rio)\nlibrary(haven)\nlibrary(readxl)"},{"path":"data.html","id":"data-import","chapter":"4 Data Import and Relations","heading":"4.2 Data Import","text":"lesson, please download directory data files used class.","code":""},{"path":"data.html","id":"builtin","chapter":"4 Data Import and Relations","heading":"4.2.1 Built-in data","text":"R comes built-datasets. packages, like tidyr, also contain data. data() function lists datasets available package.Type name dataset console see data. Type ?table1 console see dataset description.can also use data() function load dataset global environment.","code":"\n# lists datasets in tidyr\ndata(package = \"tidyr\")\n?table1\n# loads table1 into the environment\ndata(\"table1\")"},{"path":"data.html","id":"import_data","chapter":"4 Data Import and Relations","heading":"4.2.2 Importing data","text":"Built-data nice examples, probably interested data. many different types files might work data analysis. different file types usually distinguished three letter extension following period end file name.","code":""},{"path":"data.html","id":"rioimport","chapter":"4 Data Import and Relations","heading":"4.2.2.1 rio::import()","text":"rio package straightforward functions reading saving data: rio::import() rio::export().","code":"\ndemo_tsv  <- import(\"data/demo.tsv\") # tab-separated values\ndemo_csv  <- import(\"data/demo.csv\") # comma-separated values\ndemo_xls  <- import(\"data/demo.xlsx\") # Excel format\ndemo_sav  <- import(\"data/demo.sav\") # SPSS format"},{"path":"data.html","id":"file-type-specific-import-functions","chapter":"4 Data Import and Relations","heading":"4.2.2.2 File type specific import functions","text":"However, also useful know specific functions used import different file types tend features deal complicated cases, need skip rows, rename columns, choose Excel sheet use.readr functions display message import data explaining data type column .makes mistake, reading \"date\" column character, can manually set column data types. Just copy \"Column specification\" printed first imported data, make changes need.dates, might need set format. See ?strptime list codes used represent different date formats. , \"%d-%b-%y\" means dates formatted like {day number}-{month abbreviation}-{2-digit year}.","code":"\ndemo_tsv  <- readr::read_tsv(\"data/demo.tsv\")\ndemo_csv  <- readr::read_csv(\"data/demo.csv\")\ndemo_xls <- readxl::read_excel(\"data/demo.xlsx\")\ndemo_sav  <- haven::read_sav(\"data/demo.sav\")\ndemo <- readr::read_csv(\"data/demo.csv\")## \n## ── Column specification ────────────────────────────────────────────────────────\n## cols(\n##   character = col_character(),\n##   integer = col_double(),\n##   double = col_double(),\n##   logical = col_logical(),\n##   date = col_character()\n## )\nct <- cols(\n  character = col_character(),\n  integer = col_double(),\n  double = col_double(),\n  logical = col_logical(),\n  date = col_date(format = \"%d-%b-%y\")\n)\n\ndemo  <- readr::read_csv(\"data/demo.csv\", col_types = ct)"},{"path":"data.html","id":"google-sheets","chapter":"4 Data Import and Relations","heading":"4.2.2.3 Google Sheets","text":"keep data Google Sheets, can access directly R using googlesheets4.","code":"\nlibrary(googlesheets4)\n\ngs4_deauth() # skip authorisation for public data\n\nurl <- \"https://docs.google.com/spreadsheets/d/1yhAPP0hk6fNssL9UdpJ7m_vx00VY5PQKHspx6DNQNSY/\"\n\ndemo_goo  <- googlesheets4::read_sheet(url)"},{"path":"data.html","id":"looking-at-data","chapter":"4 Data Import and Relations","heading":"4.2.3 Looking at data","text":"Now loaded data, look upper right hand window RStudio, Environment tab. see objects listed, along number observations (rows) variables (columns). first check everything went OK.Always, always, always, look data created loaded table. Also look step transforms table. three main ways look table: View(), print(), tibble::glimpse().","code":""},{"path":"data.html","id":"view","chapter":"4 Data Import and Relations","heading":"4.2.3.1 View()","text":"familiar way look table given View() (uppercase 'V'). command can useful console, ever put one script create annoying pop-window user runs . can click objects environment pane open viewer looks bit like Excel. can close tab done looking ; remove object.","code":""},{"path":"data.html","id":"print","chapter":"4 Data Import and Relations","heading":"4.2.3.2 print()","text":"print() method can run explicitly, commonly called just typing variable name blank line. default print entire table, just first 10 rows.look demo_tsv table loaded . Depending wide screen , might need click arrow right table see last column.","code":"\ndemo_tsv"},{"path":"data.html","id":"glimpse","chapter":"4 Data Import and Relations","heading":"4.2.3.3 glimpse()","text":"function tibble::glimpse() gives sideways version table. useful table wide see columns. also tells data type column angled brackets column name. can learn data types Appendix D.","code":"\nglimpse(demo_xls)## Rows: 6\n## Columns: 5\n## $ character <chr> \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n## $ integer   <dbl> 1, 2, 3, 4, 5, 6\n## $ double    <dbl> 1.5, 2.5, 3.5, 4.5, 5.5, 6.5\n## $ logical   <lgl> TRUE, TRUE, FALSE, FALSE, NA, TRUE\n## $ date      <chr> \"20-Sep-21\", \"19-Sep-21\", \"18-Sep-21\", \"17-Sep-21\", \"16-Sep-…"},{"path":"data.html","id":"summary-function","chapter":"4 Data Import and Relations","heading":"4.2.3.4 summary()","text":"can get quick summary dataset summary() function.","code":"\nsummary(demo_sav)##   character            integer         double        logical   \n##  Length:6           Min.   :1.00   Min.   :1.50   Min.   :0.0  \n##  Class :character   1st Qu.:2.25   1st Qu.:2.75   1st Qu.:0.0  \n##  Mode  :character   Median :3.50   Median :4.00   Median :1.0  \n##                     Mean   :3.50   Mean   :4.00   Mean   :0.6  \n##                     3rd Qu.:4.75   3rd Qu.:5.25   3rd Qu.:1.0  \n##                     Max.   :6.00   Max.   :6.50   Max.   :1.0  \n##                                                   NA's   :1    \n##      date          \n##  Length:6          \n##  Class :character  \n##  Mode  :character  \n##                    \n##                    \n##                    \n## "},{"path":"data.html","id":"creating-data","chapter":"4 Data Import and Relations","heading":"4.2.4 Creating data","text":"creating small data table scratch, can use tibble::tibble() function, type data right . tibble package part tidyverse package loaded start chapter.create small table names three Avatar characters bending type. tibble() function takes arguments names want columns . values vectors list column values order.know value one cells, can enter NA, Sokka bending ability. values column , can just enter one value copied row.can also use tibble::tribble() function create table row, rather column. start listing column names, preceded tilde (~), list values column, row row, separated commas (forget comma end row).line columns tribble like , can make easier spot errors.","code":"\navatar <- tibble(\n  name = c(\"Katara\", \"Toph\", \"Sokka\"),\n  bends = c(\"water\", \"earth\", NA),\n  friendly = TRUE\n)\n\n# print it\navatar\navatar_by_row <- tribble(\n  ~name,    ~bends,  ~friendly,\n  \"Katara\", \"water\", TRUE,\n  \"Toph\",   \"earth\", TRUE,\n  \"Sokka\",  NA,      TRUE\n)"},{"path":"data.html","id":"writing-data","chapter":"4 Data Import and Relations","heading":"4.2.5 Writing data","text":"data want save CSV file, use rio::export(), follows.save data CSV format working directory.Writing Google Sheets little trickier. Even Google Sheet publicly editable, add data without authorising account.can authorise interactively using following code (email), prompt authorise \"Tidyverse API Packages\" first time .Create new table called family first name, last name, age family members.Save CSV file called \"family.csv\".Clear object environment restarting R code remove(family).Load data back view .working tabular data lot class, tabular data made vectors, groups together data basic data type. Appendix D explains terminology help understand functions learning process analyse data.","code":"\nexport(avatar, \"data/avatar.csv\")\ngs4_auth(email = \"debruine@gmail.com\")\nsheet_id <- gs4_create(\"demo-file\", sheets = demo)\n\nnew_data <- tibble(\n  character = \"Z\",\n  integer = 0L,\n  double = 0.5,\n  logical = FALSE,\n  date = \"01-Jan-00\"\n)\n\nsheet_append(sheet_id, new_data)\ndemo <- read_sheet(sheet_id)\n# create the table\nfamily <- tribble(\n  ~first_name, ~last_name, ~age,\n  \"Lisa\", \"DeBruine\", 45,\n  \"Robbie\", \"Jones\", 14\n)\n\n# save the data to CSV\nexport(family, \"data/family.csv\")\n\n# remove the object from the environment\nremove(family)\n\n# load the data\nfamily <- import(\"data/family.csv\")"},{"path":"data.html","id":"troubleshooting","chapter":"4 Data Import and Relations","heading":"4.2.6 Troubleshooting","text":"import data guesses wrong column type? common reason numeric column non-numbers somewhere. Maybe someone wrote note otherwise numeric column. Columns one data type, characters, whole column converted character strings, numbers like 1.2 get represented \"1.2\", cause weird errors like \"100\" < \"9\" == TRUE. can catch using glimpse() check data.data directory downloaded contains file called \"mess.csv\". try loading dataset.importing goes wrong, often easier fix using specific importing function file type. problems tend specific file format can look help functions easily. CSV files, import function readr::read_csv.get warning many parsing errors mess just single row. View file data/mess.csv clicking File pane, choosing \"View File\". first 10 lines. went wrong?First, file starts note: \"messy dataset\". want skip first two lines. can argument skip read_csv().OK, little better, table still serious mess several ways:junk column needorder integer columngood logical columngood uses kinds different ways record TRUE FALSE valuesmin_max contains two pieces numeric information, character columndate date columnWe'll learn deal mess Chapters 5 6, can fix things setting col_types argument read_csv() specify column types two columns guessed wrong skip \"junk\" column. argument col_types takes list name item list column name value table . can use function, like col_double() abbreviation, like \"l\". Omitted column names guessed.get message \"1 parsing failure\" run . Warnings look scary first, always start reading message. table tells row (2) column (order) error found , kind data expected (integer), actual value (\"missing\"). specifically tell read_csv() import column integer, characters column produce warning like recorded NA. can manually set missing values recorded na argument.Now order integer \"missing\" now NA, good logical value, 0 F converted FALSE 1 T converted TRUE, date date type (adding leading zeros day). learn later chapters fix problems, min_max column containing two different types data.","code":"\nmess <- import(\"data/mess.csv\")## Warning in (function (input = \"\", file = NULL, text = NULL, cmd = NULL, :\n## Stopped early on line 5. Expected 7 fields but found 0. Consider fill=TRUE\n## and comment.char=. First discarded non-empty line: <<junk,missing,0.72,b,1,2 -\n## 3,2020-01-2>>\nmess <- read_csv(\"data/mess.csv\")## \n## ── Column specification ────────────────────────────────────────────────────────\n## cols(\n##   `This is my messy dataset` = col_character()\n## )## Warning: 27 parsing failures.\n## row col  expected    actual            file\n##   1  -- 1 columns 7 columns 'data/mess.csv'\n##   2  -- 1 columns 7 columns 'data/mess.csv'\n##   3  -- 1 columns 7 columns 'data/mess.csv'\n##   4  -- 1 columns 7 columns 'data/mess.csv'\n##   5  -- 1 columns 7 columns 'data/mess.csv'\n## ... ... ......... ......... ...............\n## See problems(...) for more details.This is my messy dataset\n\njunk,order,score,letter,good,min_max,date\njunk,1,-1,a,1,1 - 2,2020-01-1\n\njunk,missing,0.72,b,1,2 - 3,2020-01-2\n\njunk,3,-0.62,c,FALSE,3 - 4,2020-01-3\n\njunk,4,2.03,d,T,4 - 5,2020-01-4\nmess <- read_csv(\"data/mess.csv\", skip = 2)## \n## ── Column specification ────────────────────────────────────────────────────────\n## cols(\n##   junk = col_character(),\n##   order = col_character(),\n##   score = col_double(),\n##   letter = col_character(),\n##   good = col_character(),\n##   min_max = col_character(),\n##   date = col_character()\n## )\nmess\n# omitted values are guessed\n# ?col_date for format options\nct <- list(\n  junk = \"-\", # skip this column\n  order = \"i\",\n  good = \"l\",\n  date = col_date(format = \"%Y-%m-%d\")\n)\n\ntidier <- read_csv(\"data/mess.csv\", \n                   skip = 2,\n                   col_types = ct)## Warning: 1 parsing failure.\n## row   col   expected  actual            file\n##   2 order an integer missing 'data/mess.csv'\ntidiest <- read_csv(\"data/mess.csv\", \n                   skip = 2,\n                   na = \"missing\",\n                   col_types = ct)\ntidiest"},{"path":"data.html","id":"data-relations","chapter":"4 Data Import and Relations","heading":"4.3 Data Relations","text":"First, create two small data tables.customer id, gender age customers 1-5. Age gender missing customer 3.orders customer id number items ordered. customers orders, one order, customer table.","code":"\ncustomers <- tibble(\n  id = 1:5,\n  gender = c(\"m\", \"m\", NA, \"nb\", \"f\"),\n  age = c(19, 22, NA, 19, 18)\n)\norders <- tibble(\n  id = c(2, 3, 4, 4, 5, 5, 6, 6, 7),\n  items = c(10, 18, 21, 23, 9, 11, 11, 12, 3)\n)"},{"path":"data.html","id":"mutating-joins","chapter":"4 Data Import and Relations","heading":"4.3.1 Mutating Joins","text":"Mutating joins act like dplyr::mutate() function add new columns one table based values another table.mutating joins basic syntax:****_join(x, y, = NULL, suffix = c(\".x\", \".y\")x = first (left) tabley = second (right) tableby = columns match . leave blank, match columns names two tables.suffix = columns name two tables, joining , get suffix make unambiguous. defaults \".x\" \".y\", can change something meaningful.can leave argument matching columns name, good practice always specify code robust changes loaded data.","code":""},{"path":"data.html","id":"left_join","chapter":"4 Data Import and Relations","heading":"4.3.1.1 left_join()","text":"left_join keeps data first (left) table joins anything matches second (right) table. right table one match row right table, one row joined table (see ids 4 5).order tables swapped , result rows orders table joined matching rows customers table.","code":"\nleft_join(customers, orders, by = \"id\")\nleft_join(orders, customers, by = \"id\")"},{"path":"data.html","id":"right_join","chapter":"4 Data Import and Relations","heading":"4.3.1.2 right_join()","text":"right_join keeps data second (right) table joins anything matches first (left) table.table information left_join(orders, customers, = \"id\"), columns different order (left table, right table).","code":"\nright_join(customers, orders, by = \"id\")"},{"path":"data.html","id":"inner_join","chapter":"4 Data Import and Relations","heading":"4.3.1.3 inner_join()","text":"inner_join returns rows match table.","code":"\ninner_join(customers, orders, by = \"id\")"},{"path":"data.html","id":"full_join","chapter":"4 Data Import and Relations","heading":"4.3.1.4 full_join()","text":"full_join lets join rows two tables keeping information tables. row match table, table's column values set NA.","code":"\nfull_join(customers, orders, by = \"id\")"},{"path":"data.html","id":"filtering-joins","chapter":"4 Data Import and Relations","heading":"4.3.2 Filtering Joins","text":"Filtering joins act like filter() function remove rows data one table based values another table. result filtering join contain rows left table number fewer rows left table.","code":""},{"path":"data.html","id":"semi_join","chapter":"4 Data Import and Relations","heading":"4.3.2.1 semi_join()","text":"semi_join returns rows left table matching values right table, keeping just columns left table.Unlike inner join, semi join never duplicate rows left table one matching row right table.Order matters semi join.","code":"\nsemi_join(customers, orders, by = \"id\")\nsemi_join(orders, customers, by = \"id\")"},{"path":"data.html","id":"anti_join","chapter":"4 Data Import and Relations","heading":"4.3.2.2 anti_join()","text":"anti_join return rows left table matching values right table, keeping just columns left table.Order matters anti join.","code":"\nanti_join(customers, orders, by = \"id\")\nanti_join(orders, customers, by = \"id\")"},{"path":"data.html","id":"binding-joins","chapter":"4 Data Import and Relations","heading":"4.3.3 Binding Joins","text":"Binding joins bind one table another adding rows columns together.","code":""},{"path":"data.html","id":"bind_rows","chapter":"4 Data Import and Relations","heading":"4.3.3.1 bind_rows()","text":"can combine rows two tables bind_rows.add customer data customers 6-9 bind original customer table.columns just names, order. columns differ two tables just NA values entries table.row duplicated two tables (like id 5 ), row also duplicated resulting table. tables exact columns, can use union() (see ) avoid duplicates.","code":"\nnew_customers <- tibble(\n  id = 6:9,\n  gender = c(\"nb\", \"m\", \"f\", \"f\"),\n  age = c(19, 16, 20, 19)\n)\n\nbind_rows(customers, new_customers)\nnew_customers <- tibble(\n  id = 5:9,\n  age = c(18, 19, 16, 20, 19),\n  gender = c(\"f\", \"nb\", \"m\", \"f\", \"f\"),\n  new = c(1,2,3,4,5)\n)\n\nbind_rows(customers, new_customers)"},{"path":"data.html","id":"bind_cols","chapter":"4 Data Import and Relations","heading":"4.3.3.2 bind_cols()","text":"can merge two tables number rows using bind_cols. useful two tables rows exact order. advantage left join tables IDs join rely solely order.","code":"\nnew_info <- tibble(\n  colour = c(\"red\", \"orange\", \"yellow\", \"green\", \"blue\")\n)\n\nbind_cols(customers, new_info)"},{"path":"data.html","id":"set-operations","chapter":"4 Data Import and Relations","heading":"4.3.4 Set Operations","text":"Set operations compare two tables return rows match (intersect), either table (union), one table (setdiff).","code":""},{"path":"data.html","id":"intersect","chapter":"4 Data Import and Relations","heading":"4.3.4.1 intersect()","text":"intersect() returns rows two tables match exactly. columns order.forgotten load dplyr tidyverse, base R also intersect() function. error message can confusing looks something like :","code":"\nnew_customers <- tibble(\n  id = seq(4, 9),\n  age = c(19, 18, 19, 16, 20, 19),\n  gender = c(\"f\", \"f\", \"m\", \"m\", \"f\", \"f\")\n)\n\nintersect(customers, new_customers)\nbase::intersect(customers, new_customers)## Error: Must subset rows with a valid subscript vector.\n## ℹ Logical subscripts must match the size of the indexed input.\n## x Input has size 6 but subscript `!duplicated(x, fromLast = fromLast, ...)` has size 0."},{"path":"data.html","id":"union","chapter":"4 Data Import and Relations","heading":"4.3.4.2 union()","text":"union() returns rows tables, removing duplicate rows.forgotten load dplyr tidyverse, base R also union() function. usually get error message, output expect.","code":"\nunion(customers, new_customers)\nbase::union(customers, new_customers)## [[1]]\n## [1] 1 2 3 4 5\n## \n## [[2]]\n## [1] \"m\"  \"m\"  NA   \"nb\" \"f\" \n## \n## [[3]]\n## [1] 19 22 NA 19 18\n## \n## [[4]]\n## [1] 4 5 6 7 8 9\n## \n## [[5]]\n## [1] 19 18 19 16 20 19\n## \n## [[6]]\n## [1] \"f\" \"f\" \"m\" \"m\" \"f\" \"f\""},{"path":"data.html","id":"setdiff","chapter":"4 Data Import and Relations","heading":"4.3.4.3 setdiff()","text":"setdiff returns rows first table, second table.Order matters setdiff.forgotten load dplyr tidyverse, base R also setdiff() function. usually get error message, output might expect base R setdiff() expects columns order, id 5 registers different two tables.","code":"\nsetdiff(customers, new_customers)\nsetdiff(new_customers, customers)\nbase::setdiff(customers, new_customers)"},{"path":"data.html","id":"glossary-data","chapter":"4 Data Import and Relations","heading":"4.4 Glossary","text":"","code":""},{"path":"data.html","id":"resources-data","chapter":"4 Data Import and Relations","heading":"4.5 Further resources","text":"Data import cheatsheetData transformation heatsheetChapter 11: Data Import R Data ScienceChapter 13: Relational Data R Data Science","code":""},{"path":"data.html","id":"exercises-data","chapter":"4 Data Import and Relations","heading":"4.6 Exercises","text":"","code":""},{"path":"tidy.html","id":"tidy","chapter":"5 Data Tidying","heading":"5 Data Tidying","text":"","code":""},{"path":"tidy.html","id":"ilo-tidy","chapter":"5 Data Tidying","heading":"5.1 Intended Learning Outcomes","text":"able change data long wide formatsSeparate, mutate, reorder, rename columnsUse pipes chain together functionsYou'll learn following functions chapter:`tidyr::pivot_longer()'tidyr::pivot_wider()tidyr::separate()dplyr::select()dplyr::mutate()readr::type_convert()stringr::str_replace_all()tidyr::starts_with()%>%","code":"\nlibrary(tidyverse) # functions from tidyr, dplyr, readr, stringr, and pipes\nlibrary(readxl)"},{"path":"tidy.html","id":"data-structure","chapter":"5 Data Tidying","heading":"5.2 Data Structure","text":"observation information single \"thing\" single point time. things can customers, sales, orders, feedback questionnaires, tweets, really anything. Observations way identify , unique ID combination variable values.variable one type information observation. example, observation sale, variables might sale sale ID, customer's ID, date sale, price paid, method payment.value data one variable one observation. example, value date variable observation sale might 2021-08-20.three rules \"tidy data\", data format makes easier combine data different tables, create summary tables, visualise data.observation must rowEach variable must columnEach value must cell","code":""},{"path":"tidy.html","id":"untidy-data","chapter":"5 Data Tidying","heading":"5.2.1 Untidy data","text":"table three observations per row (one customer's orders 2018, 2019, 2020) itemsprice_{year} columns contain two values (number items price per item).\nTable 5.1: Untidy table\nsay wanted calculate total price per customer three years total number items bought per customer. perform mathematical operations itemsprice_{year} columns character data types.probably normally use Excel tosplit itemsprice_2018 columns item_2018 price_2018 columnssplit itemsprice_2019 columns item_2019 price_2019 columnssplit itemsprice_2020 columns item_2018 price_2020 columnsadd item_2018 + item_2019 + item_2020 get total number items bought per customeradd totalprice_2018 + totalprice_2019 + totalprice_2020 get total price per customerThink many steps Excel 10 years table, different number years time encountered data like .","code":""},{"path":"tidy.html","id":"tidy-data","chapter":"5 Data Tidying","heading":"5.2.2 Tidy data","text":"tidy version, row customer's orders particular year. number items (items) price per item (price_per_item) separate columns, now can perform mathematical operations .\nTable 5.1: Tidy table\ncalculate total price per customer three years total number items bought per customer R, need :group table customer_idsum items column get total number items bought per customersum totalprice column get total price per customerIf 10 years table, different number years time encountered data like , code producing table never changes.control data recorded, make life easier record tidy format start. However, always control, class also teach convert untidy table tidy tables.","code":"\ntidy_data <- read_csv(\"data/tidy_data.csv\")\n\n# we'll learn about these functions later\ntidy_data %>%\n  group_by(customer_id) %>%\n  summarise(\n    total_items = sum(items),\n    total_price = sum(totalprice)\n  )"},{"path":"tidy.html","id":"reshaping-data","chapter":"5 Data Tidying","heading":"5.3 Reshaping Data","text":"Data tables can wide format long format (mix two). Wide data observations one thing row, long data observation separate row. often need convert formats different types summaries visualisation.look just totalprice data untidy table . can select just columns want using dplyr::select() function. function's first argument data table want select , argument either name column table, new_name = old_name. useful function changing column names order columns, well selecting subset columns.\nTable 5.2: Wide data\nwide format, row customer, represents data several years. really intuitive way humans read table, easy computer process .data can represented long format creating new column specifies item observation new column specifies value observation. easier use make summaries plots.\nTable 5.3: Long data\nCreate long version following table. need use code, just sketch notebook make table spreadsheet.answer need column headers order.pivot functions allow transform data table wide long long wide.","code":"\n# select just the customer ID and 3 total price columns\nuntidy_price <- select(\n  .data = untidy_data,\n  customer_id, \n  `2018` = totalprice_2018,\n  `2019` = totalprice_2019,\n  `2020` = totalprice_2020\n)"},{"path":"tidy.html","id":"wide-to-long","chapter":"5 Data Tidying","heading":"5.3.0.1 Wide to long","text":"function pivot_longer() converts wide data table longer format converting headers specified columns values new columns, combining values columns new condensed column.function several arguments:cols: columns want make long; can refer names, like c(`2018`, `2019`, `2020`) `2018`:`2020` numbers, like c(2, 3, 4) 2:4names_to: want call new columns cols column header names go intovalues_to: want call new column contains values cols\nTable 5.4: Data made longer pivot_longer()\n","code":"\nuntidy_price_long <- pivot_longer(\n  data = untidy_price, \n  cols = `2018`:`2020`, # columns to make long \n  names_to = \"year\", # new column name for headers\n  values_to = \"totalprice\" # new column name for values\n)"},{"path":"tidy.html","id":"long-to-wide","chapter":"5 Data Tidying","heading":"5.3.0.2 Long to wide","text":"can also go long wide format using pivot_wider() function.names_from: columns contain new column headers.values_from: column contains values new columns.names_sep:character string used join names names_from one column.\nTable 5.5: Data made wider pivot_wider()\n","code":"\nuntidy_price_wide <- pivot_wider(\n  data = untidy_price_long,\n  names_from = year,\n  values_from = totalprice\n)"},{"path":"tidy.html","id":"multi-step-tidying","chapter":"5 Data Tidying","heading":"5.4 Multi-step tidying","text":"often need go wide, long, intermediate shape order get data format useful plotting, column variable want represent aesthetic.full untidy_data table seven columns: customer ID, three columns itemsprice 3 columns totalprice.want get tidy format row observation one customer per year, columns customer_id, year, item, price_per_item totalprice.","code":""},{"path":"tidy.html","id":"one-observation-per-row","chapter":"5 Data Tidying","heading":"5.4.1 One observation per row","text":"original table observations customer three years. many observations per row, first start making table long. need make 6 rows customer, one variable-year combo, columns customer ID, year, variable, value.combining columns numeric character data type, need make new value column character data type using values_transform, since numbers can represented characters (like \"3.5\"), character strings represented numbers.\nTable 5.6: Untidy data converted wide long.\n","code":"\nlonger_data <- pivot_longer(\n  data = untidy_data, \n  cols = itemsprice_2018:totalprice_2020, # columns to make long \n  names_to = c(\"category\", \"year\"),       # new column names for cols\n  names_sep = \"_\",                        # how to split cols into new columns\n  # names_pattern = \"(.*)_(.*)\", # alternative to names_sep\n  values_to = \"value\", # new column name for values\n  \n  # make sure new columns are the right data type\n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n)"},{"path":"tidy.html","id":"one-variable-per-column","chapter":"5 Data Tidying","heading":"5.4.2 One variable per column","text":"Now value column contains data two different variables. need make table wider, wide . want keep year column make new columns called itemsprice totalprice relevant customer's value variable year.\nTable 5.7: Data converted long intermediate shape.\n","code":"\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)"},{"path":"tidy.html","id":"one-value-per-cell","chapter":"5 Data Tidying","heading":"5.4.3 One value per cell","text":"cells itemsprice column actually contain two different values. need split two columns variables items, price_per_item. can split column parts function tidyr::separate().\nTable 2.1: itemsprice column split items price_per_item using separate()\nnew columns different data type old column, set convert = TRUE automatically fix . common columns contain multiple numbers, separated commas semicolons. character types separated, numeric types can mathematical operations like sum .","code":"\nsplit_data <- separate(\n  data = wider_data, \n  col = itemsprice, # the column to split\n  into = c(\"items\", \"price_per_item\"), # the new columns to create\n  sep = \" \", # how to split col\n  remove = TRUE, # whether to remove to old col\n  convert = TRUE # whether to fix the data type of the new columns\n)"},{"path":"tidy.html","id":"altering-data","chapter":"5 Data Tidying","heading":"5.4.4 Altering data","text":"column price_per_item still character column parentheses. ways fix . can use dplyr::mutate() function change column add new one., use stringr::str_replace_all() replace \"(\" \")\" \"\".\nTable 5.8: Mutating data remove parentheses price_per_item.\n","code":"\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", \n    replacement = \"\"\n  )\n)"},{"path":"tidy.html","id":"fixing-data-types","chapter":"5 Data Tidying","heading":"5.4.5 Fixing data types","text":"price_per_item totalprice columns still characters, things like calculate sum totalprice.data clean tidy, can fix column data types one step using readr::type_convert(). good practice finished cleaning data set. automatic type detection work expected, usually means still non-numeric characters column supposed numbers. can also manually set column types way readr::read_csv()","code":"\n# check the data types\nglimpse(mutated_data)## Rows: 15\n## Columns: 5\n## $ customer_id    <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n## $ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n## $ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n## $ price_per_item <chr> \"3.91\", \"4.72\", \"5.59\", \"3.91\", \"4.72\", \"5.59\", \"3.91\",…\n## $ totalprice     <chr> \"7.82\", \"37.76\", \"55.9\", \"3.91\", \"28.32\", \"5.59\", \"15.6…\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE, # removes spaces before and after values\n)\n\n# check the data types\nglimpse(tidy_data)## Rows: 15\n## Columns: 5\n## $ customer_id    <int> 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5\n## $ year           <int> 2018, 2019, 2020, 2018, 2019, 2020, 2018, 2019, 2020, 2…\n## $ items          <int> 2, 8, 10, 1, 6, 1, 4, 5, 5, 10, 1, 3, 3, 9, 8\n## $ price_per_item <dbl> 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3.91, 4.72, 5.59, 3…\n## $ totalprice     <dbl> 7.82, 37.76, 55.90, 3.91, 28.32, 5.59, 15.64, 23.60, 27…"},{"path":"tidy.html","id":"pipes","chapter":"5 Data Tidying","heading":"5.5 Pipes","text":"Pipes way order code readable format.can always create new object every step use object next step, like . pretty clear, created several unnecessary data objects environment. can get confusing long scripts.can name object data keep replacing old data object new one step. keep environment clean, recommend makes easy accidentally run code order running line--line development debugging.One way avoid extra objects nest functions, literally replacing data object code generated previous step. can fine short chains.gets extremely confusing long chains:pipe lets \"pipe\" result function next function, allowing put code logical order without creating many extra objects. default, result previous function becomes first argument next function. tidyverse functions take data table first argument, pipe together easily.example, instead making table called untidy_data reading csv file, making new table called totalprice_data selecting customer_id totalprice_{year} columns untidy_data...... can just make one table called totalprice_data reading csv file piping resulting table select() function.Notice longer need specify .data argument. Add back see happens. common error converting code using separate variables using pipeline, learn identify quickly.longer series steps like one , using pipes can eliminate many intermediate objects. also makes easier add intermediate step process without think new table name edit table input next step.can read code like :Read data (read_csv())\nfile: file r path(\"data/untidy_data.csv\")`; \nfile: file r path(\"data/untidy_data.csv\")`; thenReshape data longer (pivot_longer())\ncols: take columns itemsprice_2018 totalprice_2020,\nnames_to: create new columns called \"category\" \"year\" cols header names,\nnames_sep: separate column names using \"_\"\nvalues_to: create new column called \"value\" cols values,\nnames_transform = transform year column integers,\nvalues_transform = transform value column characters; \ncols: take columns itemsprice_2018 totalprice_2020,names_to: create new columns called \"category\" \"year\" cols header names,names_sep: separate column names using \"_\"values_to: create new column called \"value\" cols values,names_transform = transform year column integers,values_transform = transform value column characters; thenReshape data wider (pivot_wider())\nid_cols: row observation unique customer_id year,\nnames_from: get new column names values category column,\nvalues_from: get new column values values value column; \nid_cols: row observation unique customer_id year,names_from: get new column names values category column,values_from: get new column values values value column; thenSplit multiple values column (separate())\ncol: separate column itemsprice,\n: new columns called \"items\" \"price_per_item\",\nsep: separate values \" \",\nremove: remove old column,\nconvert: convert new columns right data types; \ncol: separate column itemsprice,: new columns called \"items\" \"price_per_item\",sep: separate values \" \",remove: remove old column,convert: convert new columns right data types; thenChange column (mutate())\nprice_per_item: replace existing column price_per_item result search replace:\nstring: strings modify come price_per_item columns,\npattern: search left right parentheses,\nreplacement: replace \"\"; ,\n\nprice_per_item: replace existing column price_per_item result search replace:\nstring: strings modify come price_per_item columns,\npattern: search left right parentheses,\nreplacement: replace \"\"; ,\nstring: strings modify come price_per_item columns,pattern: search left right parentheses,replacement: replace \"\"; ,Fix data types (type_convert())\ntrim_ws: remove spaces, tabs, line breaks start end value\ntrim_ws: remove spaces, tabs, line breaks start end valueDon't feel like always need get data wrangling code single pipeline. make intermediate objects whenever need break code getting complicated need debug something.can debug pipe highlighting beginning just pipe want stop . Try highlighting data <- end separate function typing cmd-return. data look like now?","code":"\nuntidy_data <- read_csv(file = \"data/untidy_data.csv\")## \n## ── Column specification ────────────────────────────────────────────────────────\n## cols(\n##   customer_id = col_double(),\n##   itemsprice_2018 = col_character(),\n##   itemsprice_2019 = col_character(),\n##   itemsprice_2020 = col_character(),\n##   totalprice_2018 = col_double(),\n##   totalprice_2019 = col_double(),\n##   totalprice_2020 = col_double()\n## )\nlonger_data <- pivot_longer(\n  data = untidy_data,\n  cols = itemsprice_2018:totalprice_2020,\n  names_to = c(\"category\", \"year\"),\n  names_sep = \"_\", \n  values_to = \"value\", \n  names_transform = list(year = as.integer),\n  values_transform = list(value = as.character) \n) \n\nwider_data <- pivot_wider(\n  data = longer_data,\n  id_cols = c(customer_id, year),\n  names_from = category,\n  values_from = value\n)\n\nsplit_data <- separate(\n  data = wider_data,\n  col = itemsprice,\n  into = c(\"items\", \"price_per_item\"),\n  sep = \" \", \n  remove = TRUE, \n  convert = TRUE\n) \n\nmutated_data <- mutate(\n  .data = split_data,\n  price_per_item = stringr::str_replace_all(\n    string = price_per_item, \n    pattern = \"[()]\", \n    replacement = \"\"\n  )\n) \n\ntidy_data <- type_convert(\n  df = mutated_data,\n  trim_ws = TRUE,\n)## \n## ── Column specification ────────────────────────────────────────────────────────\n## cols(\n##   price_per_item = col_double(),\n##   totalprice = col_double()\n## )\nmean_total_price <- round(mean(tidy_data$totalprice), 2)\n# do not ever do this!!!!!!\ntidy_data <- type_convert(\n  df = mutate(\n    .data = separate(\n      data = pivot_wider(\n        data = pivot_longer(\n          data = read_csv(file = \"data/untidy_data.csv\"),\n          cols = itemsprice_2018:totalprice_2020,\n          names_to = c(\"category\", \"year\"),\n          names_sep = \"_\",\n          values_to = \"value\",\n          names_transform = list(year = as.integer),\n          values_transform = list(value = as.character)\n        ) ,\n        id_cols = c(customer_id, year),\n        names_from = category,\n        values_from = value\n      ),\n      col = itemsprice,\n      into = c(\"items\", \"price_per_item\"),\n      sep = \" \",\n      remove = TRUE,\n      convert = TRUE\n    ) ,\n    price_per_item = stringr::str_replace_all(\n      string = price_per_item,\n      pattern = \"[()]\",\n      replacement = \"\"\n    )\n  ),\n  trim_ws = TRUE,\n)\nuntidy_data <- read_csv(file = \"data/untidy_data.csv\")\n\ntotalprice_data <- select(\n  .data = untidy_data,\n  customer_id, \n  starts_with(\"totalprice\") # selects all columns that start with a string\n)\ntotalprice_data <- read_csv(file = \"data/untidy_data.csv\") %>%\n  select(\n    customer_id, \n    starts_with(\"totalprice\") \n  )## \n## ── Column specification ────────────────────────────────────────────────────────\n## cols(\n##   customer_id = col_double(),\n##   itemsprice_2018 = col_character(),\n##   itemsprice_2019 = col_character(),\n##   itemsprice_2020 = col_character(),\n##   totalprice_2018 = col_double(),\n##   totalprice_2019 = col_double(),\n##   totalprice_2020 = col_double()\n## )\ntidy_data <- read_csv(file = \"data/untidy_data.csv\") %>%\n  pivot_longer(\n    cols = itemsprice_2018:totalprice_2020,\n    names_to = c(\"category\", \"year\"),\n    names_sep = \"_\", \n    values_to = \"value\", \n    names_transform = list(year = as.integer),\n    values_transform = list(value = as.character) \n  ) %>%\n  pivot_wider(\n    id_cols = c(customer_id, year),\n    names_from = category,\n    values_from = value\n  ) %>%\n  separate(\n    col = itemsprice,\n    into = c(\"items\", \"price_per_item\"),\n    sep = \" \", \n    remove = TRUE, \n    convert = TRUE\n  ) %>%\n  mutate(\n    price_per_item = stringr::str_replace_all(\n      string = price_per_item, \n      pattern = \"[()]\", \n      replacement = \"\"\n    )\n  ) %>%\n  type_convert(\n    trim_ws = TRUE,\n  )"},{"path":"tidy.html","id":"glossary-tidy","chapter":"5 Data Tidying","heading":"5.6 Glossary","text":"","code":""},{"path":"tidy.html","id":"resources-tidy","chapter":"5 Data Tidying","heading":"5.7 Further resources","text":"Tidy DataChapter 12: Tidy Data R Data ScienceChapter 18: Pipes R Data ScienceData wrangling cheat sheet","code":""},{"path":"tidy.html","id":"exercises-tidy","chapter":"5 Data Tidying","heading":"5.8 Exercises","text":"say small Excel table 10 customer IDs, many widgets gadgets purchased 2020 2021.want calculate total number items purchased per year make table sorted total number items purchased.","code":""},{"path":"tidy.html","id":"load-the-data","chapter":"5 Data Tidying","heading":"5.8.1 Load the data","text":"data file (widgets_gadgets.xlsx) multiple header columns, need skip rows import data set column names: customer_id, widgets_2020,widgets_2021, gadgets_2020andgadgets_2021`.","code":"\n# get the data with better column names\ndata_original <- readxl::read_excel(\n  path = \"data/widgets_gadgets.xlsx\",\n  skip = 2,\n  col_names = c(\n    \"customer_id\",\n    \"widgets_2020\",\n    \"widgets_2021\",\n    \"gadgets_2020\",\n    \"gadgets_2021\"\n  )\n)"},{"path":"tidy.html","id":"reshape-the-data-longer","chapter":"5 Data Tidying","heading":"5.8.2 Reshape the data longer","text":"data wide format, customer's number widgets gadgets across two years row. Convert data shape row one customer's order one item type one year. table 40 rows combination 10 customers times 2 item types times 2 years, 4 columns: custmer_id, item, year, number.","code":"\ndata_longer <- pivot_longer(\n  data = data_original,\n  cols = 2:5,\n  names_to = c(\"item\", \"year\"),\n  names_sep = \"_\",\n  values_to = \"number\"\n)"},{"path":"tidy.html","id":"reshape-the-data-wider","chapter":"5 Data Tidying","heading":"5.8.3 Reshape the data wider","text":"Convert data shape row one customer's order widgets gadgets one year. table 20 rows combination 10 customers times 2 years, 4 columns: custmer_id, year, widgets gadgets.","code":"\ndata_wider <- pivot_wider(\n  data = data_longer,\n  id_cols = c(customer_id, year),\n  names_from = item,\n  values_from = number\n)"},{"path":"tidy.html","id":"rename-and-reorder","chapter":"5 Data Tidying","heading":"5.8.4 Rename and reorder","text":"Change order columns names column headers Year, Customer ID,Gadgets, andWidgets` .","code":"\n# column names with special characters have to be inside backticks\n# you can put all column names inside backticks if you want\ndata <- select(\n  .data = data_wider,\n  Year = year,\n  `Customer ID` = customer_id,\n  Gadgets = gadgets,\n  Widgets = widgets\n)"},{"path":"tidy.html","id":"put-in-a-pipeline","chapter":"5 Data Tidying","heading":"5.8.5 Put in a pipeline","text":"Put four steps single pipeline. Practice reading code top bottom.","code":"\ndata <- readxl::read_excel(\n  path = \"data/widgets_gadgets.xlsx\",\n  skip = 2,\n  col_names = c(\n    \"customer_id\",\n    \"widgets_2020\",\n    \"widgets_2021\",\n    \"gadgets_2020\",\n    \"gadgets_2021\"\n  )\n) %>%\n  pivot_longer(\n    cols = 2:5,\n    names_to = c(\"item\", \"year\"),\n    names_sep = \"_\",\n    values_to = \"number\"\n  ) %>%\n  pivot_wider(\n    id_cols = c(customer_id, year),\n    names_from = item,\n    values_from = number\n  ) %>%\n  select(\n    Year = year,\n    `Customer ID` = customer_id,\n    Gadgets = gadgets,\n    Widgets = widgets\n  )"},{"path":"wrangle.html","id":"wrangle","chapter":"6 Data Wrangling","heading":"6 Data Wrangling","text":"","code":""},{"path":"wrangle.html","id":"ilo-wrangle","chapter":"6 Data Wrangling","heading":"6.1 Intended Learning Outcomes","text":"able select filter data relevanceBe able create new columns edit existing onesBe able calculate row means","code":"\nlibrary(tidyverse)"},{"path":"wrangle.html","id":"twitter-example","chapter":"6 Data Wrangling","heading":"6.2 Twitter Example","text":"","code":""},{"path":"wrangle.html","id":"export-data","chapter":"6 Data Wrangling","heading":"6.2.1 Export Data","text":"can export organisations' twitter data https://analytics.twitter.com/. Go Tweets tab, choose time period, export last month's data day (use files class data).","code":""},{"path":"wrangle.html","id":"import-data","chapter":"6 Data Wrangling","heading":"6.2.2 Import Data","text":"","code":"\nfile <- \"data/tweets/daily_tweet_activity_metrics_LisaDeBruine_20210801_20210901_en.csv\"\n\ndaily_tweets <- read_csv(file)"},{"path":"wrangle.html","id":"select-relevant-data","chapter":"6 Data Wrangling","heading":"6.2.3 Select Relevant Data","text":"file contains bunch columns \"promoted\" tweets blank unless organisation pays . get rid . can use select helper dplyr::starts_with() get columns start \"promoted\" remove prefacing function !. Now 20 columns, can inspect glimpse().","code":"\ndaily_tweets <- read_csv(file) %>%\n  select(!starts_with(\"promoted\")) %>%\n  glimpse()## Rows: 31\n## Columns: 20\n## $ Date                  <date> 2021-08-01, 2021-08-02, 2021-08-03, 2021-08-04,…\n## $ `Tweets published`    <dbl> 0, 2, 4, 15, 12, 11, 14, 17, 26, 17, 3, 9, 5, 17…\n## $ impressions           <dbl> 1088, 1244, 3974, 22394, 23340, 316989, 694114, …\n## $ engagements           <dbl> 13, 19, 76, 1290, 2051, 26249, 51494, 5988, 2964…\n## $ `engagement rate`     <dbl> 0.01194853, 0.01527331, 0.01912431, 0.05760472, …\n## $ retweets              <dbl> 0, 0, 0, 5, 15, 124, 130, 18, 13, 4, 2, 25, 1, 7…\n## $ replies               <dbl> 0, 2, 5, 15, 16, 122, 123, 21, 52, 21, 4, 11, 9,…\n## $ likes                 <dbl> 2, 3, 25, 96, 108, 628, 847, 93, 116, 68, 10, 10…\n## $ `user profile clicks` <dbl> 1, 9, 10, 56, 36, 379, 550, 98, 78, 31, 17, 104,…\n## $ `url clicks`          <dbl> 2, 0, 0, 45, 97, 10136, 19467, 1937, 681, 324, 1…\n## $ `hashtag clicks`      <dbl> 0, 0, 0, 0, 0, 0, 1, 5, 1, 0, 0, 12, 1, 2, 3, 1,…\n## $ `detail expands`      <dbl> 7, 5, 36, 412, 606, 10348, 21021, 2642, 1441, 79…\n## $ `permalink clicks`    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n## $ `app opens`           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n## $ `app installs`        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n## $ follows               <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n## $ `email tweet`         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n## $ `dial phone`          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n## $ `media views`         <dbl> 2, 2, 25, 710, 1187, 4474, 9356, 1176, 582, 334,…\n## $ `media engagements`   <dbl> 1, 0, 0, 661, 1173, 4464, 9353, 1174, 582, 327, …"},{"path":"wrangle.html","id":"plot-likes-per-day","chapter":"6 Data Wrangling","heading":"6.2.4 Plot Likes per Day","text":"Now plot likes per day. ggplot2::scale_x_date() function lets formats x-axis dates.","code":"\nggplot(daily_tweets, aes(x = Date, y = likes)) +\n  geom_line() +\n  scale_x_date(name = \"\", \n               date_breaks = \"1 day\",\n               date_labels = \"%d\",\n               expand = expansion(add = c(.5, .5))) +\n  ggtitle(\"Likes: August 2021\")"},{"path":"wrangle.html","id":"plot-multiple-engagements","chapter":"6 Data Wrangling","heading":"6.2.5 Plot Multiple Engagements","text":"want plot likes, retweets, replies plot? need get numbers columns column contains \"engagement type\" can use determine different line colours. data different columns need get column, wide need pivot data longer.Now can plot number engagements per day engagement type making line colour determined value engage_type column.data different scales, likes, much higher replies retweets, can sometimes help change y-axis log scale. ggplot2::scale_y_continuous() lets transform axis trans argument.","code":"\nlong_tweets <- daily_tweets %>%\n  select(Date, likes, retweets, replies) %>%\n  pivot_longer(cols = c(likes, retweets, replies),\n               names_to = \"engage_type\",\n               values_to = \"n\")\nggplot(long_tweets, aes(x = Date, y = n, colour = engage_type)) +\n  geom_line() +\n  scale_y_continuous(name = \"Likes per Day\") + \n  scale_x_date(name = \"\", \n               date_breaks = \"1 day\",\n               date_labels = \"%d\",\n               expand = expansion(add = c(.5, .5))) +\n  ggtitle(\"August 2021\")\nggplot(long_tweets, aes(x = Date, y = n, colour = engage_type)) +\n  geom_line() +\n  scale_x_date(name = \"\", \n               date_breaks = \"1 day\",\n               date_labels = \"%d\",\n               expand = expansion(add = c(.5, .5))) +\n  scale_y_continuous(name = \"Number per Day\",\n                     breaks = c(0, 10, 100, 1000),\n                     trans = \"pseudo_log\") +\n  ggtitle(\"August 2021\")"},{"path":"wrangle.html","id":"multiple-data-files","chapter":"6 Data Wrangling","heading":"6.2.6 Multiple Data Files","text":"Maybe now want compare data several months. First, get list files want combine. easiest directory, although can use pattern select files want systematic naming structure.use purrr::map_df() map list file paths, open read_csv(), return big data frame (df) combined data. can pipe select() function get rid \"promoted\" columns.Now can make plot likes per day months.Notice changed date breaks labels x-axis. %B date code full month name. See ?strptime date codes.","code":"\nfiles <- list.files(\n  path = \"data/tweets\", \n  pattern = \"daily_tweet_activity_metrics_LisaDeBruine\",\n  full.names = TRUE\n)\nall_daily_tweets <- purrr::map_df(files, read_csv) %>%\n  select(!starts_with(\"promoted\")) \nggplot(all_daily_tweets, aes(x = Date, y = likes)) +\n  geom_line() +\n  scale_y_continuous(name = \"Likes per Day\") + \n  scale_x_date(name = \"\", \n               date_breaks = \"1 month\",\n               date_labels = \"%B\",\n               expand = expansion(add = c(.5, .5))) +\n  ggtitle(\"Likes 2021\")"},{"path":"wrangle.html","id":"likes-by-month","chapter":"6 Data Wrangling","heading":"6.2.7 Likes by Month","text":"want plot likes month, first need column month. Use mutate() make new column, using lubridate::month() extract month name Date column. group new month column calculate sum likes.column plot might make sense line plot .","code":"\nlikes_by_month <- all_daily_tweets %>%\n  mutate(month = lubridate::month(Date, label = TRUE)) %>%\n  group_by(month) %>%\n  summarise(total_likes = sum(likes)) \nggplot(likes_by_month, aes(x = month, y = total_likes, fill = month)) +\n  geom_col(show.legend = FALSE) +\n  scale_fill_brewer(palette = \"Spectral\") +\n  scale_y_continuous(name = \"Total Likes per Month\",\n                     breaks = seq(0, 10000, 1000),\n                     labels = paste0(0:10, \"K\")) +\n  scale_x_discrete(name = \"\")"},{"path":"wrangle.html","id":"data-by-tweet","chapter":"6 Data Wrangling","heading":"6.2.8 Data by Tweet","text":"can also download twitter data tweet instead day. usually takes little longer download. can use pattern read combine tweet data files.^ start pattern means file name start . means match \"daily_tweet...\" files.First, open first file see need anything .look file Viewer, can set Tweet id column using scientific notation (1.355500e+18) instead full 18-digit tweet ID. ever want add, ID numbers, safe represent characters. Now can set map files, get rid promoted columns add month column (reading date time column data).Now can look distribution impressions per tweet month.can display Lisa's top tweet year.Top tweet 1190 likes:can make word cloud top words tweet .","code":"\ntweet_files <- list.files(\n  path = \"data/tweets\", \n  pattern = \"^tweet_activity_metrics_LisaDeBruine\",\n  full.names = TRUE\n)\ntweets <- read_csv(tweet_files[1])\nct <- cols(\"Tweet id\" = col_character())\n\nall_tweets <- purrr::map_df(tweet_files, read_csv, col_types = ct) %>%\n  select(!starts_with(\"promoted\")) %>%\n  mutate(month = lubridate::month(time, label = TRUE))\nggplot(all_tweets, aes(x = month, y = impressions, fill = month)) +\n  geom_violin(show.legend = FALSE, alpha = 0.8) +\n  scale_fill_brewer(palette = \"Spectral\") +\n  scale_x_discrete(name = \"\") +\n  scale_y_continuous(name = \"Impressions per Tweet\",\n                     breaks = c(0, 10^(2:7)),\n                     labels = c(0, 10, 100, \"1K\", \"10K\", \"100K\", \"1M\"),\n                     trans = \"pseudo_log\") +\n  ggtitle(\"Distribution of Twitter Impressions per Tweet in 2021\")\ntop_tweet <- all_tweets %>%\n  slice_max(order_by = likes, n = 1)\n\nglue::glue(\"[Top tweet]({top_tweet$`Tweet permalink`}) with {top_tweet$likes} likes:\n\n---------------------------\n{top_tweet$`Tweet text`}\n---------------------------\n\") %>% cat()"},{"path":"summary.html","id":"summary","chapter":"7 Data Summaries","heading":"7 Data Summaries","text":"","code":""},{"path":"summary.html","id":"ilo-summary","chapter":"7 Data Summaries","heading":"7.1 Intended Learning Outcomes","text":"Summarise data groupsProduce well-formatted tables","code":""},{"path":"custom.html","id":"custom","chapter":"8 Customising Visualisations","heading":"8 Customising Visualisations","text":"","code":""},{"path":"custom.html","id":"ilo-custom","chapter":"8 Customising Visualisations","heading":"8.1 Intended Learning Outcomes","text":"Customise plots consistent styleCreate high quality plots like BBC, NYT, 538","code":"\nlibrary(tidyverse)\nlibrary(ggwordcloud) # for word clouds\nlibrary(tidytext) # for manipulating text for word clouds\nlibrary(patchwork) # for combining plots"},{"path":"custom.html","id":"word-clouds","chapter":"8 Customising Visualisations","heading":"8.2 Word Clouds","text":"Next, need make table number times individual word appears per rating function tidytext::unnest_tokens() splitting words input column individual words new output column.can get rid common \"stop words\" integers filtering words omitted list.group rating use dplyr::slice_max() get top 25 words, ordered column n.Now can make two word clouds paste together (word clouds play well facets). filter words table get one rating, set ggplot aesthetics label, colour, size. label come word column, colour different word size word proportional n, number times word appeared.visualisation use ggwordcloud::geom_text_wordcloud_area(). can control big cloud ggwordcloud::scale_size_area() (usually takes trial--error). add title minimal theme get rid axes grid lines.Make another plot different rating paste together +.","code":"\n# https://www.kaggle.com/sid321axn/amazon-alexa-reviews\n# extracted from Amazon by Manu Siddhartha & Anurag Bhatt\nalexa <- rio::import(\"data/amazon_alexa.csv\")\nomitted <- c(stop_words$word, 0:9)\n\nwords <- alexa %>%\n  unnest_tokens(output = \"word\", input = \"verified_reviews\") %>%\n  count(word, rating) %>%\n  filter(!word %in% omitted) %>%\n  group_by(rating) %>%\n  slice_max(order_by = n, n = 25, with_ties = FALSE)\nrating1 <- filter(words, rating == 1) %>%\n  ggplot(aes(label = word, colour = word, size = n)) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 10) +\n  ggtitle(\"Rating = 1\") +\n  theme_minimal(base_size = 14)\nrating5 <- filter(words, rating == 5) %>%\n  ggplot(aes(label = word, colour = word, size = n)) +\n  geom_text_wordcloud_area() +\n  scale_size_area(max_size = 10) +\n  ggtitle(\"Rating = 5\") +\n  theme_minimal(base_size = 14)\n\nrating1 + rating5"},{"path":"present.html","id":"present","chapter":"9 Dashboards, Reports, and Presentations","heading":"9 Dashboards, Reports, and Presentations","text":"","code":""},{"path":"present.html","id":"ilo-present","chapter":"9 Dashboards, Reports, and Presentations","heading":"9.1 Intended Learning Outcomes","text":"Structure data report, dashboard, presentation formatsInclude table contents, figure table captions, references longer reports","code":""},{"path":"present.html","id":"resources-present","chapter":"9 Dashboards, Reports, and Presentations","heading":"9.2 Resources","text":"RStudio Formats","code":""},{"path":"next.html","id":"next","chapter":"10 What's Next","heading":"10 What's Next","text":"","code":""},{"path":"next.html","id":"ilo-next","chapter":"10 What's Next","heading":"10.1 Intended Learning Outcomes","text":"familiar range applications using RIdentify appropriate sources continued learning","code":""},{"path":"installing-r.html","id":"installing-r","chapter":"A Installing R","heading":"A Installing R","text":"Installing R RStudio usually straightforward. sections explain helpful YouTube video .","code":""},{"path":"installing-r.html","id":"installing-base-r","chapter":"A Installing R","heading":"A.1 Installing Base R","text":"Install base R. Choose download link operating system (Linux, Mac OS X, Windows).Mac, install latest release newest R-x.x.x.pkg link (legacy version older operating system). install R, also install XQuartz able use visualisation packages.installing Windows version, choose \"base\" subdirectory click download link top page. install R, also install RTools; use \"recommended\" version highlighted near top list.using Linux, choose specific operating system follow installation instructions.","code":""},{"path":"installing-r.html","id":"installing-rstudio","chapter":"A Installing R","heading":"A.2 Installing RStudio","text":"Go rstudio.com download RStudio Desktop (Open Source License) version operating system list titled Installers Supported Platforms.","code":""},{"path":"installing-r.html","id":"rstudio-settings","chapter":"A Installing R","heading":"A.3 RStudio Settings","text":"settings fix immediately updating RStudio. Go Global Options... Tools menu (⌘,), General tab, uncheck box says Restore .RData workspace startup. keep things around workspace, things get messy, unexpected things happen. always start clear workspace. also means never want save workspace exit, set Never. thing want save scripts.may also want change appearance code. Different fonts themes can sometimes help visual difficulties dyslexia.\nFigure .1: RStudio General Appearance settings\nmay also want change settings Code tab. example, Lisa prefers two spaces instead tabs code likes able see whitespace characters. matter personal preference.\nFigure .2: RStudio Code settings\n","code":""},{"path":"installing-r.html","id":"installing-latex","chapter":"A Installing R","heading":"A.4 Installing LaTeX","text":"can install LaTeX typesetting system produce PDF reports RStudio. Without additional installation, able produce reports HTML PDF. course require make PDFs. generate PDF reports, additionally need install tinytex (Xie, 2021) run following code:","code":"\n# run this in the console\ninstall.packages(\"tinytex\")\ntinytex::install_tinytex()"},{"path":"symbols.html","id":"symbols","chapter":"B Symbols","heading":"B Symbols","text":"\nFigure B.1: Image James Chapman/Soundimals\n","code":""},{"path":"conventions.html","id":"conventions","chapter":"C Conventions","heading":"C Conventions","text":"book use following conventions:Generic code: list(number = 1, letter = \"\")Generic code: list(number = 1, letter = \"\")Highlighted code: list(number = 1, letter = \"\")Highlighted code: list(number = 1, letter = \"\")File paths: data/sales.csvFile paths: data/sales.csvR Packages: tidyverseR Packages: tidyverseFunctions: paste()Functions: paste()Strings: \"Lisa\", \"Emily\"Strings: \"Lisa\", \"Emily\"Numbers: 100, 3.14Numbers: 100, 3.14Logical values: TRUE, FALSELogical values: TRUE, FALSEGlossary items: ordinalGlossary items: ordinalCitations: Wickham (2021)Citations: Wickham (2021)Internal links: Chapter 3Internal links: Chapter 3External links: Mastering ShinyExternal links: Mastering ShinyMenu/interface options: New File...Menu/interface options: New File...Quiz question: going learn lot: TRUEFALSEQuiz question: going learn lot: TRUEFALSEWhat p-value?\n\nprobability null hypothesis truethe probability observed, extreme, data, assumption null-hypothesis truethe probability making error conclusion\np-value?found !Informational asides.Notes warn something.Notes things cause serious errors.Try .","code":"\n# code chunks\npaste(\"Applied\", \"Data\", \"Skills\", 1, sep = \" \")## [1] \"Applied Data Skills 1\""},{"path":"data-types.html","id":"data-types","chapter":"D Data Types","heading":"D Data Types","text":"","code":""},{"path":"data-types.html","id":"basic-data-types","chapter":"D Data Types","heading":"D.1 Basic data types","text":"Data can numbers, words, true/false values combinations . basic data types R : numeric, character, logical, well special classes factor date/times.","code":""},{"path":"data-types.html","id":"numeric-data","chapter":"D Data Types","heading":"D.1.1 Numeric data","text":"numbers numeric data types. two types numeric data, integer double. Integers whole numbers, like -1, 0 1. Doubles numbers can fractional amounts. just type plain number 10, stored double, even decimal point. want exact integer, can use L suffix (10L), distinction make much difference practice.ever want know data type something, use typeof function.want know something numeric (double integer), can use function .numeric() tell numeric (TRUE) (FALSE).","code":"\ntypeof(10)   # double\ntypeof(10.0) # double\ntypeof(10L)  # integer## [1] \"double\"\n## [1] \"double\"\n## [1] \"integer\"\nis.numeric(10L)\nis.numeric(10.0)\nis.numeric(\"Not a number\")## [1] TRUE\n## [1] TRUE\n## [1] FALSE"},{"path":"data-types.html","id":"character-data","chapter":"D Data Types","heading":"D.1.2 Character data","text":"Characters (also called \"strings\") text quotation marks.can include quotes, escape quotes using backslash signal quote meant end string.","code":"\ntypeof(\"This is a character string\")\ntypeof('You can use double or single quotes')## [1] \"character\"\n## [1] \"character\"\nmy_string <- \"The instructor said, \\\"R is cool,\\\" and the class agreed.\"\ncat(my_string) # cat() prints the arguments## The instructor said, \"R is cool,\" and the class agreed."},{"path":"data-types.html","id":"logical-data","chapter":"D Data Types","heading":"D.1.3 Logical Data","text":"Logical data (also sometimes called \"boolean\" values) one two values: true false. R, always write uppercase: TRUE FALSE.compare two values operator, checking see 10 greater 5, resulting value logical.might also see logical values abbreviated T F, 0 1. can cause problems road, always spell whole thing.","code":"\nclass(TRUE)\nclass(FALSE)## [1] \"logical\"\n## [1] \"logical\"\nis.logical(10 > 5)## [1] TRUE"},{"path":"data-types.html","id":"factors","chapter":"D Data Types","heading":"D.1.4 Factors","text":"factor specific type integer lets specify categories order. useful data tables make plots display categories correct order.Factors type integer, can tell factors checking class().","code":"\nmyfactor <- factor(\"B\", levels = c(\"A\", \"B\",\"C\"))\nmyfactor## [1] B\n## Levels: A B C\ntypeof(myfactor)\nclass(myfactor)## [1] \"integer\"\n## [1] \"factor\""},{"path":"data-types.html","id":"dates-and-times-1","chapter":"D Data Types","heading":"D.1.5 Dates and Times","text":"Dates times represented doubles special classes. Dates times hard work , lubridate package provides functions help .Date datetimes type double, can tell dates checking class(). Datetimes can one classes start POSIX.data types :100 integerdoublecharacterlogicalfactor100L integerdoublecharacterlogicalfactor\"100\" integerdoublecharacterlogicalfactor100.0 integerdoublecharacterlogicalfactor-100L integerdoublecharacterlogicalfactorfactor(100) integerdoublecharacterlogicalfactorTRUE integerdoublecharacterlogicalfactor\"TRUE\" integerdoublecharacterlogicalfactorFALSE integerdoublecharacterlogicalfactor1 == 2 integerdoublecharacterlogicalfactor","code":"\ntoday <- lubridate::today()\nnow <- lubridate::now(tzone = \"GMT\")\ntypeof(today)\ntypeof(now)\nclass(today)\nclass(now)## [1] \"double\"\n## [1] \"double\"\n## [1] \"Date\"\n## [1] \"POSIXct\" \"POSIXt\""},{"path":"data-types.html","id":"containers","chapter":"D Data Types","heading":"D.2 Basic container types","text":"Individual data values can grouped together containers. main types containers work vectors, lists, data tables.","code":""},{"path":"data-types.html","id":"vectors","chapter":"D Data Types","heading":"D.2.1 Vectors","text":"vector R set items ('elements') specific order. elements vector must data type (numeric, character, logical). can create vector enclosing elements function c().happens mix types? class variable mixed?mix data types vector; elements vector must data type. mix , R \"coerce\" . mix doubles integers, integers changed doubles. mix characters numeric types, numbers coerced characters, 10 turn \"10\".","code":"\n## put information into a vector using c(...)\nc(1, 2, 3, 4)\nc(\"this\", \"is\", \"cool\")\n1:6 # shortcut to make a vector of all integers x:y## [1] 1 2 3 4\n## [1] \"this\" \"is\"   \"cool\"\n## [1] 1 2 3 4 5 6\nmixed <- c(2, \"good\", 2L, \"b\", TRUE)\ntypeof(mixed)## [1] \"character\""},{"path":"data-types.html","id":"selecting-values-from-a-vector","chapter":"D Data Types","heading":"D.2.1.1 Selecting values from a vector","text":"wanted pick specific values vector position, can use square brackets (extract operator, []) vector.can select one value vector putting vector numbers inside square brackets. example, can select 18th, 19th, 20th, 21st, 4th, 9th 15th letter built-vector LETTERS (gives uppercase letters Latin alphabet).Can decode secret message?can also create 'named' vectors, element name. example:can access elements name using character vector within square brackets. can put order want, can repeat elements:can get vector names using names() function, can set change using something like names(vec2) <- c(\"n1\", \"n2\", \"n3\").Another way access elements using logical vector within square brackets. pull elements vector corresponding element logical vector TRUE. logical vector length original, repeat. can find long vector using length() function.","code":"\nvalues <- c(10, 20, 30, 40, 50)\nvalues[2] # selects the second value## [1] 20\nword <- c(18, 19, 20, 21, 4, 9, 15)\nLETTERS[word]## [1] \"R\" \"S\" \"T\" \"U\" \"D\" \"I\" \"O\"\nsecret <- c(14, 5, 22, 5, 18, 7, 15, 14, 14, 1, 7, 9, 22, 5, 25, 15, 21, 21, 16)\nLETTERS[secret]##  [1] \"N\" \"E\" \"V\" \"E\" \"R\" \"G\" \"O\" \"N\" \"N\" \"A\" \"G\" \"I\" \"V\" \"E\" \"Y\" \"O\" \"U\" \"U\" \"P\"\nvec <- c(first = 77.9, second = -13.2, third = 100.1)\nvec##  first second  third \n##   77.9  -13.2  100.1\nvec[c(\"third\", \"second\", \"second\")]##  third second second \n##  100.1  -13.2  -13.2\nlength(LETTERS)\nLETTERS[c(TRUE, FALSE)]## [1] 26\n##  [1] \"A\" \"C\" \"E\" \"G\" \"I\" \"K\" \"M\" \"O\" \"Q\" \"S\" \"U\" \"W\" \"Y\""},{"path":"data-types.html","id":"rep_seq","chapter":"D Data Types","heading":"D.2.1.2 Repeating Sequences","text":"useful tricks save typing creating vectors.command x:y : operator give sequence number starting x, going y increments 1.want create sequence something integer steps? can use seq() function. Look examples work arguments .want repeat vector many times? either type (painful) use rep() function, can repeat vectors different ways.rep() function useful create vector logical values (TRUE/FALSE 1/0) select values another vector.","code":"\n1:10\n15.3:20.5\n0:-10##  [1]  1  2  3  4  5  6  7  8  9 10\n## [1] 15.3 16.3 17.3 18.3 19.3 20.3\n##  [1]   0  -1  -2  -3  -4  -5  -6  -7  -8  -9 -10\nseq(from = -1, to = 1, by = 0.2)\nseq(0, 100, length.out = 11)\nseq(0, 10, along.with = LETTERS)##  [1] -1.0 -0.8 -0.6 -0.4 -0.2  0.0  0.2  0.4  0.6  0.8  1.0\n##  [1]   0  10  20  30  40  50  60  70  80  90 100\n##  [1]  0.0  0.4  0.8  1.2  1.6  2.0  2.4  2.8  3.2  3.6  4.0  4.4  4.8  5.2  5.6\n## [16]  6.0  6.4  6.8  7.2  7.6  8.0  8.4  8.8  9.2  9.6 10.0\nrep(0, 10)                      # ten zeroes\nrep(c(1L, 3L), times = 7)       # alternating 1 and 3, 7 times\nrep(c(\"A\", \"B\", \"C\"), each = 2) # A to C, 2 times each##  [1] 0 0 0 0 0 0 0 0 0 0\n##  [1] 1 3 1 3 1 3 1 3 1 3 1 3 1 3\n## [1] \"A\" \"A\" \"B\" \"B\" \"C\" \"C\"\n# Get IDs in the pattern Y Y N N ...\nids <- 1:40\nyynn <- rep(c(TRUE, FALSE), each = 2, \n            length.out = length(ids))\nids[yynn]##  [1]  1  2  5  6  9 10 13 14 17 18 21 22 25 26 29 30 33 34 37 38"},{"path":"data-types.html","id":"lists","chapter":"D Data Types","heading":"D.2.2 Lists","text":"Recall vectors can contain data one type. want store collection data different data types? purpose use list. Define list using list() function.can refer elements list using square brackets like vector, can also use dollar sign notation ($) list items names.Explore 5 ways shown extract value list. data type object? difference single double brackets? one dollar sign?single brackets (bracket1 name1) return list subset items inside brackets. case, just one item, can (try data_types[1:2]). items keep names , returned value rhl(list(double = 10))`.double brackets (bracket2 name2 return single item vector. select one item; data_types[[1:2]] give \"subscript bounds\" error.dollar-sign notation double-brackets. name spaces characters letters, numbers, underscores, full stops, need surround name backticks (e.g., sales$`Customer ID`).","code":"\ndata_types <- list(\n  double = 10.0,\n  integer = 10L,\n  character = \"10\",\n  logical = TRUE\n)\n\nstr(data_types) # str() prints lists in a condensed format## List of 4\n##  $ double   : num 10\n##  $ integer  : int 10\n##  $ character: chr \"10\"\n##  $ logical  : logi TRUE\ndata_types$logical## [1] TRUE\nbracket1 <- data_types[1]\nbracket2 <- data_types[[1]]\nname1    <- data_types[\"double\"]\nname2    <- data_types[[\"double\"]]\ndollar   <- data_types$double"},{"path":"data-types.html","id":"tables-data","chapter":"D Data Types","heading":"D.2.3 Tables","text":"Tabular data structures allow collection data different types (characters, integers, logical, etc.) subject constraint \"column\" table (element list) must number elements. base R version table called data.frame, 'tidyverse' version called tibble. Tibbles far easier work , using . learn differences two data structures, see vignette(\"tibble\").Tabular data becomes especially important talk tidy data Chapter 5, consists set simple principles structuring data.","code":"\n# construct a table by column with tibble\navatar <- tibble(\n  name = c(\"Katara\", \"Toph\", \"Sokka\"),\n  bends = c(\"water\", \"earth\", NA),\n  friendly = TRUE\n)\n\n# or by row with tribble\navatar <- tribble(\n  ~name,    ~bends,  ~friendly,\n  \"Katara\", \"water\", TRUE,\n  \"Toph\",   \"earth\", TRUE,\n  \"Sokka\",  NA,      TRUE\n)\n\n# export the data to a file\nrio::export(avatar, \"data/avatar.csv\")\n\n# or by importing data from a file\navatar <- rio::import(\"data/avatar.csv\")"},{"path":"data-types.html","id":"table-info","chapter":"D Data Types","heading":"D.2.3.1 Table info","text":"can get information table using functions ncol() (number columns), nrow() (number rows), dim() (number rows number columns), name() (column names).","code":"\nnrow(avatar) # how many rows?\nncol(avatar) # how many columns?\ndim(avatar)  # what are the table dimensions?\nnames(avatar) # what are the column names?## [1] 3\n## [1] 3\n## [1] 3 3\n## [1] \"name\"     \"bends\"    \"friendly\""},{"path":"data-types.html","id":"row-col-access","chapter":"D Data Types","heading":"D.2.3.2 Accessing rows and columns","text":"various ways accessing specific columns rows table. ones base R useful know , learning easier (readable) ways Chapters 5 6. Examples base R accessing functions provided reference, since might see people's scripts.","code":"\nkatara     <- avatar[1, ] # first row\ntype       <- avatar[, 2] # second column (bends)\nbenders    <- avatar[c(1, 2), ] # selected rows (by number)\nbends_name <- avatar[, c(\"bends\", \"name\")] # selected columns (by name)\nfriendly   <- avatar$friendly  # by column name"},{"path":"data-types.html","id":"glossary-datatypes","chapter":"D Data Types","heading":"D.3 Glossary","text":"","code":""},{"path":"plotstyle.html","id":"plotstyle","chapter":"E Styling Plots","heading":"E Styling Plots","text":"","code":""},{"path":"plotstyle.html","id":"aesthetics","chapter":"E Styling Plots","heading":"E.1 Aesthetics","text":"","code":""},{"path":"plotstyle.html","id":"colourfill","chapter":"E Styling Plots","heading":"E.1.1 Colour/Fill","text":"colour argument changes point line colour, fill argument changes interior colour shapes. Type colours() console see list named colours R. Alternatively, can use hexadecimal colours like \"#FF8000\" rgb() function set red, green, blue values scale 0 1.Hover colour see R name.\nblack\n\ngray1\n\ngray2\n\ngray3\n\ngray4\n\ngray5\n\ngray6\n\ngray7\n\ngray8\n\ngray9\n\ngray10\n\ngray11\n\ngray12\n\ngray13\n\ngray14\n\ngray15\n\ngray16\n\ngray17\n\ngray18\n\ngray19\n\ngray20\n\ngray21\n\ngray22\n\ngray23\n\ngray24\n\ngray25\n\ngray26\n\ngray27\n\ngray28\n\ngray29\n\ngray30\n\ngray31\n\ngray32\n\ngray33\n\ngray34\n\ngray35\n\ngray36\n\ngray37\n\ngray38\n\ngray39\n\ngray40\n\ndimgray\n\ngray42\n\ngray43\n\ngray44\n\ngray45\n\ngray46\n\ngray47\n\ngray48\n\ngray49\n\ngray50\n\ngray51\n\ngray52\n\ngray53\n\ngray54\n\ngray55\n\ngray56\n\ngray57\n\ngray58\n\ngray59\n\ngray60\n\ngray61\n\ngray62\n\ngray63\n\ngray64\n\ngray65\n\ndarkgray\n\ngray66\n\ngray67\n\ngray68\n\ngray69\n\ngray70\n\ngray71\n\ngray72\n\ngray73\n\ngray74\n\ngray\n\ngray75\n\ngray76\n\ngray77\n\ngray78\n\ngray79\n\ngray80\n\ngray81\n\ngray82\n\ngray83\n\nlightgray\n\ngray84\n\ngray85\n\ngainsboro\n\ngray86\n\ngray87\n\ngray88\n\ngray89\n\ngray90\n\ngray91\n\ngray92\n\ngray93\n\ngray94\n\ngray95\n\ngray96\n\ngray97\n\ngray98\n\ngray99\n\nwhite\n\nsnow4\n\nsnow3\n\nsnow2\n\nsnow\n\nrosybrown4\n\nrosybrown\n\nrosybrown3\n\nrosybrown2\n\nrosybrown1\n\nlightcoral\n\nindianred\n\nindianred4\n\nindianred2\n\nindianred1\n\nindianred3\n\nbrown4\n\nbrown\n\nbrown3\n\nbrown2\n\nbrown1\n\nfirebrick4\n\nfirebrick\n\nfirebrick3\n\nfirebrick1\n\nfirebrick2\n\ndarkred\n\nred3\n\nred2\n\nred\n\nmistyrose3\n\nmistyrose4\n\nmistyrose2\n\nmistyrose\n\nsalmon\n\ntomato3\n\ncoral4\n\ncoral3\n\ncoral2\n\ncoral1\n\ntomato2\n\ntomato\n\ntomato4\n\ndarksalmon\n\nsalmon4\n\nsalmon3\n\nsalmon2\n\nsalmon1\n\ncoral\n\norangered4\n\norangered3\n\norangered2\n\nlightsalmon3\n\nlightsalmon2\n\nlightsalmon\n\nlightsalmon4\n\nsienna\n\nsienna3\n\nsienna2\n\nsienna1\n\nsienna4\n\norangered\n\nseashell4\n\nseashell3\n\nseashell2\n\nseashell\n\nchocolate4\n\nchocolate3\n\nchocolate\n\nchocolate2\n\nchocolate1\n\nlinen\n\npeachpuff4\n\npeachpuff3\n\npeachpuff2\n\npeachpuff\n\nsandybrown\n\ntan4\n\nperu\n\ntan2\n\ntan1\n\ndarkorange4\n\ndarkorange3\n\ndarkorange2\n\ndarkorange1\n\nantiquewhite3\n\nantiquewhite2\n\nantiquewhite1\n\nbisque4\n\nbisque3\n\nbisque2\n\nbisque\n\nburlywood4\n\nburlywood3\n\nburlywood\n\nburlywood2\n\nburlywood1\n\ndarkorange\n\nantiquewhite4\n\nantiquewhite\n\npapayawhip\n\nblanchedalmond\n\nnavajowhite4\n\nnavajowhite3\n\nnavajowhite2\n\nnavajowhite\n\ntan\n\nfloralwhite\n\noldlace\n\nwheat4\n\nwheat3\n\nwheat2\n\nwheat\n\nwheat1\n\nmoccasin\n\norange4\n\norange3\n\norange2\n\norange\n\ngoldenrod\n\ngoldenrod1\n\ngoldenrod4\n\ngoldenrod3\n\ngoldenrod2\n\ndarkgoldenrod4\n\ndarkgoldenrod\n\ndarkgoldenrod3\n\ndarkgoldenrod2\n\ndarkgoldenrod1\n\ncornsilk\n\ncornsilk4\n\ncornsilk3\n\ncornsilk2\n\nlightgoldenrod4\n\nlightgoldenrod3\n\nlightgoldenrod\n\nlightgoldenrod2\n\nlightgoldenrod1\n\ngold4\n\ngold3\n\ngold2\n\ngold\n\nlemonchiffon4\n\nlemonchiffon3\n\nlemonchiffon2\n\nlemonchiffon\n\npalegoldenrod\n\nkhaki\n\ndarkkhaki\n\nkhaki4\n\nkhaki3\n\nkhaki2\n\nkhaki1\n\nivory4\n\nivory3\n\nivory2\n\nivory\n\nbeige\n\nlightyellow4\n\nlightyellow3\n\nlightyellow2\n\nlightyellow\n\nlightgoldenrodyellow\n\nyellow4\n\nyellow3\n\nyellow2\n\nyellow\n\nolivedrab\n\nolivedrab4\n\nolivedrab3\n\nolivedrab2\n\nolivedrab1\n\ndarkolivegreen\n\ndarkolivegreen4\n\ndarkolivegreen3\n\ndarkolivegreen2\n\ndarkolivegreen1\n\ngreenyellow\n\nchartreuse4\n\nchartreuse3\n\nchartreuse2\n\nlawngreen\n\nchartreuse\n\nhoneydew4\n\nhoneydew3\n\nhoneydew2\n\nhoneydew\n\ndarkseagreen4\n\ndarkseagreen\n\ndarkseagreen3\n\ndarkseagreen2\n\ndarkseagreen1\n\nlightgreen\n\npalegreen\n\npalegreen4\n\npalegreen3\n\npalegreen1\n\nforestgreen\n\nlimegreen\n\ndarkgreen\n\ngreen4\n\ngreen3\n\ngreen2\n\ngreen\n\nmediumseagreen\n\nseagreen\n\nseagreen3\n\nseagreen2\n\nseagreen1\n\nmintcream\n\nspringgreen4\n\nspringgreen3\n\nspringgreen2\n\nspringgreen\n\naquamarine3\n\naquamarine2\n\naquamarine\n\nmediumspringgreen\n\naquamarine4\n\nturquoise\n\nmediumturquoise\n\nlightseagreen\n\nazure4\n\nazure3\n\nazure2\n\nazure\n\nlightcyan4\n\nlightcyan3\n\nlightcyan2\n\nlightcyan\n\npaleturquoise\n\npaleturquoise4\n\npaleturquoise3\n\npaleturquoise2\n\npaleturquoise1\n\ndarkslategray\n\ndarkslategray4\n\ndarkslategray3\n\ndarkslategray2\n\ndarkslategray1\n\ncyan4\n\ncyan3\n\ndarkturquoise\n\ncyan2\n\ncyan\n\ncadetblue4\n\ncadetblue\n\nturquoise4\n\nturquoise3\n\nturquoise2\n\nturquoise1\n\npowderblue\n\ncadetblue3\n\ncadetblue2\n\ncadetblue1\n\nlightblue4\n\nlightblue3\n\nlightblue\n\nlightblue2\n\nlightblue1\n\ndeepskyblue4\n\ndeepskyblue3\n\ndeepskyblue2\n\ndeepskyblue\n\nskyblue\n\nlightskyblue4\n\nlightskyblue3\n\nlightskyblue2\n\nlightskyblue1\n\nlightskyblue\n\nskyblue4\n\nskyblue3\n\nskyblue2\n\nskyblue1\n\naliceblue\n\nslategray\n\nlightslategray\n\nslategray3\n\nslategray2\n\nslategray1\n\nsteelblue4\n\nsteelblue\n\nsteelblue3\n\nsteelblue2\n\nsteelblue1\n\ndodgerblue4\n\ndodgerblue3\n\ndodgerblue2\n\ndodgerblue\n\nlightsteelblue4\n\nlightsteelblue3\n\nlightsteelblue\n\nlightsteelblue2\n\nlightsteelblue1\n\nslategray4\n\ncornflowerblue\n\nroyalblue\n\nroyalblue4\n\nroyalblue3\n\nroyalblue2\n\nroyalblue1\n\nghostwhite\n\nlavender\n\nmidnightblue\n\nnavy\n\nblue4\n\nblue3\n\nblue2\n\nblue\n\ndarkslateblue\n\nslateblue\n\nmediumslateblue\n\nlightslateblue\n\nslateblue1\n\nslateblue4\n\nslateblue3\n\nslateblue2\n\nmediumpurple4\n\nmediumpurple3\n\nmediumpurple\n\nmediumpurple2\n\nmediumpurple1\n\npurple4\n\npurple3\n\nblueviolet\n\npurple1\n\npurple2\n\npurple\n\ndarkorchid\n\ndarkorchid4\n\ndarkorchid3\n\ndarkorchid2\n\ndarkorchid1\n\ndarkviolet\n\nmediumorchid4\n\nmediumorchid3\n\nmediumorchid\n\nmediumorchid2\n\nmediumorchid1\n\nthistle4\n\nthistle3\n\nthistle\n\nthistle2\n\nthistle1\n\nplum4\n\nplum3\n\nplum2\n\nplum1\n\nplum\n\nviolet\n\ndarkmagenta\n\nmagenta3\n\nmagenta2\n\nmagenta\n\norchid4\n\norchid3\n\norchid\n\norchid2\n\norchid1\n\nmaroon4\n\nvioletred\n\nmaroon3\n\nmaroon2\n\nmaroon1\n\nmediumvioletred\n\ndeeppink3\n\ndeeppink2\n\ndeeppink\n\ndeeppink4\n\nhotpink2\n\nhotpink1\n\nhotpink4\n\nhotpink\n\nvioletred4\n\nvioletred3\n\nvioletred2\n\nvioletred1\n\nhotpink3\n\nlavenderblush4\n\nlavenderblush3\n\nlavenderblush2\n\nlavenderblush\n\nmaroon\n\npalevioletred4\n\npalevioletred3\n\npalevioletred\n\npalevioletred2\n\npalevioletred1\n\npink4\n\npink3\n\npink2\n\npink1\n\npink\n\nlightpink\n\nlightpink4\n\nlightpink3\n\nlightpink2\n\nlightpink1\n","code":""},{"path":"plotstyle.html","id":"alpha","chapter":"E Styling Plots","heading":"E.1.2 Alpha","text":"alpha argument changes transparency (0 = totally transparent, 1 = totally opaque).\nFigure E.1: Varying alpha values.\n","code":""},{"path":"plotstyle.html","id":"shape","chapter":"E Styling Plots","heading":"E.1.3 Shape","text":"shape argument changes shape points.\nFigure E.2: 25 shape values\n","code":""},{"path":"plotstyle.html","id":"linetype","chapter":"E Styling Plots","heading":"E.1.4 Linetype","text":"can probably guess linetype argument .\nFigure E.3: 6 linetype values different sizes.\n","code":""},{"path":"plotstyle.html","id":"palettes","chapter":"E Styling Plots","heading":"E.2 Palettes","text":"Discrete palettes change depending number categories.\nFigure E.4: Default discrete palette different numbers levels.\n","code":""},{"path":"plotstyle.html","id":"viridis-palettes","chapter":"E Styling Plots","heading":"E.2.1 Viridis Palettes","text":"Viridis palettes good colourblind-safe greyscale-safe plots. work number categories, best larger numbers categories continuous colours.","code":""},{"path":"plotstyle.html","id":"discrete-viridis-palettes","chapter":"E Styling Plots","heading":"E.2.1.1 Discrete Viridis Palettes","text":"Set discrete viridis colours scale_colour_viridis_d() scale_fill_viridis_d() set option argument one options . Set direction = -1 reverse order colours.\nFigure E.5: Discrete viridis palettes.\nend colour light plot start colour dark, can set begin end arguments values 0 1, scale_colour_viridis_c(begin = 0.1, end = 0.9).","code":""},{"path":"plotstyle.html","id":"continuous-viridis-palettes","chapter":"E Styling Plots","heading":"E.2.1.2 Continuous Viridis Palettes","text":"Set continuous viridis colours scale_colour_viridis_c() scale_fill_viridis_c() set option argument one options . Set direction = -1 reverse order colours.\nFigure E.6: Continuous viridis palettes.\n","code":""},{"path":"plotstyle.html","id":"brewer-palettes","chapter":"E Styling Plots","heading":"E.2.2 Brewer Palettes","text":"Brewer palettes give lot control plot colour fill. set scale_color_brewer() scale_fill_brewer() set palette argument one palettes . Set direction = -1 reverse order colours.","code":""},{"path":"plotstyle.html","id":"qualitative-brewer-palettes","chapter":"E Styling Plots","heading":"E.2.2.1 Qualitative Brewer Palettes","text":"palettes good categorical data 8 categories (palettes can handle 12). \"Paired\" palette useful categories arranged pairs.\nFigure E.7: Qualitative brewer palettes.\n","code":""},{"path":"plotstyle.html","id":"sequential-brewer-palettes","chapter":"E Styling Plots","heading":"E.2.2.2 Sequential Brewer Palettes","text":"palettes good 9 ordinal categories lot categories.\nFigure E.8: Sequential brewer palettes.\n","code":""},{"path":"plotstyle.html","id":"diverging-brewer-palettes","chapter":"E Styling Plots","heading":"E.2.2.3 Diverging Brewer Palettes","text":"palettes good ordinal categories 11 levels centre level neutral baseline category levels differ important way, agree versus disagree options.\nFigure E.9: Diverging brewer palettes.\n","code":""},{"path":"plotstyle.html","id":"themes-1","chapter":"E Styling Plots","heading":"E.3 Themes","text":"ggplot2 8 built-themes can add plot like plot + theme_bw() set default theme top script like theme_set(theme_bw()).\nFigure E.10: {ggplot2} themes.\n","code":""},{"path":"plotstyle.html","id":"ggthemes","chapter":"E Styling Plots","heading":"E.3.1 ggthemes","text":"can get themes add-packages, like ggthemes. themes also custom scale_ functions like scale_colour_economist(). website extensive examples instructions alternate dark versions themes.\nFigure E.11: {ggthemes} themes.\n","code":""},{"path":"license.html","id":"license","chapter":"License","heading":"License","text":"book licensed Creative Commons Attribution-ShareAlike 4.0 International License (CC--SA 4.0). free share adapt book. must give appropriate credit, provide link license, indicate changes made. adapt material, must distribute contributions license original.","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
